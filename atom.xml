<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yo42</title>
  
  <subtitle>Dont&#39;t Panic,Do not go gentle into that good night~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yo42.github.io/"/>
  <updated>2018-09-15T10:02:51.580Z</updated>
  <id>https://yo42.github.io/</id>
  
  <author>
    <name>Yo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hitchhiker&#39;s Guide to Python-优雅的包管理</title>
    <link href="https://yo42.github.io/2018/09/15/Hitchhiker-s-Guide-to-Python-%E4%BC%98%E9%9B%85%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <id>https://yo42.github.io/2018/09/15/Hitchhiker-s-Guide-to-Python-优雅的包管理/</id>
    <published>2018-09-15T09:45:48.832Z</published>
    <updated>2018-09-15T10:02:51.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打包Python项目"><a href="#打包Python项目" class="headerlink" title="打包Python项目"></a>打包Python项目</h1><p>本教程将指导您如何打包一个简单的Python项目。它将向您展示如何添加必要的文件和结构来创建包，如何构建包以及如何将其上载到Python包索引。</p><h2 id="一个简单的项目"><a href="#一个简单的项目" class="headerlink" title="一个简单的项目"></a>一个简单的项目</h2><p>本教程使用一个名为的简单项目<code>example_pkg</code>。如果您不熟悉Python的模块和<a href="https://packaging.python.org/glossary/#term-import-package" target="_blank" rel="noopener">导入包</a>，请花几分钟时间阅读包含<a href="https://docs.python.org/3/tutorial/modules.html#packages" target="_blank" rel="noopener">文件包和模块</a>的<a href="https://docs.python.org/3/tutorial/modules.html#packages" target="_blank" rel="noopener">Python文档</a>。</p><p>要在本地创建此项目，请创建以下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/example_pkg</span><br><span class="line">  /example_pkg</span><br><span class="line">    __init__.py</span><br></pre></td></tr></table></figure><p>创建此结构后，您将需要在顶级文件夹中运行本教程中的所有命令 - 所以一定要确保。<code>cd example_pkg</code></p><p>您还应该编辑<code>example_pkg/__init__.py</code>并在其中放入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = &quot;example_pkg&quot;</span><br></pre></td></tr></table></figure><p>这只是为了您可以在本教程后面验证它是否正确安装。</p><h2 id="创建包文件"><a href="#创建包文件" class="headerlink" title="创建包文件"></a>创建包文件</h2><p>现在，您将创建一些文件来打包此项目并准备分发。创建下面列出的新文件 - 您将在以下步骤中向其添加内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/example_pkg</span><br><span class="line">  /example_pkg</span><br><span class="line">    __init__.py</span><br><span class="line">  setup.py</span><br><span class="line">  LICENSE</span><br><span class="line">  README.md</span><br></pre></td></tr></table></figure><h2 id="创建的setup-py"><a href="#创建的setup-py" class="headerlink" title="创建的setup.py"></a>创建的setup.py</h2><p><code>setup.py</code>是<a href="https://packaging.python.org/key_projects/#setuptools" target="_blank" rel="noopener">setuptools</a>的构建脚本。它告诉setuptools你的包（例如名称和版本）以及要包含的代码文件。</p><p>打开<code>setup.py</code>并输入以下内容，您可以根据需要个性化值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import setuptools</span><br><span class="line"></span><br><span class="line">with open(&quot;README.md&quot;, &quot;r&quot;) as fh:</span><br><span class="line">    long_description = fh.read()</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=&quot;example_pkg&quot;,</span><br><span class="line">    version=&quot;0.0.1&quot;,</span><br><span class="line">    author=&quot;Example Author&quot;,</span><br><span class="line">    author_email=&quot;author@example.com&quot;,</span><br><span class="line">    description=&quot;A small example package&quot;,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=&quot;text/markdown&quot;,</span><br><span class="line">    url=&quot;https://github.com/pypa/sampleproject&quot;,</span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    classifiers=[</span><br><span class="line">        &quot;Programming Language :: Python :: 3&quot;,</span><br><span class="line">        &quot;License :: OSI Approved :: MIT License&quot;,</span><br><span class="line">        &quot;Operating System :: OS Independent&quot;,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>setup()</code>有几个论点。此示例包使用相对最小的集：</p><ul><li><code>name</code>是您的包的名称。只要包含字母，数字<code>_</code>和，就可以是任何名称<code>-</code>。它也不能在pypi.org上使用。</li><li><code>version</code> 是包版本看 <a href="https://www.python.org/dev/peps/pep-0440" target="_blank" rel="noopener"><strong>PEP 440</strong></a>有关版本的更多详细信息。</li><li><code>author</code>并<code>author_email</code>用于识别包的作者。</li><li><code>description</code> 是一个简短的，一句话的包的总结。</li><li><code>long_description</code>是包的详细说明。这显示在Python Package Index的包详细信息包中。在这种情况下，加载长描述<code>README.md</code>是一种常见模式。</li><li><code>long_description_content_type</code>告诉索引什么类型的标记用于长描述。在这种情况下，它是Markdown。</li><li><code>url</code>是项目主页的URL。对于许多项目，这只是一个指向GitHub，GitLab，Bitbucket或类似代码托管服务的链接。</li><li><code>packages</code>是应包含在<a href="https://packaging.python.org/glossary/#term-distribution-package" target="_blank" rel="noopener">分发包</a>中的所有Python <a href="https://packaging.python.org/glossary/#term-import-package" target="_blank" rel="noopener">导入包</a>的列表。我们可以使用 自动发现所有包和子包，而不是手动列出每个包。在这种情况下，包列表将是example_pkg，因为它是唯一存在的包。<code>find_packages()</code></li><li><code>classifiers</code>告诉索引并<a href="https://packaging.python.org/key_projects/#pip" target="_blank" rel="noopener">点</a>一些关于你的包的其他元数据。在这种情况下，该软件包仅与Python 3兼容，根据MIT许可证进行许可，并且与操作系统无关。您应始终至少包含您的软件包所使用的Python版本，软件包可用的许可证以及您的软件包将使用的操作系统。有关分类器的完整列表，请参阅<a href="https://pypi.org/classifiers/" target="_blank" rel="noopener">https://pypi.org/classifiers/</a>。</li></ul><p>除了这里提到的还有很多。有关详细信息，请参阅 <a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/" target="_blank" rel="noopener">打包和分发项目</a>。</p><h2 id="创建README-md"><a href="#创建README-md" class="headerlink" title="创建README.md"></a>创建README.md</h2><p>打开<code>README.md</code>并输入以下内容。如果您愿意，可以自定义此项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Example Package</span><br><span class="line"></span><br><span class="line">This is a simple example package. You can use</span><br><span class="line">[Github-flavored Markdown](https://guides.github.com/features/mastering-markdown/)</span><br><span class="line">to write your content.</span><br></pre></td></tr></table></figure><h2 id="创建许可证"><a href="#创建许可证" class="headerlink" title="创建许可证"></a>创建许可证</h2><p>上传到Python Package Index的每个包都包含许可证，这一点很重要。这告诉用户安装您的软件包可以使用您的软件包的条款。有关选择许可证的帮助，请参阅 <a href="https://choosealicense.com/" target="_blank" rel="noopener">https://choosealicense.com/</a>。选择许可证后，打开 <code>LICENSE</code>并输入许可证文本。例如，如果您选择了MIT许可证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Copyright (c) 2018 The Python Packaging Authority</span><br><span class="line"></span><br><span class="line">Permission is hereby granted, free of charge, to any person obtaining a copy</span><br><span class="line">of this software and associated documentation files (the &quot;Software&quot;), to deal</span><br><span class="line">in the Software without restriction, including without limitation the rights</span><br><span class="line">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span><br><span class="line">copies of the Software, and to permit persons to whom the Software is</span><br><span class="line">furnished to do so, subject to the following conditions:</span><br><span class="line"></span><br><span class="line">The above copyright notice and this permission notice shall be included in all</span><br><span class="line">copies or substantial portions of the Software.</span><br><span class="line"></span><br><span class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span><br><span class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span><br><span class="line">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span><br><span class="line">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span><br><span class="line">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span><br><span class="line">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span><br><span class="line">SOFTWARE.</span><br></pre></td></tr></table></figure><h2 id="生成分发档案"><a href="#生成分发档案" class="headerlink" title="生成分发档案"></a>生成分发档案</h2><p>下一步是为<a href="https://packaging.python.org/glossary/#term-distribution-package" target="_blank" rel="noopener">包</a>生<a href="https://packaging.python.org/glossary/#term-distribution-package" target="_blank" rel="noopener">成分发包</a>。这些是上传到包索引的档案，可以通过<a href="https://packaging.python.org/key_projects/#pip" target="_blank" rel="noopener">pip</a>安装。</p><p>确保您拥有<code>setuptools</code>并<code>wheel</code> 安装了最新版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --user --upgrade setuptools wheel</span><br></pre></td></tr></table></figure><p>小费</p><p>如果您在安装这些软件时遇到问题，请参阅 <a href="https://packaging.python.org/tutorials/installing-packages/" target="_blank" rel="noopener">安装软件包</a>教程</p><p>现在从<code>setup.py</code>位于的同一目录运行此命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py sdist bdist_wheel</span><br></pre></td></tr></table></figure><p>此命令应输出大量文本，一旦完成，应在<code>dist</code>目录中生成两个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dist/</span><br><span class="line">  example_pkg-0.0.1-py3-none-any.whl</span><br><span class="line">  example_pkg-0.0.1.tar.gz</span><br></pre></td></tr></table></figure><p>注意</p><p>如果您遇到麻烦，请复制输出并提出有关<a href="https://github.com/pypa/packaging-problems/issues/new?title=Trouble+following+packaging+libraries+tutorial" target="_blank" rel="noopener">包装问题的问题</a>，我们会尽力为您提供帮助！</p><p>该<code>tar.gz</code>文件是<a href="https://packaging.python.org/glossary/#term-source-archive" target="_blank" rel="noopener">源存档，</a>而该<code>.whl</code>文件是 <a href="https://packaging.python.org/glossary/#term-built-distribution" target="_blank" rel="noopener">构建的分发</a>。较新的<a href="https://packaging.python.org/key_projects/#pip" target="_blank" rel="noopener">pip</a>版本优先安装构建的发行版，但如果需要，将回退到源代码存档。您应该始终上传源存档并为项目兼容的平台提供构建的存档。在这种情况下，我们的示例包在任何平台上都与Python兼容，因此只需要一个构建的发行版。</p><h2 id="上传分发档案"><a href="#上传分发档案" class="headerlink" title="上传分发档案"></a>上传分发档案</h2><p>最后，是时候将您的包上传到Python Package Index了！</p><p>您需要做的第一件事是在Test PyPI上注册一个帐户。Test PyPI是用于测试和实验的包索引的单独实例。这对于像我们不一定想要上传到真实索引的本教程那样很棒。要注册帐户，请访问<a href="https://test.pypi.org/account/register/" target="_blank" rel="noopener">https://test.pypi.org/account/register/</a>并完成该页面上的步骤。在您上传任何软件包之前，您还需要验证您的电子邮件地址。有关Test PyPI的更多详细信息，请参阅 <a href="https://packaging.python.org/guides/using-testpypi/" target="_blank" rel="noopener">使用TestPyPI</a>。</p><p>现在您已注册，您可以使用<a href="https://packaging.python.org/key_projects/#twine" target="_blank" rel="noopener">twine</a>上传分发包。你需要安装Twine：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --user --upgrade twine</span><br></pre></td></tr></table></figure><p>安装完成后，运行Twine上传所有存档<code>dist</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twine upload --repository-url https://test.pypi.org/legacy/ dist/*</span><br></pre></td></tr></table></figure><p>系统将提示您输入使用Test PyPI注册的用户名和密码。命令完成后，您应该看到与此类似的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Uploading distributions to https://test.pypi.org/legacy/</span><br><span class="line">Enter your username: [your username]</span><br><span class="line">Enter your password:</span><br><span class="line">Uploading example_pkg-0.0.1-py3-none-any.whl</span><br><span class="line">100%|█████████████████████| 4.65k/4.65k [00:01&lt;00:00, 2.88kB/s]</span><br><span class="line">Uploading example_pkg-0.0.1.tar.gz</span><br><span class="line">100%|█████████████████████| 4.25k/4.25k [00:01&lt;00:00, 3.05kB/s]</span><br></pre></td></tr></table></figure><p>注意</p><p>如果您收到错误消息，则需要为您的包选择一个唯一的名称。一个不错的选择 。更新参数 ，删除文件夹，然后 <a href="https://packaging.python.org/tutorials/packaging-projects/#generating-archives" target="_blank" rel="noopener">重新生成存档</a>。<code>The user &#39;[your username]&#39; isn&#39;t allowed to upload to project&#39;example-pkg&#39;`</code>example_pkg_your_username<code>name</code>setup.py<code></code>dist`</p><p>上传后，您的包应该可以在TestPyPI上查看，例如，<a href="https://test.pypi.org/project/example-pkg" target="_blank" rel="noopener">https：</a> //test.pypi.org/project/example-pkg</p><h2 id="安装新上传的软件包"><a href="#安装新上传的软件包" class="headerlink" title="安装新上传的软件包"></a>安装新上传的软件包</h2><p>您可以使用<a href="https://packaging.python.org/key_projects/#pip" target="_blank" rel="noopener">pip</a>来安装包并验证它是否有效。创建一个新的<a href="https://packaging.python.org/key_projects/#virtualenv" target="_blank" rel="noopener">virtualenv</a>（请参阅<a href="https://packaging.python.org/tutorials/installing-packages/" target="_blank" rel="noopener">安装包</a>以获取详细说明）并从TestPyPI安装包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --index-url https://test.pypi.org/simple/ example_pkg</span><br></pre></td></tr></table></figure><p>注意</p><p>如果在预览步骤中使用了不同的包名称，请<code>example_pkg</code>在上面的命令中使用您的包名称替换 。</p><p>pip应该从Test PyPI安装包，输出应该如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collecting example_pkg</span><br><span class="line">  Downloading https://test-files.pythonhosted.org/packages/.../example_pkg-0.0.1-py3-none-any.whl</span><br><span class="line">Installing collected packages: example-pkg</span><br><span class="line">Successfully installed example-pkg-0.0.1</span><br></pre></td></tr></table></figure><p>您可以通过导入模块并引用先前<code>name</code>放置的属性来测试它是否已正确安装<code>__init__.py</code>。</p><p>运行Python解释器（确保你仍然在你的virtualenv中）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>然后导入模块并打印出<code>name</code>属性。无论您给出的<a href="https://packaging.python.org/glossary/#term-distribution-package" target="_blank" rel="noopener">分发包</a>名称是什么，这都应该是相同的 ，<code>setup.py</code>因为您的<a href="https://packaging.python.org/glossary/#term-import-package" target="_blank" rel="noopener">导入包</a>是<code>example_pkg</code>。</p><p>>&gt;&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import example_pkg</span><br><span class="line">&gt;&gt;&gt; example_pkg.name</span><br><span class="line">&apos;example_pkg&apos;</span><br></pre></td></tr></table></figure><h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><p><strong>恭喜，您已经打包并分发了一个Python项目！</strong> ✨🍰✨</p><p>请记住，本教程向您展示了如何将软件包上传到Test PyPI，而测试PyPI是短暂的。偶尔删除包和帐户并不罕见。如果您想将软件包上传到真正的Python软件包索引，可以通过在<a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org</a>上注册帐户并按照相同的说明进行上传，但是，使用上传软件包并输入您的帐户凭据在真正的PyPI上注册。您可以使用真正的PyPI安装包 。<code>twine upload dist/*`</code>pip install your-package`</p><p>在这一点上，如果你想阅读更多关于包装的Python库，你可以做一些事情：</p><ul><li>阅读有关使用<a href="https://packaging.python.org/key_projects/#setuptools" target="_blank" rel="noopener">setuptools</a>在<a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/" target="_blank" rel="noopener">打包和分发项目中</a>打包库的 更多信息。</li><li>阅读<a href="https://packaging.python.org/guides/packaging-binary-extensions/" target="_blank" rel="noopener">包装二进制扩展</a>。</li><li>考虑诸如<a href="https://packaging.python.org/key_projects/#flit" target="_blank" rel="noopener">flit</a>，<a href="https://github.com/ofek/hatch" target="_blank" rel="noopener">hatch</a>和<a href="https://github.com/sdispater/poetry" target="_blank" rel="noopener">poetry之类的</a><a href="https://packaging.python.org/key_projects/#setuptools" target="_blank" rel="noopener">setuptools的</a>替代方案。</li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a href="https://packaging.python.org/" target="_blank" rel="noopener">目录</a></h3><ul><li><a href="https://packaging.python.org/overview/" target="_blank" rel="noopener">Python的打包概述</a></li><li>教程<ul><li><a href="https://packaging.python.org/tutorials/installing-packages/" target="_blank" rel="noopener">安装包</a></li><li><a href="https://packaging.python.org/tutorials/managing-dependencies/" target="_blank" rel="noopener">管理应用程序依赖项</a></li><li><a href="https://packaging.python.org/tutorials/packaging-projects/#" target="_blank" rel="noopener">打包Python项目</a></li></ul></li><li><a href="https://packaging.python.org/guides/" target="_blank" rel="noopener">指南</a></li><li><a href="https://packaging.python.org/discussions/" target="_blank" rel="noopener">讨论</a></li><li><a href="https://packaging.python.org/specifications/" target="_blank" rel="noopener">PyPA规格</a></li><li><a href="https://packaging.python.org/key_projects/" target="_blank" rel="noopener">项目摘要</a></li><li><a href="https://packaging.python.org/glossary/" target="_blank" rel="noopener">词汇表</a></li><li><a href="https://packaging.python.org/support/" target="_blank" rel="noopener">如何获得支持</a></li><li><a href="https://packaging.python.org/contribute/" target="_blank" rel="noopener">有助于本指南</a></li><li><a href="https://packaging.python.org/news/" target="_blank" rel="noopener">新闻</a></li></ul><h4 id="上一主题"><a href="#上一主题" class="headerlink" title="上一主题"></a>上一主题</h4><p><a href="https://packaging.python.org/tutorials/managing-dependencies/" target="_blank" rel="noopener">管理应用程序依赖项</a></p><h4 id="下一个主题"><a href="#下一个主题" class="headerlink" title="下一个主题"></a>下一个主题</h4><p><a href="https://packaging.python.org/guides/" target="_blank" rel="noopener">指南</a></p><h3 id="一些常见的包管理工具"><a href="#一些常见的包管理工具" class="headerlink" title="一些常见的包管理工具"></a>一些常见的包管理工具</h3><ul><li>distutils</li><li>setuptools</li><li>distribute</li><li>disutils2</li><li>distlib</li><li>pip</li></ul><p><strong><em>==创建纯 Python 或者平台 Wheels 的命令是：<code>python setup.py bdist_wheel</code></em></strong>==</p><h2 id="代码打包"><a href="#代码打包" class="headerlink" title="代码打包"></a>代码打包</h2><p>打包你的代码，将它共享出去，让其他的开发者使用。例如，将其打包成一个库分享给其他开发者，以便他们用在自己的应用中，或者共享给开发工具，比如 ‘py.test’。</p><p>这种代码发布方式具备的优势是其成熟的工具生态系统，例如 PyPI 和 pip，这些工具使得其他的开发者很容易下载和安装你的包，无论是用于偶然的实验，还是将其集成到大型专业的系统中。</p><p>Python 代码以这种方式发布共享是一个成熟的惯例。如果你的代码不是在 PyPI 上打包的，那么别的开发者很难找到它，也很难将它集成到他们现有的程序中。他们会严重质疑这些没有在 PyPI 上打包项目的槽糕管理，甚至认为这些项目已停止维护。</p><p>类似于这种发布代码的方式的缺点是，它依赖于开发者了解如何安装它所依赖的 Python 版本，并且能够和愿意使用类似 pip 这样的工具安装你的包所需要的其他依赖。这种做法适合发布代码给其他开发人员，但是不适合发布应用程序给终端用户使用。</p><p><a href="https://python-packaging-user-guide.readthedocs.io/" target="_blank" rel="noopener">Python 打包指南</a> 提供了创建和维护 Pythond 包的一个延伸的指导。</p><h2 id="打包的替代方案"><a href="#打包的替代方案" class="headerlink" title="打包的替代方案"></a>打包的替代方案</h2><p>为了发布应用程序给终端用户使用，你应该 <a href="http://docs.python-guide.org/en/latest/shipping/freezing/#freezing-your-code-ref" target="_blank" rel="noopener">冻结你的应用程序</a>。</p><p>在 Linux 平台，你可以考虑 <a href="http://docs.python-guide.org/en/latest/shipping/packaging/#packaging-for-linux-distributions-ref" target="_blank" rel="noopener">创建一个Linux发行版软件包</a> (例如 Debian or Ubuntu 系统中是一个.deb 文件)</p><h2 id="对于-Python-开发者"><a href="#对于-Python-开发者" class="headerlink" title="对于 Python 开发者"></a>对于 Python 开发者</h2><p>如果你正在写一个开源的 Python 模块，<a href="http://pypi.python.org/" target="_blank" rel="noopener">PyPI</a> 是一个适合它发布的地方，PyPI 的另一个名字 <em>The Cheeseshop</em> 更被人熟知。</p><h3 id="Pip-vs-easy-install"><a href="#Pip-vs-easy-install" class="headerlink" title="Pip vs. easy_install"></a>Pip vs. easy_install</h3><p>使用 <a href="http://pypi.python.org/pypi/pip" target="_blank" rel="noopener">pip</a>。 详情 <a href="http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install" target="_blank" rel="noopener">点击这里</a></p><h3 id="私人-PyPI"><a href="#私人-PyPI" class="headerlink" title="私人 PyPI"></a>私人 PyPI</h3><p>如果你想要使用源码安装一个 Python 包，而不是使用 PyPI，(即, 你的包<em>不对外公开</em>)，你可以通过托管一个简单的 HTTP 服务器来完成，从那些包的安装路径下运行。</p><p><strong>从一个例子入手是最好的</strong></p><p>比如你想安装一个包，它的名字是 <code>MyPackage.tar.gz</code>，假设你的目录结构使这样：</p><ul><li>archive<ul><li>MyPackage<ul><li>MyPackage.tar.gz</li></ul></li></ul></li></ul><h2 id="代码冻结"><a href="#代码冻结" class="headerlink" title="代码冻结"></a>代码冻结</h2><p>『冻结』你的代码是指创建单个可执行文件，文件里包含所有程序代码以及 Python 解释器。</p><p>像 Dropbox、星战前夜、文明 4 和 BitTorrent 客户端都是如此。</p><p>进行这种分发的好处是你的用户不需要安装所要求的 Python 版本（或其他）即可直接运行你的应用程序。 在 Windows 上，甚至许多 Linux发行版和 OS X，系统自带的 Python 版本总是不尽如人意，此时这种分发方式就会体现其价值。</p><p>此外，终端用户软件应始终是可执行的格式。 以 <code>.py</code> 结尾的文件一般适用于软件工程师和系统管理员。</p><p>冻结的一个缺点是它会增加大约 2-12 MB 的发行大小。另外，如果修补了 Python 的安全漏洞， 你将需要独立负责更新分发的应用程序。</p><h2 id="冻结的替代方案"><a href="#冻结的替代方案" class="headerlink" title="冻结的替代方案"></a>冻结的替代方案</h2><p><a href="http://pythonguidecn.readthedocs.io/zh/latest/shipping/packaging.html#packaging-your-code-ref" target="_blank" rel="noopener">打包你的代码</a> 是指把你的库或工具分发给其他开发者。</p><p>Linux 下一个冻结的替代品是 <a href="http://pythonguidecn.readthedocs.io/zh/latest/shipping/packaging.html#packaging-for-linux-distributions-ref" target="_blank" rel="noopener">Linux 分发包</a> （比如，对于 Debian 或 Ubuntu 是 .deb文件，而对于 Red Hat 与 SuSE 是 .rpm 文件）</p><h2 id="冻结工具的比较"><a href="#冻结工具的比较" class="headerlink" title="冻结工具的比较"></a>冻结工具的比较</h2><p>解决方案还有平台/特性支持性：</p><table><thead><tr><th>Solution</th><th>Windows</th><th>Linux</th><th>OS X</th><th>Python 3</th><th>License</th><th>One-file mode</th><th>Zipfile import</th><th>Eggs</th><th>pkg_resources support</th></tr></thead><tbody><tr><td>bbFreeze</td><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>MIT</td><td>no</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>py2exe</td><td>yes</td><td>no</td><td>no</td><td>yes</td><td>MIT</td><td>yes</td><td>yes</td><td>no</td><td>no</td></tr><tr><td>pyInstaller</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>GPL</td><td>yes</td><td>no</td><td>yes</td><td>no</td></tr><tr><td>cx_Freeze</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>PSF</td><td>no</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>py2app</td><td>no</td><td>no</td><td>yes</td><td>yes</td><td>MIT</td><td>no</td><td>yes</td><td>yes</td><td>yes</td></tr></tbody></table><blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在 Linux 下冻结 Windows 安装包，之前只有 PyInstaller 支持，不过后来也是  <a href="http://stackoverflow.com/questions/2950971/cross-compiling-a-python-script-on-linux-into-a-windows-executable#comment11890276_2951046" target="_blank" rel="noopener">停止支持了</a>。</p><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>所有解决方案都需要在 Windows 目标机器上安装了MS Visual C++ dll，除了 py2app 以外。只有 Pyinstaller 支持创建独立运行的绑定了dll 的 exe 文件，你需要在创建时传递参数 <code>--onefile</code> 到 <code>Configure.py</code>。</p></blockquote><h2 id="Windows-下的解决方案"><a href="#Windows-下的解决方案" class="headerlink" title="Windows 下的解决方案"></a>Windows 下的解决方案</h2><h3 id="bbFreeze"><a href="#bbFreeze" class="headerlink" title="bbFreeze"></a>bbFreeze</h3><p>前置要求是安装 <a href="http://pythonguidecn.readthedocs.io/zh/latest/starting/install/win.html#install-windows" target="_blank" rel="noopener">Python, Setuptools 以及 pywin32 的依赖项</a>。</p><ol><li>使用以下命令安装 <code>bbfreeze</code>:</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install bbfreeze</span><br></pre></td></tr></table></figure><ol><li>编写最简单的示例  <code>bb_setup.py</code>：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from bbfreeze import Freezer</span><br><span class="line"></span><br><span class="line">freezer = Freezer(distdir=<span class="string">'dist'</span>)</span><br><span class="line">freezer.addScript(<span class="string">'foobar.py'</span>, gui_only=<span class="keyword">True</span>)</span><br><span class="line">freezer()</span><br></pre></td></tr></table></figure><blockquote><h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h4><p>这将适用于最基本的文件脚本。 有时候你需要高级的用法，如包含或者排除某些路径，如下：<br><code>freezer = Freezer(distdir=&#39;dist&#39;, includes=[&#39;my_code&#39;], excludes=[&#39;docs&#39;])</code></p></blockquote><ol><li>(可选) 包含图标</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">freezer.setIcon(<span class="string">'my_awesome_icon.ico'</span>)</span><br></pre></td></tr></table></figure><ol><li>为冻结器（freezer）提供 Microsoft Visual C 运行时 DLL，我们有一般有两种方法，第一种是将Microsoft Visual Studio 路径 附加您的 <code>sys.path</code> 中，第二种是在脚本所在同一文件夹中放置 <code>msvcp90.dll</code> 文件。</li><li>开始冻结!</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python bb_setup.py</span><br></pre></td></tr></table></figure><h3 id="py2exe"><a href="#py2exe" class="headerlink" title="py2exe"></a>py2exe</h3><p>前置要求是安装了 <a href="http://pythonguidecn.readthedocs.io/zh/latest/starting/install/win.html#install-windows" target="_blank" rel="noopener">Python on Windows</a>。</p><ol><li>下载并且安装 <a href="http://sourceforge.net/projects/py2exe/files/py2exe/" target="_blank" rel="noopener">http://sourceforge.net/projects/py2exe/files/py2exe/</a></li><li>编写 <code>setup.py</code> (<a href="http://www.py2exe.org/index.cgi/ListOfOptions" target="_blank" rel="noopener">配置选项清单</a>):</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from distutils.core import setup</span><br><span class="line">import py2exe</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    windows=[&#123;<span class="string">'script'</span>: <span class="string">'foobar.py'</span>&#125;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>(可选) <a href="http://www.py2exe.org/index.cgi/CustomIcons" target="_blank" rel="noopener">包含图标</a></li><li>(可选) <a href="http://stackoverflow.com/questions/112698/py2exe-generate-single-executable-file#113014" target="_blank" rel="noopener">单文件模式</a></li><li>生成 :file: <em>.exe</em> 到 <code>dist</code> 目录:</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python setup.py py2exe</span><br></pre></td></tr></table></figure><ol><li>两种方式来提供 Microsoft Visual C 运行时 DLL。两个选项: <a href="https://www.microsoft.com/en-us/download/details.aspx?id=29" target="_blank" rel="noopener">在目标机器全局安装 dll</a> 或者 <a href="http://www.py2exe.org/index.cgi/Tutorial#Step52" target="_blank" rel="noopener">与 .exe 一起分发 dll</a>。</li></ol><h3 id="PyInstaller"><a href="#PyInstaller" class="headerlink" title="PyInstaller"></a>PyInstaller</h3><p>前置条件是安装 <a href="http://pythonguidecn.readthedocs.io/zh/latest/starting/install/win.html#install-windows" target="_blank" rel="noopener">Python, Setuptools 以及pywin32 依赖项</a>.</p><ul><li><a href="http://bojan-komazec.blogspot.com/2011/08/how-to-create-windows-executable-from.html" target="_blank" rel="noopener">更多的简单教程</a></li><li><a href="https://pyinstaller.readthedocs.io/en/stable/" target="_blank" rel="noopener">官方手册</a></li></ul><h2 id="OS-X"><a href="#OS-X" class="headerlink" title="OS X"></a>OS X</h2><h3 id="py2app"><a href="#py2app" class="headerlink" title="py2app"></a>py2app</h3><h3 id="PyInstaller-1"><a href="#PyInstaller-1" class="headerlink" title="PyInstaller"></a>PyInstaller</h3><p>PyInstaller可用于在 Mac OS X 10.6（Snow Leopard）或更新版本上构建 Unix 可执行文件和窗口应用程序。</p><p>要安装 PyInstaller，使用 pip：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pyinstaller</span><br></pre></td></tr></table></figure><p>要创建标准的 Unix 可执行文件，使用 <code>script.py</code> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyinstaller script.py</span><br></pre></td></tr></table></figure><p>这会创建：</p><ul><li><code>script.spec</code> 文件, 类似于 <code>make</code> 文件</li><li><code>build</code> 文件夹, 存放日志文件</li><li><code>dist</code> 文件夹, 存放主要的可执行文件 <code>script</code> ，和一些依赖的Python库</li></ul><p><code>script.py</code> 会把全部内容放在同一个文件夹中。PyInstaller 将所有 <code>script.py</code> 用到的 Python 库放到 <code>dist</code> 文件夹中。所以在分发可执行文件时，会分发整个 <code>dist</code> 文件夹。</p><p><code>script.spec</code> 文件可以编辑成 <a href="http://pythonhosted.org/PyInstaller/#spec-file-operation" target="_blank" rel="noopener">自定义构建</a> ， 比如可以：</p><ul><li>将数据文件与可执行文件绑定在一起</li><li>包含 PyInstaller 无法自动推断的运行时库（ <code>.dll</code> 或 <code>.so</code> 文件）</li><li>将 Python 运行时选项添加到可执行文件中</li></ul><p>现在：代码 <code>script.spec</code> 可以用 <code>pyinstaller</code> （而不是再次使用 <code>script.py</code> ）运行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyinstaller script.spec</span><br></pre></td></tr></table></figure><p>要创建独立的 OS X 窗口应用程序，请使用 <code>--windowed</code> 选项：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyinstaller --windowed script.spec</span><br></pre></td></tr></table></figure><p>这将在 <code>dist</code> 文件夹中创建一个 <code>script.app</code> 。请确保在 Python 代码中 使用 GUI 软件包，例如 <a href="https://riverbankcomputing.com/software/pyqt/intro" target="_blank" rel="noopener">PyQt</a> 或 <a href="http://wiki.qt.io/About-PySide" target="_blank" rel="noopener">PySide</a>来控制应用程序的图形部分。</p><p><code>script.spec</code> 有几个与 Mac OS X 应用程序捆绑有关的 <a href="http://pythonhosted.org/PyInstaller/spec-files.html#spec-file-options-for-a-mac-os-x-bundle" target="_blank" rel="noopener">选项</a> 。 例如，要指定应用程序的图标，请使用 <code>icon=\path\to\icon.icns</code> 选项。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://packaging.python.org/tutorials/packaging-projects/#initial-files" target="_blank" rel="noopener">Python官方文档</a></li><li><a href="https://blog.zengrong.net/post/2169.html" target="_blank" rel="noopener">https://blog.zengrong.net/post/2169.html</a></li><li><a href="http://ju.outofmemory.cn/entry/106479" target="_blank" rel="noopener">http://ju.outofmemory.cn/entry/106479</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;打包Python项目&quot;&gt;&lt;a href=&quot;#打包Python项目&quot; class=&quot;headerlink&quot; title=&quot;打包Python项目&quot;&gt;&lt;/a&gt;打包Python项目&lt;/h1&gt;&lt;p&gt;本教程将指导您如何打包一个简单的Python项目。它将向您展示如何添加必要的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker Harbor镜像仓库</title>
    <link href="https://yo42.github.io/2018/09/15/Docker-Harbor%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>https://yo42.github.io/2018/09/15/Docker-Harbor镜像仓库/</id>
    <published>2018-09-15T09:03:26.441Z</published>
    <updated>2018-09-15T09:43:45.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hitchhiker&#39;s Guide to Python-关于项目License</title>
    <link href="https://yo42.github.io/2018/09/15/Hitchhiker%E2%80%99s-Guide-to-Python-%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AELicense/"/>
    <id>https://yo42.github.io/2018/09/15/Hitchhiker’s-Guide-to-Python-关于项目License/</id>
    <published>2018-09-15T04:40:43.334Z</published>
    <updated>2018-09-15T09:43:04.196Z</updated>
    
    <content type="html"><![CDATA[<p>您的源码发布 <em>需要</em> 一个许可证。在美国，如果没有指定许可证，用户就没有合法的权利下载、修改或分发。此外，除非你告诉他们要遵循什么规则，否则人们不能对你的代码做出贡献。选择一个许可证是很复杂的，所以这里有一些建议:</p><p>开源许可。 这里有许多可以选择 <a href="http://opensource.org/licenses/alphabetical" target="_blank" rel="noopener"> 开源许可 </a>  。</p><p>通常, 这些许可分为两类：</p><ol><li>一类是让使用者能自由地使用软件 (像这种更加开发的开源许可有 MIT ， BSD &amp; Apache) 。</li><li>另一类是确保代码本身–无论发生任何修改或发布–该软件代码都应该是免费的 (像这种有一定限制的免费开源软件许可有 GPL 和 LGPL) 。</li></ol><p>后者在某种意义上是不那么宽容开放的，因为他们不允许有人向软件中添加代码，并在不包括其更改的源代码的情况下发布代码。</p><p>为了帮助你为自己的项目选择一个许可证，请 <strong>使用</strong> <a href="http://choosealicense.com/" target="_blank" rel="noopener">许可证选择器</a> 。</p><p><strong>更宽容的</strong></p><ul><li>PSFL (Python Software Foundation License) – 用于对 Python 本身作出贡献。</li><li>MIT / BSD / ISC<ul><li>MIT (X11)</li><li>New BSD</li><li>ISC</li></ul></li><li>Apache</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">Python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;您的源码发布 &lt;em&gt;需要&lt;/em&gt; 一个许可证。在美国，如果没有指定许可证，用户就没有合法的权利下载、修改或分发。此外，除非你告诉他们要遵循什么规则，否则人们不能对你的代码做出贡献。选择一个许可证是很复杂的，所以这里有一些建议:&lt;/p&gt;
&lt;p&gt;开源许可。 这里有许多可以选
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Hitchhiker&#39;s Guide to Python-常见陷阱</title>
    <link href="https://yo42.github.io/2018/09/15/Hitchhiker%E2%80%99s-Guide-to-Python-%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1/"/>
    <id>https://yo42.github.io/2018/09/15/Hitchhiker’s-Guide-to-Python-常见陷阱/</id>
    <published>2018-09-15T04:40:16.342Z</published>
    <updated>2018-09-15T09:42:52.940Z</updated>
    
    <content type="html"><![CDATA[<p>通常，Python 旨在成为一门简洁一致的语言，避免发生意外。然而，有些情况可能会给新手们造成困惑。</p><p>在这些情况中，有一些虽是有意为之，但还是有潜在风险。还有一些则可以说是语言设计缺陷了。总之，下面列出的这些情况都是些乍一看很不好理解的行为，不过一旦您了解了这些奇怪行为背后的机理，也就基本上能理解了。</p><h2 id="可变默认参数"><a href="#可变默认参数" class="headerlink" title="可变默认参数"></a>可变默认参数</h2><p>似乎每个 Python 新手都会感到惊讶的一点是 Python 在函数定义中对待可变默认参数的方法。</p><h3 id="您所写的"><a href="#您所写的" class="headerlink" title="您所写的"></a>您所写的</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def append_to(element, to=[]):</span><br><span class="line">    to.append(element)</span><br><span class="line">    <span class="keyword">return</span> to</span><br></pre></td></tr></table></figure><h3 id="您可能期待的结果"><a href="#您可能期待的结果" class="headerlink" title="您可能期待的结果"></a>您可能期待的结果</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_list = append_to(<span class="number">12</span>)</span><br><span class="line"><span class="keyword">print</span> my_list</span><br><span class="line"></span><br><span class="line">my_other_list = append_to(<span class="number">42</span>)</span><br><span class="line"><span class="keyword">print</span> my_other_list</span><br></pre></td></tr></table></figure><p>函数每次被调用时，如果不提供第二个参数，就创建一个新的列表。所以结果就应该是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">12</span>]</span><br><span class="line">[<span class="number">42</span>]</span><br></pre></td></tr></table></figure><h3 id="实际上的结果"><a href="#实际上的结果" class="headerlink" title="实际上的结果"></a>实际上的结果</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">12</span>]</span><br><span class="line">[<span class="number">12</span>, <span class="number">42</span>]</span><br></pre></td></tr></table></figure><p><em>一旦</em> 完成了函数定义，一个新的列表就创建出来了，而且在随后的每一次函数调用中被使用的都是这个列表。</p><p><em>一旦</em> 完成了函数定义，Python 的默认参数就被赋值了，而且在随后的每一次函数调用中都不会再被默认值重复赋值（就像是在，嗯，Ruby 里那样）。这就意味着如果您使用了一个可变默认参数，并且改变了它，您也会且 <em>将会</em> 在未来的所有函数调用中改变这同一个参数对象。</p><h3 id="您实际上应该做的"><a href="#您实际上应该做的" class="headerlink" title="您实际上应该做的"></a>您实际上应该做的</h3><p>使用一个默认值来表示我们并不想给这个参数赋值，从而每次在函数被调用时我们都创建一个新的对象。（<a href="http://docs.python.org/library/constants.html#None" target="_blank" rel="noopener"><code>None</code></a> 作为默认值通常是个好选择）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def append_to(element, to=None):</span><br><span class="line">    <span class="keyword">if</span> to is None:</span><br><span class="line">        to = []</span><br><span class="line">    to.append(element)</span><br><span class="line">    <span class="keyword">return</span> to</span><br></pre></td></tr></table></figure><p>可别忘了，您所传递的第二个参数仍应该是个 <em>列表</em> 对象。</p><h3 id="利用好『缺陷』"><a href="#利用好『缺陷』" class="headerlink" title="利用好『缺陷』"></a>利用好『缺陷』</h3><p>有时你可以专门 <strong>利用</strong>（或者说特地使用）这种行为来维护函数调用间的状态。这通常用于编写缓存函数。</p><h2 id="延迟绑定闭包"><a href="#延迟绑定闭包" class="headerlink" title="延迟绑定闭包"></a>延迟绑定闭包</h2><p>另一个常见的困惑是 Python 在闭包（或在周围全局作用域）中绑定变量的方式。</p><h3 id="当你写下"><a href="#当你写下" class="headerlink" title="当你写下"></a>当你写下</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def create_multipliers():</span><br><span class="line">    <span class="keyword">return</span> [lambda x : i * x <span class="keyword">for</span> i in range(<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><h3 id="你期望发生"><a href="#你期望发生" class="headerlink" title="你期望发生"></a>你期望发生</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> multiplier in create_multipliers():</span><br><span class="line">    <span class="keyword">print</span> multiplier(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>一个包含五个函数的列表，每个函数有它们自己的封闭变量 <code>i</code> 乘以它们的参数，得到:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="而事实是："><a href="#而事实是：" class="headerlink" title="而事实是："></a>而事实是：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>五个函数被创建了，它们全都用 4 乘以 <code>x</code> 。</p><p>Python 的闭包是 <strong>延迟绑定的</strong> 。 这意味着闭包中用到的变量的值，是在内部函数被调用时查询得到的。</p><p>这里，不论 <strong>任何</strong> 返回的函数是如何被调用的， <code>i</code> 取的是调用时周围作用域里的值。 当循环完成时， <code>i</code> 的值最终变成了 4。</p><p>关于这个陷阱有一个普遍严重的误解，它被认为只针对 Python 的 <a href="http://docs.python.org/reference/expressions.html#lambda" target="_blank" rel="noopener">闭包 lambda</a> 定义方式。 事实上，由 <code>lambda</code> 表达式创建的函数并没什么特别，同样的问题也出现在使用普通的 <code>def</code> 上：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def create_multipliers():</span><br><span class="line">    multipliers = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i in range(<span class="number">5</span>):</span><br><span class="line">        def multiplier(x):</span><br><span class="line">            <span class="keyword">return</span> i * x</span><br><span class="line">        multipliers.append(multiplier)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> multipliers</span><br></pre></td></tr></table></figure><h3 id="以上正确的做法应该是："><a href="#以上正确的做法应该是：" class="headerlink" title="以上正确的做法应该是："></a>以上正确的做法应该是：</h3><p>最简单通用的解决方案可以说是有点取巧（hack）。由于 Python 拥有在前文提到的『为函数默认参数赋值』的行为（参见 <a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/gotchas.html#default-args" target="_blank" rel="noopener">可变默认参数</a> ），你可以创建一个立即绑定参数的闭包，像下面这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def create_multipliers():</span><br><span class="line">    <span class="keyword">return</span> [lambda x, i=i : i * x <span class="keyword">for</span> i in range(<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p>或者，使用 <code>functools.partial</code> 函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line">from operator import mul</span><br><span class="line"></span><br><span class="line">def create_multipliers():</span><br><span class="line">    <span class="keyword">return</span> [partial(mul, i) <span class="keyword">for</span> i in range(<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><h3 id="缺陷并不可怕"><a href="#缺陷并不可怕" class="headerlink" title="缺陷并不可怕"></a>缺陷并不可怕</h3><p>有时你就想要闭包有如此表现，延迟绑定在很多情况下是一个很赞的特性。不幸的是，循环创建独立函数是一种会使它们出差错的情况。</p><h2 id="字节码（-pyc）文件无处不在！"><a href="#字节码（-pyc）文件无处不在！" class="headerlink" title="字节码（.pyc）文件无处不在！"></a>字节码（.pyc）文件无处不在！</h2><p>默认情况下，当你直接执行 Python 脚本文件时，Python 解释器会自动将该文件的字节码版本写入同目录下。 比如， <code>module.pyc</code>。</p><p>这些 <code>.pyc</code> 文件不应该被纳入源代码仓库。</p><p>理论上，出于性能原因，此行为默认为开启。 没有这些字节码文件， Python 会在每次加载文件时重新生成字节码文件。</p><h3 id="禁用字节码（-pyc）文件"><a href="#禁用字节码（-pyc）文件" class="headerlink" title="禁用字节码（.pyc）文件"></a>禁用字节码（.pyc）文件</h3><p>幸运的是，生成字节码的过程非常快，在开发代码时不需要担心。</p><p>那些文件很讨厌，所以让我们摆脱他们吧！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export PYTHONDONTWRITEBYTECODE=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用 <code>$PYTHONDONTWRITEBYTECODE</code> 环境变量来命令 Python 不将这些文件写入磁盘， 开发环境将会保持整洁和干净。</p><p>我建议在你的 <code>~/.profile</code> 里设置这个环境变量。</p><h3 id="删除字节码（-pyc）文件"><a href="#删除字节码（-pyc）文件" class="headerlink" title="删除字节码（.pyc）文件"></a>删除字节码（.pyc）文件</h3><p>以下是删除所有已存在字节码文件的好方法:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find . -type f -name <span class="string">"*.py[co]"</span> -delete -<span class="keyword">or</span> -type d -name <span class="string">"__pycache__"</span> -delete</span><br></pre></td></tr></table></figure><p>从项目根目录运行，所有 <code>.pyc</code> 文件会瞬间消失。</p><h3 id="版本控制忽略"><a href="#版本控制忽略" class="headerlink" title="版本控制忽略"></a>版本控制忽略</h3><p>如果由于性能原因仍然需要 <code>.pyc</code> 文件，你可以随时将它们添加到版本控制存储库的忽略文件中。 流行的版本控制系统能够使用文件中定义的通配符来应用特殊规则。</p><p>一份忽略文件将确保匹配的文件未被检入存储库。 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 使用 <code>.gitignore</code>，而 <a href="https://www.mercurial-scm.org/" target="_blank" rel="noopener">Mercurial</a> 使用 <code>.hgignore</code>。</p><p>忽略文件里至少应该具备以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">syntax:glob   <span class="comment"># This line is not needed for .gitignore files.</span></span><br><span class="line">*.py[cod]     <span class="comment"># Will match .pyc, .pyo and .pyd files.</span></span><br><span class="line">__pycache__/  <span class="comment"># Exclude the whole folder</span></span><br></pre></td></tr></table></figure><p>可按需添加更多文件和目录。下次提交到存储库时，这些文件将不被包括。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">Python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常，Python 旨在成为一门简洁一致的语言，避免发生意外。然而，有些情况可能会给新手们造成困惑。&lt;/p&gt;
&lt;p&gt;在这些情况中，有一些虽是有意为之，但还是有潜在风险。还有一些则可以说是语言设计缺陷了。总之，下面列出的这些情况都是些乍一看很不好理解的行为，不过一旦您了解了这
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Hitchhiker&#39;s Guide to Python-日志记录</title>
    <link href="https://yo42.github.io/2018/09/15/Hitchhiker%E2%80%99s-Guide-to-Python-%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/"/>
    <id>https://yo42.github.io/2018/09/15/Hitchhiker’s-Guide-to-Python-日志记录/</id>
    <published>2018-09-15T04:39:54.022Z</published>
    <updated>2018-09-15T09:43:07.988Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://docs.python.org/library/logging.html#module-logging" target="_blank" rel="noopener"><code>logging</code></a> 模块自 2.3 版以来一直是 Python 标准库的一部分。在 <a href="https://www.python.org/dev/peps/pep-0282" target="_blank" rel="noopener"><strong>PEP 282</strong></a> 中有对它的简洁描述。除了 <a href="http://docs.python.org/howto/logging.html#logging-basic-tutorial" target="_blank" rel="noopener">基础日志教程</a>之外，这些文档是非常难以阅读的。</p><p>日志记录一般有两个目的：</p><ul><li><strong>诊断日志</strong> 记录与应用程序操作相关的日志。例如，当用户遇到程序报错时， 可通过搜索诊断日志以获得上下文信息。</li><li><strong>审计日志</strong> 为商业分析而记录的日志。从审计日志中，可提取用户的交易信息， 并结合其他用户资料构成用户报告，或者用来作为优化商业目标的数据支撑。</li></ul><h2 id="…-或者使用打印（print）"><a href="#…-或者使用打印（print）" class="headerlink" title="… 或者使用打印（print）?"></a>… 或者使用打印（print）?</h2><p>当需要在命令行应用中显示帮助文档时， <code>print</code> 是一个相对于日志更好的选择。 而在其他时候，日志总能优于 <code>print</code> ，理由如下：</p><ul><li>日志事件产生的 <a href="https://docs.python.org/library/logging.html#logrecord-attributes" target="_blank" rel="noopener">日志记录</a> ，包含清晰可用的诊断信息，如文件名称、路径、函数名和行号等。</li><li>包含日志模块的应用，默认可通过根记录器对应用的日志流进行访问，除非你做了日志过滤。</li><li>可通过 <a href="http://docs.python.org/library/logging.html#logging.Logger.setLevel" target="_blank" rel="noopener"><code>logging.Logger.setLevel()</code></a> 方法有选择地记录日志， 或可通过设置 <code>logging.Logger.disabled</code> 属性为 <code>True</code> 来禁用日志记录。</li></ul><h2 id="在库中记录日志"><a href="#在库中记录日志" class="headerlink" title="在库中记录日志"></a>在库中记录日志</h2><p>官方的 <a href="http://docs.python.org/howto/logging.html" target="_blank" rel="noopener">日志指南</a>  里有相关的 <a href="https://docs.python.org/howto/logging.html#configuring-logging-for-a-library" target="_blank" rel="noopener">库日志配置</a> 的说明。由于是 <em>用户</em> ，而非库来指定如何响应日志事件， 因此这里有一个值得反复说明的忠告：</p><blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>强烈建议不要向您的库日志中加入除 NullHandler 外的其它处理程序。</p></blockquote><p>在库中，声明日志的最佳方式是通过 <code>__name__</code> 全局变量： <a href="http://docs.python.org/library/logging.html#module-logging" target="_blank" rel="noopener"><code>logging</code></a> 模块通过点（<code>.</code>）运算符创建层级排列的日志，因此，用 <code>__name__</code> 可以避免名字冲突。</p><p>以下是一个来自 <a href="https://github.com/kennethreitz/requests" target="_blank" rel="noopener">requests 资源</a> 的最佳实践的例子 —— 请将它放置在 <code>__init__.py</code> 文件中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.getLogger(__name__).addHandler(logging.NullHandler())</span><br></pre></td></tr></table></figure><h2 id="在应用程序中记录日志"><a href="#在应用程序中记录日志" class="headerlink" title="在应用程序中记录日志"></a>在应用程序中记录日志</h2><p>应用程序开发的权威指南  <a href="http://12factor.net/" target="_blank" rel="noopener">《twelve factor app》</a>  也在其中一节描述了 <a href="http://12factor.net/logs" target="_blank" rel="noopener">日志的作用</a> 。它特别强调将日志视为事件流， 并将其发送至取决于应用环境配置的标准输出中。</p><p>至少有以下三种配置日志方式：</p><ul><li>使用 INI 格式文件：<ul><li><strong>优点</strong>：使用 <a href="http://docs.python.org/library/logging.config.html#logging.config.listen" target="_blank" rel="noopener"><code>logging.config.listen()</code></a> 函数监听 socket，可在运行过程中更新配置</li><li><strong>缺点</strong>：相比代码里控制，可控性要弱（ <em>例如</em> 子类化定制的 <code>filters</code> 或 <code>loggers</code>）。</li></ul></li><li>使用字典或 JSON 格式文件：<ul><li><strong>优点</strong>：除了可在运行时动态更新，在 Python 2.6 之后，还可通过 <a href="http://docs.python.org/library/json.html#module-json" target="_blank" rel="noopener"><code>json</code></a> 模块从其它文件中导入配置。</li><li><strong>缺点</strong>：相比代码里控制，可控性要弱</li></ul></li><li>使用代码控制：<ul><li><strong>优点</strong>：相比配置来讲，有绝对的控制。</li><li><strong>缺点</strong>：需要对源码进行修改。</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">Python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://docs.python.org/library/logging.html#module-logging&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; 模块自 2.3 版以来一
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Hitchhiker&#39;s Guide to Python-代码测试</title>
    <link href="https://yo42.github.io/2018/09/15/Hitchhiker%E2%80%99s-Guide-to-Python-%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/"/>
    <id>https://yo42.github.io/2018/09/15/Hitchhiker’s-Guide-to-Python-代码测试/</id>
    <published>2018-09-15T04:39:30.430Z</published>
    <updated>2018-09-15T09:42:56.838Z</updated>
    
    <content type="html"><![CDATA[<p>测试你的代码是非常重要的。</p><p>习惯于同时写测试用例和运行代码，现在被视为一个好的习惯。如果使用得当，这种方式将帮助你更加明确自己代码的功能，以及拥有更加可解耦的结构。</p><p>你应对自己编写的函数和类进行测试。这样你就能够更加确定自己所做的工作不会破坏项目的其他部分，你就能够随心所欲地改进既有的代码了。</p><p>如果你在项目中包含了初步测试用例，其他程序猿更敬佩你，更愿意work with you together ，他们将能够更得心应手地尝试使用你编写的代码，也更愿意与你合作开发项目。</p><p>测试的通用规则：</p><ul><li>测试单元应该集中于最小部分功能，并且证明它是正确的。</li><li>每个测试单元必须完全独立。他们都能够单独运行，也可以在测试套件中运行，而不用考虑被调用的顺序。 要想实现这个规则，测试单元应该加载最新的数据集，之后再做一些清理。 这通常用方法 <code>setUp()</code> 和 <code>tearDown()</code> 处理。</li><li>尽量使测试单元快速运行。如果一个单独的测试单元需要较长的时间去运行，开发进度将会延迟， 测试单元将不能如期常态性运行。有时候，因为测试单元需要复杂的数据结构， 并且当它运行时每次都要加载，所以其运行时间较长。请把运行速度较慢的测试单元放在单独的测试组件中， 并且按照需要运行其它测试单元。</li><li>学习使用工具，学习如何运行一个单独的测试或者测试用例。当为某个模块开发了一个新功能时， 我们需要经常运行这个功能的测试用例，理想情况下需配置工具让其在保存代码文件时自动触发运行测试。</li><li>在编码工作开始前后，请运行完整的测试组件。只有这样，你才会坚信现有的代码不会出现错误。</li><li>使用钩子（hook）是一个非常推荐的做法，一旦把代码提交到共享的代码仓库时（译者注：很多时候你会选择 Github）， 即可触发钩子运行所有的测试。</li><li>如果你在开发期间不得不打断自己的工作，请先为你下一步要开发的功能写一个未通过的测试，这样当你回到工作时，将可以很快地回到原先被打断的地方，并且步入正轨。</li><li><p>当你调试代码的时候，首先需要写一个精确定位 Bug 的测试单元。尽管这样做很难， 但是捕捉 Bug 的单元测试在项目中很重要。</p></li><li><p>测试函数需使用长且描述性的名字。测试的编码规范与代码编码规范有点不一样，代码更倾向于使用短的名字， 而测试函数不会直接被调用。在运行代码中，<code>square()</code> 或者甚至 <code>sqr()</code> 这样的命名都是可以的， 但是在测试代码中，您应该这样取名 <code>test_square_of_number_2()</code>，<code>test_square_negative_number()</code>。 当测试单元失败时，函数名会被直接显示出来，此时函数名称的描述性将变得重要。</p></li><li>当业务逻辑不得不变更时，如果代码中有一套不错的测试单元， 维护者将很大一部分依靠测试组件解决问题，或者确保改动不会影响到其他代码。此时测试代码会经常被阅读， 阅读的频率甚至多于业务逻辑代码。目的不明确的测试单元在这种情况下没有多少用处，因此请尽量避免书写目的不明确的测试代码。</li><li>测试代码的另外一个用处是作为新开发人员的入门介绍。当有人需要基于现有的代码库工作时， 运行并且阅读相关的测试代码是最好的做法。他们会或者应该发现业务代码的重点、难点、以及边界场景。 如果他们必须添加一些功能，第一步应该是添加一个测试，以确保新功能开发能保持测试的传统。</li></ul><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="Unittest-单元测试"><a href="#Unittest-单元测试" class="headerlink" title="Unittest 单元测试"></a>Unittest 单元测试</h3><p><a href="http://docs.python.org/library/unittest.html#module-unittest" target="_blank" rel="noopener"><code>unittest</code></a> 是 Python 标准库中自带的测试模块。任何一个使用过 Junit，nUnit, 或 CppUnit 工具的人对它的 API 都会比较熟悉。</p><p>我们可以通过继承 <a href="http://docs.python.org/library/unittest.html#unittest.TestCase" target="_blank" rel="noopener"><code>unittest.TestCase</code></a> 来创建测试用例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import unittest</span><br><span class="line"></span><br><span class="line">def fun(x):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">class MyTest(unittest.TestCase):</span><br><span class="line">    def test(<span class="keyword">self</span>):</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(fun(<span class="number">3</span>), <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>Python 2.7 以后，<code>unittest</code> 已支持测试自动发现机制。</p><blockquote><p><a href="http://docs.python.org/library/unittest.html" target="_blank" rel="noopener">关于 unittest 的标准库文档</a></p></blockquote><h3 id="Doctest"><a href="#Doctest" class="headerlink" title="Doctest"></a>Doctest</h3><p><a href="http://docs.python.org/library/doctest.html#module-doctest" target="_blank" rel="noopener"><code>doctest</code></a> 模块会在代码的 Docstrings 中寻找类似于 Python 交互会话的字串（译者注：<code>&gt;&gt;&gt;</code>），并会将其执行，以证实工作正常。</p><p>Doctest 模块的使用场景与单元测试有所不同：它们通常不是很详细，并且不会用特别的用例或者处理复杂的 Bug。Doctest 主要是作为模块和其部件主要用例的表述性文档，因此，Doctest 需在每一次完整测试 套件运行时自动运行。</p><p>函数中的一个简单 Doctest 例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def square(x):</span><br><span class="line">    <span class="string">""</span><span class="string">"Return the square of x.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square(2)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square(-2)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    import doctest</span><br><span class="line">    doctest.testmod()</span><br></pre></td></tr></table></figure><p>当使用 <code>python module.py</code> 这样的命令行运行这个模块时，Doctest 将会运行，并会在结果与文档字符串的描述不一致时报错。</p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><h3 id="py-test"><a href="#py-test" class="headerlink" title="py.test"></a>py.test</h3><p>相比于 Python 标准库里的 unittest 模块，py.test 也是一个没有模板（no-boilerplate）的备选方案：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pytest</span><br></pre></td></tr></table></figure><p>尽管这个测试工具功能完备，并且可扩展，它仍然能保持语法很简单。创建一个测试组件和写一个带有诸多函数的模块一样容易：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># content of test_sample.py</span></span><br><span class="line">def func(x):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">def test_answer():</span><br><span class="line">    assert func(<span class="number">3</span>) == <span class="number">5</span></span><br></pre></td></tr></table></figure><p>运行命令 py.test ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ py.test</span><br><span class="line">=========================== test session starts ============================</span><br><span class="line">platform darwin -- Python <span class="number">2.7</span><span class="number">.1</span> -- pytest<span class="number">-2.2</span><span class="number">.1</span></span><br><span class="line">collecting ... collected <span class="number">1</span> items</span><br><span class="line"></span><br><span class="line">test_sample.py F</span><br><span class="line"></span><br><span class="line">================================= FAILURES =================================</span><br><span class="line">_______________________________ test_answer ________________________________</span><br><span class="line"></span><br><span class="line">    def test_answer():</span><br><span class="line">&gt;       assert func(<span class="number">3</span>) == <span class="number">5</span></span><br><span class="line">E       assert <span class="number">4</span> == <span class="number">5</span></span><br><span class="line">E        +  where <span class="number">4</span> = func(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">test_sample.py:<span class="number">5</span>: AssertionError</span><br><span class="line">========================= <span class="number">1</span> failed in <span class="number">0.02</span> seconds =========================</span><br></pre></td></tr></table></figure><p>可以看出，这要比 unittest 模块中实现相同功能所要求的工作量少得多。</p><blockquote><p><a href="https://docs.pytest.org/en/latest/" target="_blank" rel="noopener">py.test</a></p></blockquote><h3 id="Hypothesis"><a href="#Hypothesis" class="headerlink" title="Hypothesis"></a>Hypothesis</h3><p>Hypothesis 让你编写被示例源码参数化的测试库。它会生成简单易懂的例子，使你的测试失败， 让你花更少的力气找到更多的错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install hypothesis</span><br></pre></td></tr></table></figure><p>例如，测试浮动列表要尝试很多例子，但是会报告每个错误的最小例子（区分异常类型和位置）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@given(lists(floats(allow_nan=<span class="keyword">False</span>, allow_infinity=<span class="keyword">False</span>), min_size=<span class="number">1</span>))</span><br><span class="line">def test_mean(xs):</span><br><span class="line">    mean = sum(xs) / len(xs)</span><br><span class="line">    assert min(xs) &lt;= mean(xs) &lt;= max(xs)</span><br><span class="line">Falsifying example: test_mean(</span><br><span class="line">    xs=[<span class="number">1.7976321109618856e+308</span>, <span class="number">6.102390043022755e+303</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Hypothesis 是实用且强大的工具，很多时候它都会找出被其他测试工具所遗漏的错误。 它能与 py.test 很好地集成，无论是简单亦或者是高级场景中，你都会觉得它很趁手。</p><blockquote><p><a href="https://hypothesis.readthedocs.io/en/latest/" target="_blank" rel="noopener">hypothesis</a></p></blockquote><h3 id="tox"><a href="#tox" class="headerlink" title="tox"></a>tox</h3><p>tox 是一个自动化测试环境管理，并能针对多版本解释器配置进行测试的工具。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install tox</span><br></pre></td></tr></table></figure><p>tox 允许你通过简单的配置文件，来设置复杂的多参数测试矩阵。</p><blockquote><p><a href="https://tox.readthedocs.io/en/latest/" target="_blank" rel="noopener">tox</a></p></blockquote><h3 id="Unittest2"><a href="#Unittest2" class="headerlink" title="Unittest2"></a>Unittest2</h3><p>Unittest2 是 Python 2.7 中 unittest 模块的向后兼容补丁，对比 Python 2.7 之前的版本提供了更好的 API 和断言语法。</p><p>如果使用 Python 2.6 版本或者以下，你可以使用 pip 安装 unittest2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install unittest2</span><br></pre></td></tr></table></figure><p>推荐你使用 unittest 之名导入模块，目的是更容易地把代码移植到新的版本中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import unittest2 <span class="keyword">as</span> unittest</span><br><span class="line"></span><br><span class="line">class MyTest(unittest.TestCase):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>如果切换到新的 Python 版本，并且不再需要 unittest2 模块，你只需要在测试模块中改变 import 内容，而不必改变其它代码。</p><blockquote><p><a href="http://pypi.python.org/pypi/unittest2" target="_blank" rel="noopener">unittest2</a></p></blockquote><h3 id="mock"><a href="#mock" class="headerlink" title="mock"></a>mock</h3><p><a href="http://docs.python.org/library/unittest.mock.html#module-unittest.mock" target="_blank" rel="noopener"><code>unittest.mock</code></a> 是 Python 中用于测试的一个库。 Python 3.3 版本中，将存在于自带的标准库中 —— <a href="https://docs.python.org/dev/library/unittest.mock" target="_blank" rel="noopener">标准库中的 unittest.mock</a>。</p><p>对于 Python 相对早的版本，如下操作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install mock</span><br></pre></td></tr></table></figure><p>在测试环境下，使用 mock 对象能够替换部分系统，并且对它们的使用进行断言。</p><p>例如，你可以对一个方法打猴子补丁：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from mock import MagicMock</span><br><span class="line">thing = ProductionClass()</span><br><span class="line">thing.method = MagicMock(return_value=<span class="number">3</span>)</span><br><span class="line">thing.method(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, key=<span class="string">'value'</span>)</span><br><span class="line"></span><br><span class="line">thing.method.assert_called_with(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, key=<span class="string">'value'</span>)</span><br></pre></td></tr></table></figure><p>在测试环境下，你可以使用 <code>patch</code> 修饰器来 mock 某个模块中的类或对象。在下面这个例子中，一直返回相同结果的外部查询系统使用 mock 替换（但仅用在测试期间）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def mock_search(<span class="keyword">self</span>):</span><br><span class="line">    class MockSearchQuerySet(SearchQuerySet):</span><br><span class="line">        def __iter__(<span class="keyword">self</span>):</span><br><span class="line">            <span class="keyword">return</span> iter([<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>])</span><br><span class="line">    <span class="keyword">return</span> MockSearchQuerySet()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的 SearchForm 指的是 myapp 引入的类,</span></span><br><span class="line"><span class="comment"># 而不是类 SearchForm 本身自己</span></span><br><span class="line">@mock.patch(<span class="string">'myapp.SearchForm.search'</span>, mock_search)</span><br><span class="line">def test_new_watchlist_activities(<span class="keyword">self</span>):</span><br><span class="line">    <span class="comment"># get_search_results 运行一次搜索并对结果进行迭代</span></span><br><span class="line">    <span class="keyword">self</span>.assertEqual(len(myapp.get_search_results(q=<span class="string">"fish"</span>)), <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>Mock 还提供许多其它方法，你可以很轻松地配置和控制它的行为。</p><blockquote><p><a href="http://www.voidspace.org.uk/python/mock/" target="_blank" rel="noopener">Mock 的文档</a></p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">Python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;测试你的代码是非常重要的。&lt;/p&gt;
&lt;p&gt;习惯于同时写测试用例和运行代码，现在被视为一个好的习惯。如果使用得当，这种方式将帮助你更加明确自己代码的功能，以及拥有更加可解耦的结构。&lt;/p&gt;
&lt;p&gt;你应对自己编写的函数和类进行测试。这样你就能够更加确定自己所做的工作不会破坏项目
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Hitchhiker&#39;s Guide to Python-项目文档</title>
    <link href="https://yo42.github.io/2018/09/15/Hitchhiker%E2%80%99s-Guide-to-Python-%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/"/>
    <id>https://yo42.github.io/2018/09/15/Hitchhiker’s-Guide-to-Python-项目文档/</id>
    <published>2018-09-15T04:39:18.634Z</published>
    <updated>2018-09-15T09:43:11.588Z</updated>
    
    <content type="html"><![CDATA[<p>可读性是 Python 开发人员在项目和代码文档中的主要关注点。遵循一些简单的最佳实践可以为您和其他人节省大量时间。</p><h2 id="项目文档"><a href="#项目文档" class="headerlink" title="项目文档"></a>项目文档</h2><p>在根目录下 <code>README</code> 文件应该对用户和项目维护者提供概述信息。它应该是原始文本或非常容易阅读的标记写成，如 <a href="http://docs.python-guide.org/en/latest/writing/documentation/#restructuredtext-ref" target="_blank" rel="noopener">reStructuredText</a> 或 Markdown。 它应该包含几行对项目或库的作用的解释（假设用户不知道项目的任何内容），软件源站点的 URL 和一些基本的信用信息。这个文件应该是代码阅读者的主要入口点。</p><p><code>INSTALL</code> 文件对 Python 来说不是必需的。安装指令通常被简化为一个命令，如 <code>pip install module</code> 或 <code>python setup.py install</code> 并且添加到 <code>README</code> 文件中。</p><p><code>LICENSE</code> 文件应该 <em>始终</em> 存在并且详细说明软件在什么许可证下对公众可用。</p><p><code>TODO</code> 文件或 <code>README</code> 文件中的 <code>TODO</code> 部分应该列出代码的开发计划。</p><p><code>CHANGELOG</code> 文件或在 <code>README</code> 对应的部分应该基于最新版本编写一个代码变更概述。</p><h2 id="其他文档"><a href="#其他文档" class="headerlink" title="其他文档"></a>其他文档</h2><p>根据项目的不同，文档中最好能包含下列部分或所有的内容：</p><ul><li>一份 <strong>简短介绍</strong> ，应该包含几个简化的用例，简要概述该产品能够用来做什么。</li><li>一份 <strong>教程</strong> ，应该展示一些主要的用例以及更多的使用细节。读者能够跟着一步步成功搭建工作原型。</li><li>一份 <strong>API 文档</strong>，通常从代码中产生（参见 <a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/documentation.html#docstring-ref" target="_blank" rel="noopener">docstrings</a>）。它会列出所有的可供公共访问的接口、参数和返回值。</li><li>一份 <strong>贡献文档</strong> 适用于潜在贡献者。这可以包括项目的代码规范和通用设计的策略讲解。</li></ul><h3 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h3><p><a href="http://sphinx.pocoo.org/" target="_blank" rel="noopener">Sphinx</a> 无疑是最流行的 Python 文档工具。<strong>我们推荐在项目中使用 Sphinx。</strong> 它能把 <a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/documentation.html#restructuredtext-ref" target="_blank" rel="noopener">reStructuredText</a> 标记语言转换为流行的输出格式，包括 HTML、LaTeX (可打印 PDF 版本)、手册和纯文本。</p><p><a href="http://readthedocs.org/" target="_blank" rel="noopener">Read The Docs</a> 是一个 <em>超棒的</em> 并且 <em>免费的</em> 文档托管平台，可以托管您的 <a href="http://sphinx.pocoo.org/" target="_blank" rel="noopener">Sphinx</a> 文档。您可以为它配置提交钩子到您的代码库中，这样文档的重新构建即可自动进行。</p><p>运行 <a href="http://sphinx.pocoo.org/" target="_blank" rel="noopener">Sphinx</a> 时首先导入你的代码，它会使用 Python 的内省功能来提取所有函数，方法和类签名，同时提取附带的文档字符串，并将其全部编译成结构良好且易于阅读的文档。</p><blockquote><p>Sphinx 因生成 API 文档而著名，但它也适用于普通的文档。本指南（译者注：原始文档）使用 <a href="http://sphinx.pocoo.org/" target="_blank" rel="noopener">Sphinx</a> 进行构建， 并托管在 <a href="http://readthedocs.org/" target="_blank" rel="noopener">Read The Docs</a> 上。</p></blockquote><h3 id="reStructuredText"><a href="#reStructuredText" class="headerlink" title="reStructuredText"></a>reStructuredText</h3><p>大多数 Python 文档是用 <a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">reStructuredText</a> 编写的。它是一个内建了所有可选扩展的 Markdown 解析器。</p><p><a href="http://sphinx.pocoo.org/rest.html" target="_blank" rel="noopener">reStructuredText Primer</a> 和 <a href="http://docutils.sourceforge.net/docs/user/rst/quickref.html" target="_blank" rel="noopener">reStructuredText Quick Reference</a> 这两个文档应该能帮助你快速熟悉它的语法。</p><h2 id="源码文档建议"><a href="#源码文档建议" class="headerlink" title="源码文档建议"></a>源码文档建议</h2><p>注释能使代码清晰，将其加入到代码中是为了理解代码起来更容易。注释在 Python 中以一个 hash 开始（数字符号）（”#”）。</p><p>在 Python 中我们使用 <em>文档字符串（docstrings）</em> 用来描述模块、类和函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def square_and_rooter(x):</span><br><span class="line">    <span class="string">""</span><span class="string">"Return the square root of self times self."</span><span class="string">""</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>一般来说，我们要遵循 <a href="https://www.python.org/dev/peps/pep-0008#comments" target="_blank" rel="noopener"><strong>PEP 8#comments</strong></a> （” Python 风格指南”）的注释部分。 更多关于 docstrings 的内容可以在 <a href="https://www.python.org/dev/peps/pep-0257#specification" target="_blank" rel="noopener"><strong>PEP 0257#specification</strong></a> （docstrings 约定指南） 上找到。</p><h3 id="注释代码块"><a href="#注释代码块" class="headerlink" title="注释代码块"></a>注释代码块</h3><p><em>请不要使用三引号去注释代码</em>。 这不是好的实践，因为面向行的命令行处理工具， 比如说 <code>grep</code>，将会很难判断注释掉的代码是否是激活的。对每一个注释行，最好使用带有合适缩进的井号。您的编辑器可能很容易做到这一点，并能使用快捷键就切换 注释 / 取消注释。</p><h3 id="Docstrings-的魔法"><a href="#Docstrings-的魔法" class="headerlink" title="Docstrings 的魔法"></a>Docstrings 的魔法</h3><p>一些工具使用 Docstrings 来嵌入不止是文档的行为， 比如说单元测试逻辑等。接下来会给你讲解 Docstrings 的一些奇特的用法，不过话说回来，如果你只是使用 Docstrings 来做函数文档也是完全合理的。</p><p>像 <a href="http://sphinx.pocoo.org/" target="_blank" rel="noopener">Sphinx</a> 这样的工具会将 Docstrings 解析为 reStructuredText，并以 HTML 格式正确呈现。 这使得将示例代码片段嵌入到项目文档成为可能。</p><p>此外， <a href="https://docs.python.org/3/library/doctest.html" target="_blank" rel="noopener">Doctest</a> 能够读取所有内嵌的看起来像 Python 命令行输入（以 <code>&gt;&gt;&gt;</code> 为前缀）的 Docstrings 并对其进行运行，以检查命令输出是否匹配其下行内容。这允许开发人员在源码中嵌入真实的示例和函数的用法。 此外，它还能确保代码运行过测试并且正常工作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def my_function(a, b):</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_function(2, 3)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_function('a', 3)</span></span><br><span class="line"><span class="string">    'aaa'</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br></pre></td></tr></table></figure><h3 id="Docstrings-与块注释的比较"><a href="#Docstrings-与块注释的比较" class="headerlink" title="Docstrings 与块注释的比较"></a>Docstrings 与块注释的比较</h3><p>他们俩是不可互换。对于函数或类，开头的注释区是程序员的注解。而Docstrings 描述了函数或类的 <em>操作性文档</em> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 出于某种原因此函数用来减慢程序执行的</span></span><br><span class="line">def square_and_rooter(x):</span><br><span class="line">    <span class="string">""</span><span class="string">"返回自己乘以自己的平方根。"</span><span class="string">""</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>块注释会在脚本执行时被优化掉，与块注释不同，Docstrings 内置于 Python 语言本身。这意味着你可以使用 Python 强大的内省功能以在运行时获得 Docstrings 。对于几乎每个 Python 对象，我们都可以通过其 <strong>*doc*</strong> 属性或使用内置的 <code>help()</code> 函数来访问 Docstrings。</p><p>块注释通常用于解释一段代码是 <em>做什么</em> ，或是算法的细节。而 Docstrings 更适合于向其他用户（或是写完代码 6 个月以后的你）解释代码中的特定功能是 <em>如何</em> 使用， 或是方法、类和模块的作用。</p><h3 id="编写-Docstrings"><a href="#编写-Docstrings" class="headerlink" title="编写 Docstrings"></a>编写 Docstrings</h3><p>取决于函数、方法或类的复杂度，使用单行的 Docstrings 可能十分合适。 以下通常用于非常明显的情况，例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def add(a, b):</span><br><span class="line">    <span class="string">""</span><span class="string">"两个数字相加，并返回结果。"</span><span class="string">""</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>Docstrings 应该以易于理解的方式来描述函数。另一方面，对于简单的函数和类， 将函数的签名（即 <code>add(a, b) -&gt; result</code> ）嵌入到 Docstrings 中是没有必要的。这是因为使用 Python 的 “inspect” 模块可以很容易地找到这些信息。 此外，这些信息也可以简单地通过阅读源代码来获得。</p><p>在更大或更复杂的项目中，我们建议提供相关函数的更多信息，包括它是做什么的， 所抛的任何异常，返回的内容或参数的相关细节。</p><p>对于更详细的代码文档，用于 Numpy 项目上的 Docstrings 风格会更为流行，通常称为 <a href="http://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html" target="_blank" rel="noopener">Numpy style</a> Docstrings。因为可以占用更多的行，所以它允许开发人员写入更多的信息。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def random_number_generator(arg1, arg2):</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    摘要行。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    扩展功能描述。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    arg1：int</span></span><br><span class="line"><span class="string">        arg1的描述</span></span><br><span class="line"><span class="string">    arg2：str</span></span><br><span class="line"><span class="string">        arg2的描述</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    int</span></span><br><span class="line"><span class="string">        返回值说明</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br></pre></td></tr></table></figure><p>Sphinx 下使用 <a href="https://sphinxcontrib-napoleon.readthedocs.io/" target="_blank" rel="noopener">sphinx.ext.napoleon</a> 插件即可解析这种风格的 Docstrings， 使您可以轻松地将 NumPy 风格文档植入到你的项目中。</p><p>最后，编写 Docstrings 的风格并没那么重要，它们的目的是为任何可能需要阅读或更改代码的人提供文档。 只要它是正确的，可以理解的，切中相关点，那么它就很完美地完成了它的使命。</p><p>要进一步阅读 Docstrings，请随时参见 <a href="https://www.python.org/dev/peps/pep-0257" target="_blank" rel="noopener"><strong>PEP 257</strong></a></p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><p>你可能在其他场景看到过这些，不过没有特殊情况的话，请尽量使用 <a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/documentation.html#sphinx-ref" target="_blank" rel="noopener">Sphinx</a>。</p><p><a href="https://pycco-docs.github.io/pycco/" target="_blank" rel="noopener">Pycco</a></p><p>Pycco是一个 “文学编程风格的文档生成器”，它是 node.js <a href="http://jashkenas.github.com/docco" target="_blank" rel="noopener">Docco</a> 的移植版本。它将代码生成为一个并排的 HTML 代码区块和对应的文档。</p><p><a href="https://github.com/rtomayko/ronn" target="_blank" rel="noopener">Ronn</a></p><p>Ronn 用来构建 Unix 手册。它将人可读的文本文件转换成用于终端显示的 roff 文件, 以及用于 web 的 HTML 文件。</p><p><a href="http://epydoc.sourceforge.net/" target="_blank" rel="noopener">Epydoc</a></p><p>Epydoc 已经停止维护。请使用 <a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/documentation.html#sphinx-ref" target="_blank" rel="noopener">Sphinx</a> 来替代。</p><p><a href="http://www.mkdocs.org/" target="_blank" rel="noopener">MkDocs</a></p><p>MkDocs 是一个快速简单的静态网站生成器，它适合于构建使用 Markdown 编写的项目文档。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">Python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可读性是 Python 开发人员在项目和代码文档中的主要关注点。遵循一些简单的最佳实践可以为您和其他人节省大量时间。&lt;/p&gt;
&lt;h2 id=&quot;项目文档&quot;&gt;&lt;a href=&quot;#项目文档&quot; class=&quot;headerlink&quot; title=&quot;项目文档&quot;&gt;&lt;/a&gt;项目文档&lt;/h2
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Hitchhiker&#39;s Guide to Python-Reading Great Code</title>
    <link href="https://yo42.github.io/2018/09/15/Hitchhiker%E2%80%99s-Guide-to-Python-Reading-Great-Code/"/>
    <id>https://yo42.github.io/2018/09/15/Hitchhiker’s-Guide-to-Python-Reading-Great-Code/</id>
    <published>2018-09-15T04:38:30.150Z</published>
    <updated>2018-09-15T09:43:19.250Z</updated>
    
    <content type="html"><![CDATA[<p>Python 设计背后的核心原则之一就是创建可读的代码。这个设计背后的动机很简单： Python 程序员所做的第一件事就是阅读代码。</p><p>成为一个著名的 Python 程序猿的秘诀之一就是阅读，理解和理解优秀的代码。</p><p>优秀的代码通常遵循 <a href="http://docs.python-guide.org/en/latest/writing/style/#code-style" target="_blank" rel="noopener">Code Style</a> 中概述的指导方针，并想读者表达清晰简洁的意图。</p><p>下面是一些推荐的 Python 项目供读者参阅。这些项目中每一项都是 Python 编码的一个典范。</p><ul><li><a href="https://github.com/gleitz/howdoi" target="_blank" rel="noopener">Howdoi</a> Howdoi 使用 Python 实现的代码搜索工具。</li><li><a href="https://github.com/mitsuhiko/flask" target="_blank" rel="noopener">Flask</a> Flask 是基于 Werkzeug and Jinja2 的 Python 微框架。 它的目的是快速入门并开发实现你头脑中的好主意。</li><li><a href="https://github.com/python-diamond/Diamond" target="_blank" rel="noopener">Diamond</a> Diamond 是使用 python 实现的用于收集监控数据的工具，主要收集 metrics 类型的数据，并将其发布到 Graphite 或其他后台。它能够收集 cpu ， 内存， 网络， i/o ，负载和磁盘 metrics 数据。此外，它还提供 API 用以实现自定义收集器从任意来源中收集指标数据。</li><li><a href="https://github.com/mitsuhiko/werkzeug" target="_blank" rel="noopener">Werkzeug</a> Werkzeug 最初是 WSGI 应用程序的各种实用工具的简单集合，并已成为最先进的 WSGI 实用程序模块之一。它包括强大的调试器、功能齐全的请求和响应对象、处理实体标记的 HTTP 实用程序、缓存控制头、HTTP 日期、cookie 处理、文件上传、强大的 URL 路由系统和一群社区贡献的插件模块。</li><li><a href="https://github.com/kennethreitz/requests" target="_blank" rel="noopener">Requests</a> Requests 是一个用 Python 实现的 Apache2 授权的 HTTP 库供大家使用。</li><li><a href="https://github.com/kennethreitz/tablib" target="_blank" rel="noopener">Tablib</a> Tablib 是用 Python 实现的无格式的表格数据集库。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">Python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python 设计背后的核心原则之一就是创建可读的代码。这个设计背后的动机很简单： Python 程序员所做的第一件事就是阅读代码。&lt;/p&gt;
&lt;p&gt;成为一个著名的 Python 程序猿的秘诀之一就是阅读，理解和理解优秀的代码。&lt;/p&gt;
&lt;p&gt;优秀的代码通常遵循 &lt;a hre
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Hitchhiker&#39;s Guide to Python-Code Style</title>
    <link href="https://yo42.github.io/2018/09/15/Hitchhiker%E2%80%99s-Guide-to-Python-Code-Style/"/>
    <id>https://yo42.github.io/2018/09/15/Hitchhiker’s-Guide-to-Python-Code-Style/</id>
    <published>2018-09-15T04:38:05.984Z</published>
    <updated>2018-09-15T09:43:15.538Z</updated>
    
    <content type="html"><![CDATA[<p>如果有人问起 Python 程序员他们最喜欢 Python 哪一点，他们一定会提到 Python 的高可读性。确实，对于 Python 来说，其高可读性一直是 Python 这门语言设计的核心。一个不争的事实是，相对于写代码而言，读代码才是更加平常的事情。</p><p>Python 代码有高可读性的一个原因就是其有着相对而言更加完善的编码风格准则和 「Python化」习语。</p><p>当 Python 老手（Pythonista）认为一段代码不「Python化」，他们通常的意思是这段代码没有遵循一般准则，同时亦没有以最佳的（最具可读性的）方式表达出代码的意图。</p><p>在一些极端的情况下，没有公认最佳的方式来表达 Python 代码的意图，不过这种极端情况非常罕见。</p><h2 id="一般概念"><a href="#一般概念" class="headerlink" title="一般概念"></a>一般概念</h2><h3 id="明确代码意义"><a href="#明确代码意义" class="headerlink" title="明确代码意义"></a>明确代码意义</h3><p>尽管 Python 可以写出从各种意义上来说都像是黑魔法的代码，但最简单直白的表达才是正道。</p><p><strong>不好</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def make_complex(*args):</span><br><span class="line">    x, y = args</span><br><span class="line">    <span class="keyword">return</span> dict(**locals())</span><br></pre></td></tr></table></figure><p><strong>好</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def make_complex(x, y):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y&#125;</span><br></pre></td></tr></table></figure><p>在上述好的代码中，x 和 y 清晰明了的从参数中获取值，并清晰明了的返回了一个字典。当开发者看到这个函数后就可以明了这个函数的用途，而不好的代码则不行。</p><h3 id="一行一个声明语句"><a href="#一行一个声明语句" class="headerlink" title="一行一个声明语句"></a>一行一个声明语句</h3><p>虽然在 Python 中我们推崇使用形如列表生成式这种简洁明了的复合语句，但是除此以外，我们应该尽量避免将两句独立分割的代码写在同一行。</p><p><strong>不好的风格</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'one'</span>; <span class="keyword">print</span> <span class="string">'two'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">1</span>: <span class="keyword">print</span> <span class="string">'one'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> &lt;complex comparison&gt; <span class="keyword">and</span> &lt;other complex comparison&gt;:</span><br><span class="line">    <span class="comment"># do something</span></span><br></pre></td></tr></table></figure><p><strong>好的风格</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'one'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'two'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'one'</span></span><br><span class="line"></span><br><span class="line">cond1 = &lt;complex comparison&gt;</span><br><span class="line">cond2 = &lt;other complex comparison&gt;</span><br><span class="line"><span class="keyword">if</span> cond1 <span class="keyword">and</span> cond2:</span><br><span class="line">    <span class="comment"># do something</span></span><br></pre></td></tr></table></figure><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>函数的参数可以使用四种不同的方式传递给函数。</p><ol><li><strong>必选参数</strong> 是没有默认值的必填的参数。 必选参数是最简单的参数构成，用于参数较少的函数的构成，是该函数意义的一部分，使用他们的顺序是按照定义自然排序的。举个例子，对于 <code>send(message, recipient)</code> 和  <code>point(x, y)</code> 这两个函数，使用函数的人需要知道这个函数需要两个参数，并且记住两个参数的顺序。</li></ol><p>在调用函数的时候，我们也可以使用参数的名称调用。使用参数的名称的方式可以调换参数的顺序，就像 <code>send(recipient=&#39;World&#39;,message=&#39;Hello&#39;)</code> 和 <code>point(y=2, x=1)</code> 这样。但这样的做法会降低代码的可读性，并且使代码冗长，因此更建议使用 <code>send(&#39;Hello&#39;, &#39;World&#39;)</code> 和<code>point(1,2)</code> 这样的方式调用。</p><ol><li><strong>关键字参数</strong> 是非强制的，且有默认值。它们经常被用在传递给函数的可选参数中。 当一个函数有超过两个或三个位置参数时，函数签名会变得难以记忆，使用带有默认参数的关键字参数有时候会给你带来便利。比如，一个更完整的 <code>send</code> 函数可以被定义为<code>send(message, to, cc=None, bcc=None)</code>。这里的 <code>cc</code> 和 <code>bcc</code> 是可选的， 当没有传递给它们其他值的时候，它们的值就是 None。</li></ol><p>Python 中有多种方式调用带关键字参数的函数。比如说，我们可以按照定义时的参数顺序而无需明确的命名参数来调用函数，就像 <code>send(&#39;Hello&#39;, &#39;World&#39;, &#39;Cthulhu&#39;, &#39;God&#39;)</code> 是将密件发送给上帝。我们也可以使用命名参数而无需遵循参数顺序来调用函数，就像<code>send(&#39;Hello again&#39;, &#39;World&#39;, bcc=&#39;God&#39;, cc=&#39;Cthulhu&#39;)</code> 。没有特殊情况的话，这两种方式都需要尽力避免，最优的调用方式是与定义方式一致：<code>send(&#39;Hello&#39;, &#39;World&#39;, cc=&#39;Cthulhu&#39;,bcc=&#39;God&#39;)</code> 。</p><p>作为附注，请遵循 <a href="http://en.wikipedia.org/wiki/You_ain&#39;t_gonna_need_it" target="_blank" rel="noopener">YAGNI</a> 原则。 通常，移除一个用作『以防万一』但从未使用的可选参数（以及它在函数中的逻辑），比添加一个所需的新的可选参数和它的逻辑要来的困难。</p><ol><li><strong>任意参数列表</strong> 是第三种给函数传参的方式。如果函数的参数数量是动态的，该函数可以被定义成 <code>*args</code> 的结构。在这个函数体中， <code>args</code> 是一个元组，它包含所有剩余的位置参数。举个例子， 我们可以用任何容器作为参数去调用 <code>send(message, *args)</code> ，比如 <code>send(&#39;Hello&#39;, &#39;God&#39;, &#39;Mom&#39;,&#39;Cthulhu&#39;)</code>。 在此函数体中， <code>args</code> 相当于 <code>(&#39;God&#39;,&#39;Mom&#39;, &#39;Cthulhu&#39;)</code>。</li></ol><p>然而，这种结构有一些缺点，使用时应该特别注意。如果一个函数接受的参数列表具有相同的性质，通常把它定义成一个参数，这个参数是一个列表或者其他任何序列会更清晰。 在这里，如果 <code>send</code> 参数有多个容器（recipients），将之定义成 <code>send(message,recipients)</code> 会更明确，调用它时就使用 <code>send(&#39;Hello&#39;, [&#39;God&#39;, &#39;Mom&#39;, &#39;Cthulhu&#39;])</code>。这样的话， 函数的使用者可以事先将容器列表维护成列表（list）形式，这为传递各种不能被转变成其他序列的序列（包括迭代器）带来了可能。</p><ol><li><strong>任意关键字参数字典</strong> 是最后一种给函数传参的方式。如果函数要求一系列待定的命名参数，我们可以使用 <code>**kwargs</code> 的结构。在函数体中， <code>kwargs</code> 是一个字典，它包含所有传递给函数但没有被其他关键字参数捕捉的命名参数。</li></ol><p>和 <strong>任意参数列表</strong> 中所需注意的一样，相似的原因是：这些强大的技术在非特殊情况下，都要尽量避免使用，因为其缺乏简单和明确的结构来足够表达函数意图。</p><p>编写函数的时候采用何种参数形式，是用位置参数，还是可选关键字参数，是否使用形如任意参数 的高级技术，这些都由程序员自己决定。如果能明智地遵循上述建议，即可轻松写出这样的 Python 函数：</p><ul><li>易读（名字和参数无需解释）</li><li>易改（添加新的关键字参数不会破坏代码的其他部分）</li></ul><h3 id="避免魔法方法"><a href="#避免魔法方法" class="headerlink" title="避免魔法方法"></a>避免魔法方法</h3><p>Python 对骇客来说是一个强有力的工具，它拥有非常丰富的钩子（hook）和工具，允许你施展几乎任何形式的技巧。比如说，它能够做以下：</p><ul><li>改变对象创建和实例化的方式；</li><li>改变 Python 解释器导入模块的方式；</li><li>甚至可能（如果需要的话也是被推荐的）在 Python 中嵌入 C 程序。</li></ul><p>尽管如此，所有的这些选择都有许多缺点。使用最直接的方式来达成目标通常是最好的方法。它们最主要的缺点是可读性不高。许多代码分析工具，比如说 pylint 或者 pyflakes，将无法解析这种『魔法』代码。</p><p>我们认为 Python 开发者应该知道这些近乎无限的可能性，因为它为我们灌输了没有不可能完成的任务的信心。然而，知道何时 <strong>不能</strong> 使用它们也是非常重要的。</p><p>就像一位功夫大师，一个 Pythonista 知道如何用一个手指杀死对方，但从不会那么去做。</p><h3 id="我们都是负责任的用户"><a href="#我们都是负责任的用户" class="headerlink" title="我们都是负责任的用户"></a>我们都是负责任的用户</h3><p>如前所述，Python 允许很多技巧，其中一些具有潜在的危险。一个好的例子是：任何客户端代码能够重写一个对象的属性和方法（Python 中没有 <code>private</code> 关键字）。这种哲学是在说：『我们都是负责任的用户』，它和高度防御性的语言（如 Java，拥有很多机制来预防错误操作）有着非常大的不同。</p><p>这并不意味着，比如说，Python 中没有属性是私有的，也不意味着没有合适的封装方法。 与其依赖在开发者的代码之间树立起的一道道隔墙，Python 社区更愿意依靠一组约定，来表明这些元素不应该被直接访问。</p><p>私有属性的主要约定和实现细节是在所有的 <strong>内部</strong> 变量前加一个下划线。如果客户端代码打破了这条规则并访问了带有下划线的变量，那么因内部代码的改变而出现的任何不当的行为或问题，都是客户端代码的责任。</p><p>鼓励大方地使用此约定：<strong>任何不开放给客户端代码使用的方法或属性，应该有一个下划线前缀</strong>。这将保证更好的职责划分以及更容易对已有代码进行修改。将一个私有属性公开化总是可能的，但是把一个公共属性私有化可能是一个更难的选择。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>当一个函数变得复杂，在函数体中使用多返回值的语句并不少见。然而，为了保持函数的可读性，建议在函数体中避免使用返回多个有意义的值。</p><p>在函数中返回结果主要有两种情况：函数正常运行并返回它的结果，以及错误的情况，要么因为一个错误的输入参数，要么因为其他导致函数无法完成计算或任务的原因。</p><p>如果你在面对第二种情况时不想抛出异常，返回一个值（比如说 None 或 False ）来表明函数无法正确运行，可能是需要的。在这种情况下，越早返回所发现的不正确上下文越好。 这将帮助扁平化函数的结构：我们假定在『因为错误而返回』的语句后的所有代码都能够满足函数主要结果运算。这种类型的多发挥结果，是有必要的。</p><p>然而，当一个函数在其正常运行过程中有多个主要出口点时，它会变得难以调试其返回结果，所以保持单个出口点可能会更好。这也将有助于提取某些代码路径，而且多个出口点很有可能意味着这里需要重构：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def complex_function(a, b, c):</span><br><span class="line">    <span class="keyword">if</span> not a:</span><br><span class="line">        <span class="keyword">return</span> None  <span class="comment"># 抛出一个异常可能会更好</span></span><br><span class="line">    <span class="keyword">if</span> not b:</span><br><span class="line">        <span class="keyword">return</span> None  <span class="comment"># 抛出一个异常可能会更好</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一些复杂的代码试着用 a,b,c 来计算x</span></span><br><span class="line">    <span class="comment"># 如果成功了，抵制住返回 x 的诱惑</span></span><br><span class="line">    <span class="keyword">if</span> not x:</span><br><span class="line">        <span class="comment"># 使用其他的方法来计算出 x</span></span><br><span class="line">    <span class="keyword">return</span> x  <span class="comment"># 返回值 x 只有一个出口点有利于维护代码</span></span><br></pre></td></tr></table></figure><h2 id="习语（Idiom）"><a href="#习语（Idiom）" class="headerlink" title="习语（Idiom）"></a>习语（Idiom）</h2><p>编程习语，说得简单些，就是写代码的 <strong>方式</strong>。编程习语的概念在 <a href="http://c2.com/cgi/wiki?ProgrammingIdiom" target="_blank" rel="noopener">c2</a> 和 <a href="http://stackoverflow.com/questions/302459/what-is-a-programming-idiom" target="_blank" rel="noopener">Stack Overflow</a> 上有详尽的讨论。</p><p>符合习语的 Python 代码通常被称为 <strong>Pythonic</strong>。</p><p>通常只有一种、而且最好只有一种明显的方式去编写代码。对 Python 初学者来说，无意识的情况下很少能写出习语式 Python 代码，所以应该有意识地去获取习语的书写方式。</p><p>如下有一些常见的Python习语：</p><h3 id="解包（Unpacking）"><a href="#解包（Unpacking）" class="headerlink" title="解包（Unpacking）"></a>解包（Unpacking）</h3><p>如果你知道一个列表或者元组的长度，你可以将其解包并为它的元素取名。比如，<code>enumerate()</code> 会对 list 中的每个项提供包含两个元素的元组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, item in enumerate(some_list):</span><br><span class="line">    <span class="comment"># do something with index and item</span></span><br></pre></td></tr></table></figure><p>你也能通过这种方式交换变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><p>嵌套解包也能工作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, (b, c) = <span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>Python 3 提供了扩展解包的新方法在 <a href="https://www.python.org/dev/peps/pep-3132" target="_blank" rel="noopener"><strong>PEP 3132</strong></a> 有介绍：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, *rest = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># a = 1, rest = [2, 3]</span></span><br><span class="line">a, *middle, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># a = 1, middle = [2, 3], c = 4</span></span><br></pre></td></tr></table></figure><h3 id="创建一个被忽略的变量"><a href="#创建一个被忽略的变量" class="headerlink" title="创建一个被忽略的变量"></a>创建一个被忽略的变量</h3><p>如果你需要赋值（比如，在 <a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/style.html#unpacking-ref" target="_blank" rel="noopener">解包（Unpacking）</a> ）但不需要这个变量，请使用 <code>__</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'foobar.txt'</span></span><br><span class="line">basename, __, ext = filename.rpartition(<span class="string">'.'</span>)</span><br></pre></td></tr></table></figure><blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>许多 Python 风格指南建议使用单下划线的 <code>_</code> 而不是这里推荐的双下划线 <code>__</code> 来标记废弃变量。问题是， <code>_</code> 常用在作为 <a href="http://docs.python.org/library/gettext.html#gettext.gettext" target="_blank" rel="noopener"><code>gettext()</code></a> 函数的别名，也被用在交互式命令行中记录最后一次操作的值。相反，使用双下划线 十分清晰和方便，而且能够消除使用其他这些用例所带来的意外干扰的风险。</p></blockquote><h3 id="创建一个含-N-个对象的列表"><a href="#创建一个含-N-个对象的列表" class="headerlink" title="创建一个含 N 个对象的列表"></a>创建一个含 N 个对象的列表</h3><p>使用 Python 列表中的 <code>*</code> 操作符：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">four_nones = [None] * <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="创建一个含-N-个列表的列表"><a href="#创建一个含-N-个列表的列表" class="headerlink" title="创建一个含 N 个列表的列表"></a>创建一个含 N 个列表的列表</h3><p>因为列表是可变的，所以 <code>*</code> 操作符（如上）将会创建一个包含 N 个且指向 <strong>同一个</strong> 列表的列表，这可能不是你想用的。取而代之，请使用列表解析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">four_lists = [[] <span class="keyword">for</span> __ in xrange(<span class="number">4</span>)]</span><br></pre></td></tr></table></figure><p>注意：在 Python 3 中使用 <code>range()</code> 而不是 <code>xrange()</code>。</p><h3 id="根据列表来创建字符串"><a href="#根据列表来创建字符串" class="headerlink" title="根据列表来创建字符串"></a>根据列表来创建字符串</h3><p>创建字符串的一个常见习语是在空的字符串上使用 <a href="http://docs.python.org/library/stdtypes.html#str.join" target="_blank" rel="noopener"><code>str.join()</code></a> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letters = [<span class="string">'s'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>]</span><br><span class="line">word = <span class="string">''</span>.join(letters)</span><br></pre></td></tr></table></figure><p>这会将 <strong>word</strong> 变量赋值为 <code>spam</code>。这个习语可以用在列表和元组中。</p><h3 id="在集合体（collection）中查找一个项"><a href="#在集合体（collection）中查找一个项" class="headerlink" title="在集合体（collection）中查找一个项"></a>在集合体（collection）中查找一个项</h3><p>有时我们需要在集合体中查找。让我们看看这两个选择，列表和集合（set），用如下代码举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'s'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>])</span><br><span class="line">l = [<span class="string">'s'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>]</span><br><span class="line"></span><br><span class="line">def lookup_set(s):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'s'</span> in s</span><br><span class="line"></span><br><span class="line">def lookup_list(l):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'s'</span> in l</span><br></pre></td></tr></table></figure><p>即使两个函数看起来完全一样，但因为 <strong>查找集合</strong> 是利用了 Python 中的『集合是可哈希』的特性，两者的查询性能是非常不同的。为了判断一个项是否在列表中，Python 将会查看每个项直到它找到匹配的项。这是耗时的任务，尤其是对长列表而言。另一方面，在集合中， 项的哈希值将会告诉 Python 在集合的哪里去查找匹配的项。结果是，即使集合很大，查询的速度也很快。在字典中查询也是同样的原理。想了解更多内容，请见 <a href="http://stackoverflow.com/questions/513882/python-list-vs-dict-for-look-up-table" target="_blank" rel="noopener">StackOverflow</a> 。想了解在每种数据结构上的多种常见操作的花费时间的详细内容， 请见 <a href="https://wiki.python.org/moin/TimeComplexity?" target="_blank" rel="noopener">此页面</a>。</p><p>因为这些性能上的差异，在下列场景中，使用集合或者字典而不是列表，通常会是个好主意：</p><ul><li>集合体中包含大量的项；</li><li>你将在集合体中重复地查找项；</li><li>你没有重复的项。</li></ul><p>对于小的集合体、或者你不会频繁查找的集合体，建立哈希带来的额外时间和内存的开销经常会大过改进搜索速度所节省的时间。</p><h2 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h2><p>又名 <a href="https://www.python.org/dev/peps/pep-0020" target="_blank" rel="noopener"><strong>PEP 20</strong></a>, 是 Python 设计的指导原则。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import this</span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful is better than ugly.</span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">Simple is better than complex.</span><br><span class="line">Complex is better than complicated.</span><br><span class="line">Flat is better than nested.</span><br><span class="line">Sparse is better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren<span class="string">'t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you'</span>re Dutch.</span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line"><span class="keyword">If</span> the implementation is hard to explain, it<span class="string">'s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let'</span>s <span class="keyword">do</span> more of those!</span><br><span class="line"></span><br><span class="line">Python之禅 by Tim Peters</span><br><span class="line"></span><br><span class="line">优美胜于丑陋（Python 以编写优美的代码为目标）</span><br><span class="line">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</span><br><span class="line">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</span><br><span class="line">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class="line">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</span><br><span class="line">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</span><br><span class="line">可读性很重要（优美的代码是具备高可读性的）</span><br><span class="line">即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</span><br><span class="line">不要包容所有错误，除非您确定需要这样做（精准地捕获异常，不写 `except:pass` 风格的代码）</span><br><span class="line">当存在多种可能，不要尝试去猜测</span><br><span class="line">而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</span><br><span class="line">虽然这并不容易，因为您不是 Python 之父（这里的 Dutch 是指 Guido ）</span><br><span class="line">做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</span><br><span class="line">如果您无法向人描述您的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</span><br><span class="line">命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span><br></pre></td></tr></table></figure><p>想要了解一些 Python 优雅风格的例子，请见 <a href="http://artifex.org/~hblanks/talks/2011/pep20_by_example.pdf" target="_blank" rel="noopener">这些来自于 Python 用户的幻灯片</a>。</p><h2 id="PEP-8"><a href="#PEP-8" class="headerlink" title="PEP 8"></a>PEP 8</h2><p><a href="https://www.python.org/dev/peps/pep-0008" target="_blank" rel="noopener"><strong>PEP 8</strong></a> 是 Python 实际意义上的代码风格指南，我们可以在 <a href="http://pep8.org/" target="_blank" rel="noopener">pep8.org</a> 上获得高质量的、可读性更高的 PEP 8 版本。</p><p>强烈推荐阅读这部分。整个 Python 社区都尽力遵循本文档中规定的准则。这其中，一些项目可能受其影响， 而其他项目可能 <a href="http://docs.python-equests.org/en/master/dev/contributing/kenneth-reitz-s-code-style" target="_blank" rel="noopener">修改其建议</a>。</p><p>也就是说，让你的 Python 代码遵循 PEP 8 通常是个好主意，这也有助于在与其他开发人员 一起工作时使代码更加具一致性。命令行程序 pycodestyle <a href="https://github.com/PyCQA/pycodestyle" target="_blank" rel="noopener">https://github.com/PyCQA/pycodestyle</a> （以前叫做<code>pep8</code>），可以检查代码一致性。在你的终端上运行以下命令来安装它：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pycodestyle</span><br></pre></td></tr></table></figure><p>然后，对一个文件或者一系列的文件运行它，来获得任何违规行为的报告：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ pycodestyle optparse.py</span><br><span class="line">optparse.py:<span class="number">69</span>:<span class="number">11</span>: E401 multiple imports on one line</span><br><span class="line">optparse.py:<span class="number">77</span>:<span class="number">1</span>: E302 expected <span class="number">2</span> blank lines, found <span class="number">1</span></span><br><span class="line">optparse.py:<span class="number">88</span>:<span class="number">5</span>: E301 expected <span class="number">1</span> blank line, found <span class="number">0</span></span><br><span class="line">optparse.py:<span class="number">222</span>:<span class="number">34</span>: W602 deprecated form of raising <span class="keyword">exception</span></span><br><span class="line">optparse.py:<span class="number">347</span>:<span class="number">31</span>: E211 whitespace before <span class="string">'('</span></span><br><span class="line">optparse.py:<span class="number">357</span>:<span class="number">17</span>: E201 whitespace after <span class="string">'&#123;'</span></span><br><span class="line">optparse.py:<span class="number">472</span>:<span class="number">29</span>: E221 multiple spaces before operator</span><br><span class="line">optparse.py:<span class="number">544</span>:<span class="number">21</span>: W601 .has_key() is deprecated, <span class="keyword">use</span> '<span class="title">in</span>'</span><br></pre></td></tr></table></figure><p>程序 <a href="https://pypi.python.org/pypi/autopep8/" target="_blank" rel="noopener">autopep8</a> 能自动将代码格式化成 PEP 8 风格。用以下指令安装此程序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install autopep8</span><br></pre></td></tr></table></figure><p>用以下指令格式化一个文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ autopep8 --in-place optparse.py</span><br></pre></td></tr></table></figure><p>不包含 <code>--in-place</code> 标志将会使得程序直接将更改的代码输出到控制台，以供审查。 <code>--aggressive</code> 标志则会执行更多实质性的变化，而且可以多次使用以达到更佳的效果。</p><h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><p>这里有一些你应该遵循的约定，以让你的代码更加易读。</p><h3 id="检查变量是否等于常量"><a href="#检查变量是否等于常量" class="headerlink" title="检查变量是否等于常量"></a>检查变量是否等于常量</h3><p>你不需要明确地比较一个值是 True，或者 None，或者 0 - 你可以仅仅把它放在 <code>if</code> 语句中。 参阅 <a href="http://docs.python.org/library/stdtypes.html#truth-value-testing" target="_blank" rel="noopener">真值测试</a> 来了解什么被认为是 false：</p><p><strong>糟糕</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> attr == <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'True!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> attr == None:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'attr is None!'</span></span><br></pre></td></tr></table></figure><p><strong>优雅</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查值</span></span><br><span class="line"><span class="keyword">if</span> attr:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'attr is truthy!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者做相反的检查</span></span><br><span class="line"><span class="keyword">if</span> not attr:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'attr is falsey!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者，None 等于 false，你可以直接相较它进行匹配</span></span><br><span class="line"><span class="keyword">if</span> attr is None:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'attr is None!'</span></span><br></pre></td></tr></table></figure><h3 id="访问字典元素"><a href="#访问字典元素" class="headerlink" title="访问字典元素"></a>访问字典元素</h3><p>不要使用 <code>dict.has_key()</code>方法。 相反，使用 <code>x in d</code> 语法，或者将默认参数传递给 <a href="http://docs.python.org/library/stdtypes.html#dict.get" target="_blank" rel="noopener"><code>dict.get()</code></a> 方法。</p><p><strong>坏的示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;</span><br><span class="line"><span class="keyword">if</span> d.has_key(<span class="string">'hello'</span>):</span><br><span class="line">    <span class="keyword">print</span> d[<span class="string">'hello'</span>]    <span class="comment"># prints 'world'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'default_value'</span></span><br></pre></td></tr></table></figure><p><strong>推荐的示例</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> d.get(<span class="string">'hello'</span>, <span class="string">'default_value'</span>) <span class="comment"># prints 'world'</span></span><br><span class="line"><span class="keyword">print</span> d.get(<span class="string">'thingy'</span>, <span class="string">'default_value'</span>) <span class="comment"># prints 'default_value'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者:</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'hello'</span> in d:</span><br><span class="line">    <span class="keyword">print</span> d[<span class="string">'hello'</span>]</span><br></pre></td></tr></table></figure><h3 id="操作列表的简便方法"><a href="#操作列表的简便方法" class="headerlink" title="操作列表的简便方法"></a>操作列表的简便方法</h3><p><a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" target="_blank" rel="noopener">列表推导式</a> 提供了一个强大并且简洁的方法来对列表价进行操作。除此之外，<a href="http://docs.python.org/library/functions.html#map" target="_blank" rel="noopener"><code>map()</code></a> 和 <a href="http://docs.python.org/library/functions.html#filter" target="_blank" rel="noopener"><code>filter()</code></a>  函数在列表的操作上也是非常简洁的。</p><p><strong>坏</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filter elements greater than 4</span></span><br><span class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i in a:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">4</span>:</span><br><span class="line">        b.append(i)</span><br></pre></td></tr></table></figure><p><strong>好</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = [i <span class="keyword">for</span> i in a <span class="keyword">if</span> i &gt; <span class="number">4</span>]</span><br><span class="line"><span class="comment"># Or:</span></span><br><span class="line">b = filter(lambda x: x &gt; <span class="number">4</span>, a)</span><br></pre></td></tr></table></figure><p><strong>坏</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add three to all list members.</span></span><br><span class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i in range(len(a)):</span><br><span class="line">    a[i] += <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>好</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">a = [i + <span class="number">3</span> <span class="keyword">for</span> i in a]</span><br><span class="line"><span class="comment"># Or:</span></span><br><span class="line">a = map(lambda i: i + <span class="number">3</span>, a)</span><br></pre></td></tr></table></figure><p>使用 <a href="http://docs.python.org/library/functions.html#enumerate" target="_blank" rel="noopener"><code>enumerate()</code></a> 来跟踪正在被处理的元素索引。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i, item in enumerate(a):</span><br><span class="line">    <span class="keyword">print</span> i, item</span><br><span class="line"><span class="comment"># prints</span></span><br><span class="line"><span class="comment"># 0 3</span></span><br><span class="line"><span class="comment"># 1 4</span></span><br><span class="line"><span class="comment"># 2 5</span></span><br></pre></td></tr></table></figure><p>比起手动计数，使用<a href="http://docs.python.org/library/functions.html#enumerate" target="_blank" rel="noopener"><code>enumerate()</code></a> 函数有更好的可读性，而且，他更加适合在迭代器中使用。</p><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>使用 <code>with open</code> 语法来读文件，它能够为你自动关闭文件。</p><p><strong>坏</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'file.txt'</span>)</span><br><span class="line">a = f.read()</span><br><span class="line"><span class="keyword">print</span> a</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><strong>好</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(<span class="string">'file.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line in f:</span><br><span class="line">        <span class="keyword">print</span> line</span><br></pre></td></tr></table></figure><p>即使在 <code>with</code> 控制块中出现了异常，它也能确保你关闭了文件，因此，使用 <code>with</code> 语法是更加优雅的。</p><h3 id="行的延续"><a href="#行的延续" class="headerlink" title="行的延续"></a>行的延续</h3><p>当一个代码逻辑行的长度超过可接受的限度时，你需要将之分为多个物理行。如果行的结尾是一个反斜杠，Python 解释器会把这些连续行拼接在一起。这在某些情况下很有帮助， 但我们总是应该避免使用，因为它的脆弱性：如果在行的结尾，在反斜杠后加了空格，这会破坏代码，而且可能有意想不到的结果。</p><p>一个更好的解决方案是在元素周围使用括号。左边以一个未闭合的括号开头，Python 解释器会把行的结尾和下一行连接起来直到遇到闭合的括号。同样的行为适用中括号和大括号。</p><p><strong>糟糕</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_very_big_string = <span class="string">"""For a long time I used to go to bed early. Sometimes,\</span></span><br><span class="line"><span class="string">    when I had put out my candle, my eyes would close so quickly that I had not even\</span></span><br><span class="line"><span class="string">    time to say "I'm going to sleep."""</span><span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from some.deep.module.inside.a.module import a_nice_function, another_nice_function,\</span></span><br><span class="line"><span class="string">    yet_another_nice_function</span></span><br></pre></td></tr></table></figure><p><strong>优雅</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_very_big_string = (</span><br><span class="line">    <span class="string">"For a long time I used to go to bed early. Sometimes, "</span></span><br><span class="line">    <span class="string">"when I had put out my candle, my eyes would close so quickly "</span></span><br><span class="line">    <span class="string">"that I had not even time to say "</span>I<span class="string">'m going to sleep.""</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from some.deep.module.inside.a.module import (</span></span><br><span class="line"><span class="string">    a_nice_function, another_nice_function, yet_another_nice_function)</span></span><br></pre></td></tr></table></figure><p>尽管如此，通常情况下，必须去分割一个长逻辑行意味着你同时想做太多的事，这可能影响可读性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">Python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果有人问起 Python 程序员他们最喜欢 Python 哪一点，他们一定会提到 Python 的高可读性。确实，对于 Python 来说，其高可读性一直是 Python 这门语言设计的核心。一个不争的事实是，相对于写代码而言，读代码才是更加平常的事情。&lt;/p&gt;
&lt;p&gt;P
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Hitchhiker&#39;s Guide to Python-代码结构</title>
    <link href="https://yo42.github.io/2018/09/15/Hitchhiker%E2%80%99s-Guide-to-Python-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/"/>
    <id>https://yo42.github.io/2018/09/15/Hitchhiker’s-Guide-to-Python-代码结构/</id>
    <published>2018-09-15T04:28:12.303Z</published>
    <updated>2018-09-15T09:43:00.539Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们所说的「结构」就是关于如何让项目达到预期的目标。我们需要考虑的是如何更好的利用 Python 的特性创造出干净、有效的代码。实际上，「结构」意味着代码的结构、依赖非常的清晰，像文件系统中的文件和文件夹一样。</p><p>哪些函数应该放在哪个模块中？项目中的数据流是怎样的？哪些函数应该组织在一起或者分离开？从广义上讲，通过回答这些问题，你就可以开始规划你的项目长什么样子。</p><p>在本节中，我们将深入研究 Python 的模块和导入系统，因为它们是项目结构中的核心元素。然后我们将探讨如何构建可扩展易测试的代码结构的各种观点。</p><h2 id="仓库结构"><a href="#仓库结构" class="headerlink" title="仓库结构"></a>仓库结构</h2><h3 id="That-is-important"><a href="#That-is-important" class="headerlink" title="That is important!"></a>That is important!</h3><p>就像代码风格，API 设计和自动化对于健康的开发周期是必不可少的，仓库结构也是项目<a href="http://www.amazon.com/gp/product/1257638017/ref=as_li_ss_tl?ie=UTF8&amp;tag=bookforkind-20&amp;linkCode=as2&amp;camp=1789&amp;creative=39095&amp;creativeASIN=1257638017" target="_blank" rel="noopener">体系结构</a>中的重要组成部分。</p><p>当一个潜在用户或贡献者打开你的仓库页面，他们将看到：</p><ul><li>项目名称</li><li>项目描述</li><li>大堆的文件</li></ul><p>只有当他们在下滑滚动时，才能看到项目里的自述文档。</p><p>如果你的仓库包含了大量的垃圾文件或者混乱嵌套的目录结构，即使有漂亮的自述文档，用户也可能尚未看到就前往查看其他项目了。</p><blockquote><p>为你想要的工作而装扮，而不是你现在做的工作而装扮。</p></blockquote><p>当然，第一印象并不代表全部。你和你的同事可能花费数个小时在这个仓库中，最终对每个细节都非常熟悉。它的布局很重要。</p><h3 id="简单的仓库"><a href="#简单的仓库" class="headerlink" title="简单的仓库"></a>简单的仓库</h3><p><strong>简述</strong>: 这个仓库是  <a href="http://kennethreitz.org/" target="_blank" rel="noopener">Kenneth Reitz</a>  的建议。</p><p>可以在 <a href="https://github.com/kennethreitz/samplemod" target="_blank" rel="noopener">GitHub</a> 上看到。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">README.rst</span><br><span class="line">LICENSE</span><br><span class="line">setup.py</span><br><span class="line">requirements.txt</span><br><span class="line">sample/__init__.py</span><br><span class="line">sample/core.py</span><br><span class="line">sample/helpers.py</span><br><span class="line">docs/conf.py</span><br><span class="line">docs/index.rst</span><br><span class="line">tests/test_basic.py</span><br><span class="line">tests/test_advanced.py</span><br></pre></td></tr></table></figure><p>让我们深入了解一些细节。</p><h3 id="具体模块"><a href="#具体模块" class="headerlink" title="具体模块"></a>具体模块</h3><table><thead><tr><th>位置</th><th><code>./sample/</code> 或 <code>./sample.py</code></th></tr></thead><tbody><tr><td>目的</td><td>具体代码</td></tr></tbody></table><p>模块包是仓库的核心。它不应该被藏起来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sample/</span><br></pre></td></tr></table></figure><p>如果你的模块内只有一个文件，你可以直接把这个文件放在仓库的根目录下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sample.py</span><br></pre></td></tr></table></figure><p>你的模块不应属于一个模糊的 src 目录或 python 的子目录。</p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><table><thead><tr><th>位置</th><th><code>./LICENSE</code></th></tr></thead><tbody><tr><td>目的</td><td>法律相关</td></tr></tbody></table><p>除了源码本身外，这可以说是仓库中最重要的部分。在这个文件中应该包含完整的许可证文本和版权声明。</p><p>如果你不确定项目中应该使用哪种授权，请参考 <a href="http://choosealicense.com/" target="_blank" rel="noopener">choosealicense.com</a> 。</p><p>当然，你也可以发布不包含授权的代码，但这可能会让很多人不去使用你的代码。</p><h3 id="Setup-py"><a href="#Setup-py" class="headerlink" title="Setup.py"></a>Setup.py</h3><table><thead><tr><th>位置</th><th><code>./setup.py</code></th></tr></thead><tbody><tr><td>目的</td><td>包安装和分发管理</td></tr></tbody></table><p>如果你的模块包在仓库的根目录下，这个文件也应该位于根目录。</p><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><table><thead><tr><th>位置</th><th><code>./requirements.txt</code></th></tr></thead><tbody><tr><td>目的</td><td>开发中的依赖</td></tr></tbody></table><p> <a href="https://pip.pypa.io/en/stable/user_guide/#requirements-files" target="_blank" rel="noopener">pip requirements file</a>  应该放置在仓库的根目录下。它应指出项目所需的依赖关系，包括测试、构建和生成文档过程中的。</p><p>如果该项目开发不需要依赖，或者你喜欢通过  <code>setup.py</code> 安装开发环境，这个文件可能不是必须的。</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><table><thead><tr><th>位置</th><th><code>./docs/</code></th></tr></thead><tbody><tr><td>目的</td><td>项目的参考文档</td></tr></tbody></table><p>没有理由把它放在其他地方。</p><h3 id="测试套件"><a href="#测试套件" class="headerlink" title="测试套件"></a>测试套件</h3><p><em>有关编写测试的建议，请参考</em>  <a href="http://docs.python-guide.org/en/latest/writing/tests/" target="_blank" rel="noopener"><em>Testing Your Code</em></a> 。</p><table><thead><tr><th>位置</th><th><code>./test_sample.py</code> 或 <code>./tests</code></th></tr></thead><tbody><tr><td>目的</td><td>软件包集成和单元测试</td></tr></tbody></table><p>开始时，一个小的测试套件经常在一个文件中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./test_sample.py</span><br></pre></td></tr></table></figure><p>一旦测试套件多起来时，可以像这样把各套件放在一个文件夹中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tests/test_basic.py</span><br><span class="line">tests/test_advanced.py</span><br></pre></td></tr></table></figure><p>显然，这些测试套件需要你导入包模块才能运行测试。你可以通过这些方法来做：</p><ul><li>将包安装在 site-packages 中。</li><li>使用一个简单（但是<em>明确</em>）的路径去修正解决它。</li></ul><p>我强烈推荐后者。需要开发者在修改代码后主动运行 <code>setup.py develop</code> 去测试，也需要为每个代码库实例设置独立的运行环境。</p><p>要给单个测试导入上下文，请创建一个 tests/context.py 文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(os.path.join(os.path.dirname(<span class="keyword">__file__</span>), <span class="string">'..'</span>)))</span><br><span class="line"></span><br><span class="line">import sample</span><br></pre></td></tr></table></figure><p>然后，在各个测试模块中导入这个上下文模块：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from .context import sample</span><br></pre></td></tr></table></figure><p>无论安装方式如何，这通常都会像预期那样工作。</p><p>有的人会建议你应该把测试放在你自己的代码模块内，我不同意这个观点。这通常会增加用户的复杂性，而且许多的测试套件往往需要额外的依赖和运行时上下文。</p><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><table><thead><tr><th>位置</th><th><code>./Makefile</code></th></tr></thead><tbody><tr><td>目的</td><td>通用的管理任务。</td></tr></tbody></table><p>如果你看过我的大部分项目或任何 Pocoo 项目，你都会注意到有一个 Makefile 文件。 为什么？ 这些项目不是用 C 语言编写的… 简而言之， make 是一个定义项目通用任务的非常有用的工具。</p><p><strong>一个简单的 Makefile：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">init:</span><br><span class="line">    pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">    py.test tests</span><br><span class="line"></span><br><span class="line">.PHONY: init test</span><br></pre></td></tr></table></figure><p>其他通用的管理脚本（例如 <code>manage.py</code> 或 <code>fabfile.py</code> ）也应放在仓库的根目录。</p><h3 id="关于-Django-应用程序"><a href="#关于-Django-应用程序" class="headerlink" title="关于 Django 应用程序"></a>关于 Django 应用程序</h3><p>自从 Django 1.4发布以来，我注意到了 Django 应用程序的一个新趋势。 由于新的捆绑应用程序模板，许多开发人员构建其仓库的效果很差。</p><p>怎样做的呢？他们总是在一个新的仓库中运行以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin.py startproject samplesite</span><br></pre></td></tr></table></figure><p>这样生成的仓库结构如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">README.rst</span><br><span class="line">samplesite/manage.py</span><br><span class="line">samplesite/samplesite/settings.py</span><br><span class="line">samplesite/samplesite/wsgi.py</span><br><span class="line">samplesite/samplesite/sampleapp/models.py</span><br></pre></td></tr></table></figure><p>不要这样做。</p><p>重复的路径会让你的工具和开发人员感到困惑。不必要的嵌套对任何人都没有帮助（除非他们怀念单一的 SVN 仓库）。</p><p>让我们正确的做到这一点：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin.py startproject samplesite .</span><br></pre></td></tr></table></figure><p>注意那个 <code>.</code> 。</p><p>由此生成的仓库结构如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">README.rst</span><br><span class="line">manage.py</span><br><span class="line">samplesite/settings.py</span><br><span class="line">samplesite/wsgi.py</span><br><span class="line">samplesite/sampleapp/models.py</span><br></pre></td></tr></table></figure><h2 id="代码结构是关键"><a href="#代码结构是关键" class="headerlink" title="代码结构是关键"></a>代码结构是关键</h2><p>Python 处理了导入和模块，因此构建 Python 项目相对容易。容易是指没有太多的约束，并且模块导入模型很容易掌握。因此，您所剩的是纯架构方面的任务，比如设计项目的不同点及其交互。</p><p>一个项目的结构简单意味着它也很容易做得不好。结构不佳的项目包括以下一些特征：</p><ul><li>多个杂乱的循环依赖关系：假如 <code>furn.py</code> 中 Table (桌子) 和 Chair （椅子）类需要从 <code>workers.py</code> 导入 Carpenter （木匠） 来回答诸如 <code>table.isdoneby()</code> 的问题；相反地，假如 Carpenter 类需要导入 Table 和 Chair 来回答诸如 <code>carpenter.whatdo()</code> 的问题。这样，就产生了一个循环依赖关系。在这种情况下，你不得不凭借脆弱的技巧，例如在方法或函数内使用导入语句。</li><li>隐藏的耦合关系： Table 实现中的每一次更改会在不相关的测试用例中中断20次测试，因为它破坏了 Carpenter 的代码，需要非常仔细的处理来适应此次更改。这意味着在 Carpenter 中有较多关于 Table 的假设，或在 Table 中有较多关于 Carpenter 的假设。</li><li>对全局状态或上下文的大量使用： Table 和 Carpenter 依赖于可修改的全局变量（可由不同的代理进行修改），而不是显式传递 <code>(高度、宽度、类型、木材)</code> 。你需要检查对这些全局变量的所有访问，以了解为什么长方形桌子变成了正方形，然后发现远程模板代码也在修改此上下文，从而弄乱了桌子的尺寸。</li><li>“意大利面条”式代码: 代码有多页嵌套 if 子句、 for 循环，有大量的复制粘贴程序代码，并没有适当的分块称为“意大利面条”式代码。 Python 的有意义的缩进 (最具争议性的特征之一) 使得维护这种代码变得非常困难。好消息是你可能看不到太多这种情况。</li><li>在 Python 中更有可能看到的是“意大利饺子”式代码：它由数百个类似的小逻辑片段组成，通常是类或对象，没有适当的结构。如果你不记得是否应该使用 FurnitureTable 、 AssetTable ，还是 TableNew 来完成手头上的任务，那么你可能会在“意大利饺子”式代码中漫无目的地游着。</li></ul><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Python 模块是可用的主要抽象层之一，也是最自然的一个。抽象层允许将代码分成包含相关数据和功能的多个部分。</p><p>例如，项目的一层可以处理用户操作的接口，而另一层可以处理数据的底层操作。将这两层分离最自然的方法是：将所有接口功能组合在一个文件中，而在另一个文件中组合数据底层操作。在这种情况下，接口文件需要导入数据底层操作文件，这是通过 <code>import</code> 和 <code>from... import</code> 语句完成的。</p><p>一旦使用 <em>import</em> 语句，就会使用模块。这些模块可以是内置的模块，如 <em>os</em> 和 <em>sys</em>、环境中安装的第三方模块，或项目中的内部模块。</p><p>要与样式指南保持一致，需保持模块名称简短、小写，并确保避免使用特殊符号，如点（.）或问号（？）。所以应该避免像 <code>my.spam.py</code> 这样的文件名！以这种方式命名会影响 Python 查找模块的方式。</p><p>在这个 <em>my.spam.py</em> 情况下， Python 希望在名为 <code>my</code> 的文件夹中找到一个 <code>spam.py</code> 文件，但不应该这样命名。在 Python 文档中有一个应该如何使用点表示法的 <a href="http://docs.python.org/tutorial/modules.html#packages" target="_blank" rel="noopener">例子</a> 。</p><p>如果你希望将模块命名为 <code>my_spam.py</code> ，但其实下划线也不应该在模块名称中经常出现。在模块名称中使用其他字符（空格或连字符）将会阻止导入（- 是减操作符），因此请尽量保持模块名称的简短，这样就不需要将单词分开了。而且，最重要的是，不要使用带下划线的名称空间，应该使用子模块。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以</span></span><br><span class="line">import library.plugin.foo</span><br><span class="line"><span class="comment"># 不行</span></span><br><span class="line">import library.foo_plugin</span><br></pre></td></tr></table></figure><p>除了一些命名限制之外， Python 文件并不是一个特殊的模块，但你需要了解导入机制才能正确使用这个概念并避免一些问题。</p><p>具体地说， <code>import modu</code> 语句会去查找正确的文件，首先会在调用者所在的目录中查找 <code>modu.py</code> 。如果找不到，Python 解释器将递归搜索 “path” 中的 <code>modu.py</code> 。如果未找到，则引发 ImportError 异常。</p><p>一旦找到 <code>modu.py</code> ，Python 解释器将在一个隔离的空间内执行该模块。 <code>modu.py</code> 中的任何顶级语句都将被执行，包括其他导入（如果有的话）。 函数和类的定义存储在模块的字典中。</p><p>然后，模块的变量，函数和类将通过模块的名称空间提供给调用者，这是编程中的一个核心理念，在 Python 中特别有用而且功能强大。</p><p>在许多语言中，预处理器使用 <code>include file</code> 指令来获取文件中的所有代码，并将其复制到调用者的代码中。 这在 Python 中有所不同：导入的代码会被隔离在模块的命名空间内，这意味着你通常不必担心导入代码可能会产生不需要的效果，例如导入模块中有用相同的名称不会覆盖已有的函数。</p><p>通过使用 import 语句的特殊语法可以模拟更标准的行为：<code>from modu import *</code>。 这通常被认为是不好的做法。 <strong>使用</strong> <code>import *</code> <strong>会使代码更难阅读，并使得依赖更少的分块</strong>。</p><p>使用 <code>from modu import func</code> 是一种精确定位您想要导入的函数并将其放入全局命名空间的方法。 它比 <code>import *</code> 危害更小，因为它显式地显示了在全局命名空间中要导入的内容，它比简单的 <code>import modu</code> 的唯一优点是它可以节省一些输入。</p><p><strong>非常槽糕</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">from modu import *</span><br><span class="line">[...]</span><br><span class="line">x = sqrt(<span class="number">4</span>)  <span class="comment">#  sqrt是modu的一部分吗? 内置的? 上面定义了?</span></span><br></pre></td></tr></table></figure><p><strong>好一点的</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from modu import sqrt</span><br><span class="line">[...]</span><br><span class="line">x = sqrt(<span class="number">4</span>)  <span class="comment"># sqrt 可能是modu的一部分, 如果不在之间重新定义的话</span></span><br></pre></td></tr></table></figure><p><strong>最佳</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import modu</span><br><span class="line">[...]</span><br><span class="line">x = modu.sqrt(<span class="number">4</span>)  <span class="comment"># sqrt显然是modu的命名空间的一部分</span></span><br></pre></td></tr></table></figure><p>如 <a href="http://docs.python-guide.org/en/latest/writing/style/#code-style" target="_blank" rel="noopener">Code Style</a> 部分所述, 可读性是 Python 的主要特性之一。可读性意味着避免无用的样板文字和混乱，因此有必要花费一些努力来达到一定程度的简洁性上。但简洁不是简短和晦涩难懂。如 <code>modu.func</code> 的习惯用法，就能够立即判断类或函数来自何处。 除了最简单的单个文件项目之外，这样写可以大大提高了代码的可读性和可理解性。</p><h2 id="包系统"><a href="#包系统" class="headerlink" title="包系统"></a>包系统</h2><p>Python 提供了一个非常简单的封装系统，它只是模块机制到目录的扩展。</p><p>任何一个带有 <code>__init__.py</code> 文件的目录都被认为是 Python 包。包中的不同模块以类似于普通模块的方式导入，但 <code>__init__.py</code> 文件具有特殊的行为，该文件用于收集所有包范围的定义。</p><p>一个在目录 <code>pack/</code> 中的 <code>modu.py</code> 文件通过语句 <code>import pack.modu</code> 来导入。这个语句将在 <code>pack</code> 目录中查找 <code>__init__.py</code> 文件，并执行其所有顶级语句。接着它将查找一个叫 <code>pack/modu.py</code> 的文件并执行其所有顶级语句。在这些操作时候定义在 <code>modu.py</code> 中的任何变量，函数或类都在 pack.modu 命名空间中可用。</p><p>一个常见的问题是添加太多的代码到 <code>__init__.py</code> 文件中。当项目的复杂度增长时，在深层目录结构中可能由子包和子子包。在这种情况下，从子子包中导入单个项时遍历目录树时将需要执行所有 <code>__init__.py</code> 文件。</p><p>如果一个包的模块和子包不需要共享任何代码，那么让 <code>__init__.py</code> 文件保持为空是正常的，甚至是一个好的实践。</p><p>最后，一个简便的语法可以用来导入深度嵌套的包：<code>import very.deep.module as mod</code> 这允许你使用 <em>mod</em> 来代替冗长罗嗦的 <code>very.deep.module</code>。</p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>Python 有时被描述为一种面向对象的编程语言。这可能对大家有些误导，需要加以澄清。</p><p>在 Python 中，所有东西都视为一个对象，并且可以按对象处理。当我们说，函数是“一级”对象，就是将函数视为对象的意思。函数、类、字符串，甚至类型都是 Python 中的对象：像任何对象一样，它们有一个类型，可以作为函数参数传递，并且它们可能有方法和属性。按这种理解， Python 是一种面向对象的语言。</p><p>但是，与 Java 不同， Python 并没有将面向对象的编程作为主要的编程范例来实施。 Python 项目不采用面向对象的方式是完全可行的，即不使用或很少使用类定义、类继承或特定于面向对象编程的任何其他机制。</p><p>此外，从 <a href="http://docs.python-guide.org/en/latest/writing/structure/#modules" target="_blank" rel="noopener">模块</a> 部分可以看出， Python 处理模块和名称空间的方式为开发人员提供了一种自然的方法来确保抽象层的封装和分离，这两者都是使用面向对象的最常见原因。因此，当业务模型不需要面向对象时， Python 程序员有更大的自由来不使用面向对象编程。</p><p>基于一些因素的考虑，我们应避免不必要的面向对象编程。当我们想将一些状态和功能粘合在一起时，定义自定义类是很有用的。在函数编程的讨论中，我们指出，“不必要的面向对象编程”这个问题出自方程的“状态”部分。</p><p>在某些体系结构中，例如典型的 web 应用程序，会生成多个 Python 进程实例，以响应可能同时发生的外部请求。在这种情况下，将一些状态保存到实例对象中，意味着保留一些关于世界的静态信息，这很容易出现并发或竞争问题。有时，在对象的初始化（通常用 <code>__init__()</code> 方法来完成）状态和实际使用对象方法的状态之间，世界信息可能已经改变，保持的状态可能已经过时。例如，一个请求加载了内存中的某一项，并将其标记为由用户读取。而另一个请求同时要求删除该项，这可能发生在第一个进程加载该项之后，然后我们必须将其标记为已删除对象。</p><p>上述以及其他问题引出了这样的想法：使用无状态函数是一种更好的编程范例。</p><p>另一种说法是建议尽可能少的使用具有隐式上下文和副作用的函数和程序。函数的隐式上下文由全局变量和持久层中的数据项（使用方法访问）组成。副作用是指函数对其隐式上下文所做的更改。如果函数会保存或删除全局变量或持久层中的数据，则称它有副作用。</p><p>将有上下文和副作用的函数与逻辑函数（称为纯函数）隔离开来，可以获得以下好处：</p><ul><li>纯函数是确定性的：给定一个固定的输入，输出始终是相同的。</li><li>纯函数需要重构或优化时，更容易更改或替换。</li><li>纯函数更易于使用单元测试进行测试：对于复杂的上下文设置和事后的数据清理的需求更少。</li><li>纯函数更容易操作、修饰和传递。</li></ul><p>总之，针对某些体系结构，由于没有上下文或副作用，纯函数是比类和对象更有效的构建块。</p><p>显然，面向对象编程在许多情况下是有用的，甚至是必要的，例如在开发图形化桌面应用程序或游戏时，被操作的东西（窗口、按钮、化身、车辆）在计算机内存中具有相对较长的寿命。</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>Python 语言提供了一种简单而强大的语法，称为“装饰器”。装饰器是一个函数或类，它包装（或装饰）了函数或方法。装饰器函数或方法将替换原来“未装饰”的函数或方法。因为函数是 Python 中的一级对象，所以可以“手动”完成（参见下述示例），但是使用 @decorator 语法则更清晰，也更受青睐。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def foo():</span><br><span class="line">    <span class="comment"># 一些操作</span></span><br><span class="line"></span><br><span class="line">def decorator(func):</span><br><span class="line">    <span class="comment"># 处理 func</span></span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line">foo = decorator(foo)  <span class="comment"># 手动装饰</span></span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">def bar():</span><br><span class="line">    <span class="comment"># 一些操作</span></span><br><span class="line"><span class="comment"># bar() 被装饰了</span></span><br></pre></td></tr></table></figure><p>此机制对于分离关注点和避免外部非相关逻辑“污染”函数或方法的核心逻辑很有用。最好采用装饰器来处理的一个功能示例是 <a href="https://en.wikipedia.org/wiki/Memoization#Overview" target="_blank" rel="noopener">备注</a> 或缓存：你希望将计算非常耗时/耗空间的函数的结果存储在表中，并直接使用这些结果，而不是在已经计算过以后重新调用并计算。这显然不是函数逻辑的一部分。</p><h2 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h2><p>上下文管理器是一个 Python 对象，为操作提供了额外的上下文信息。 这种额外的信息， 在使用 <code>with</code> 语句初始化上下文，以及完成 <code>with</code> 块中的所有代码时，采用可调用的形式。 这里展示了使用上下文管理器的为人熟知的示例，打开文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(<span class="string">'file.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    contents = f.read()</span><br></pre></td></tr></table></figure><p>任何熟悉这种模式的人都知道以这种形式调用 <code>open</code> 能确保 <code>f</code> 的 <code>close</code> 方法会在某个时候被调用。 这样可以减少开发人员的认知负担，并使代码更容易阅读。</p><p>实现这个功能有两种简单的方法：使用类或使用生成器。 让我们自己实现上面的功能，以使用类方式开始：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class CustomOpen(object):</span><br><span class="line">    def __init__(<span class="keyword">self</span>, filename):</span><br><span class="line">        <span class="keyword">self</span>.file = open(filename)</span><br><span class="line"></span><br><span class="line">    def __enter__(<span class="keyword">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.file</span><br><span class="line"></span><br><span class="line">    def __exit__(<span class="keyword">self</span>, ctx_type, ctx_value, ctx_traceback):</span><br><span class="line">        <span class="keyword">self</span>.file.close()</span><br><span class="line"></span><br><span class="line">with CustomOpen(<span class="string">'file'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    contents = f.read()</span><br></pre></td></tr></table></figure><p>这只是一个常规的 Python 对象，它有两个由 <code>with</code> 语句使用的额外方法。 CustomOpen 首先被实例化，然后调用它的 <code>__enter__</code> 方法，而且 <code>__enter__</code> 的返回值在 <code>as f</code> 语句中被赋给 <code>f</code> 。 当 <code>with</code> 块中的内容执行完后，会调用 <code>__exit__</code> 方法。</p><p>现在我们演示生成器方式，我们将使用了 Python 自带的 <a href="https://docs.python.org/2/library/contextlib.html" target="_blank" rel="noopener">contextlib</a>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from contextlib import contextmanager</span><br><span class="line"></span><br><span class="line">@contextmanager</span><br><span class="line">def custom_open(filename):</span><br><span class="line">    f = open(filename)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> f</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">with custom_open(<span class="string">'file'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    contents = f.read()</span><br></pre></td></tr></table></figure><p>这与上面的类示例道理相通，尽管它更简洁。<code>custom_open</code> 函数一直运行到 <code>yield</code> 语句。 然后它将控制权返回给 <code>with</code> 语句，然后在 <code>as f</code> 部分将 yield 的 <code>f</code> 赋值给 <code>f</code>。 <code>finally</code> 确保不论 <code>with</code> 中是否发生异常， <code>close()</code> 都会被调用。</p><p>由于这两种方法都是一样的，所以我们应该遵循 Python 之禅来决定何时使用哪种。 如果封装的逻辑量很大，则类的方法可能会更好。 而对于处理简单操作的情况，函数方法可能会更好。</p><h2 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h2><p>Python 是动态类型语言，这意味着变量并没有固定的类型。实际上，Python 中的变量和其他语言有很大的不同，特别是静态类型语言。变量并不是计算机内存中被写入的某个值，它们只是指向内存的『标签』或『名称』。因此可能存在这样的情况，变量 <code>a</code> 先代表值 1，然后变成 字符串 <code>a string</code> , 然后又变为指向一个函数。</p><p>Python 的动态类型常被认为是它的缺点，的确这个特性会导致复杂度提升和难以调试的代码。 命名为 <code>a</code> 的变量可能是各种类型，开发人员或维护人员需要在代码中追踪命名，以保证它 没有被设置到毫不相关的对象上。</p><p>这里有些避免发生类似问题的参考方法：</p><ul><li>避免对不同类型的对象使用同一个变量名</li></ul><p><strong>不推荐</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a = <span class="string">'a string'</span></span><br><span class="line">def a():</span><br><span class="line">    pass  <span class="comment"># Do something</span></span><br></pre></td></tr></table></figure><p><strong>推荐</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">1</span></span><br><span class="line">msg = <span class="string">'a string'</span></span><br><span class="line">def func():</span><br><span class="line">    pass  <span class="comment"># Do something</span></span><br></pre></td></tr></table></figure><p>使用简短的函数或方法能降低对不相关对象使用同一个名称的风险。</p><p>即使是相关的不同 类型的对象，也更建议使用不同命名：</p><p><strong>不推荐</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">items = <span class="string">'a b c d'</span>  <span class="comment"># This is a string...</span></span><br><span class="line">items = items.split(<span class="string">' '</span>)  <span class="comment"># ...becoming a list</span></span><br><span class="line">items = set(items)  <span class="comment"># ...and then a set</span></span><br></pre></td></tr></table></figure><p>重复使用命名对效率并没有提升：赋值时无论如何都要创建新的对象。然而随着复杂度的提升，赋值语句被其他代码包括 <code>if</code> 分支和循环分开，使得更难查明指定变量的类型。</p><p>在某些代码的做法中，例如函数编程，推荐的是从不重复对同一个变量命名赋值。Java 内的实现方式是使用 <code>final</code> 关键字。Python 并没有 <code>final</code> 关键字而且这与它的哲学 相悖。尽管如此，避免给同一个变量命名重复赋值仍是是个好的做法，并且有助于掌握 可变与不可变类型的概念。</p><h2 id="可变和不可变类型"><a href="#可变和不可变类型" class="headerlink" title="可变和不可变类型"></a>可变和不可变类型</h2><p>Python提供两种内置或用户定义的类型。</p><p>可变类型允许内容的内部修改。典型的动态类型 包括列表与字典：列表都有可变方法，如 <code>list.append()</code> 和 <code>list.pop()</code>， 并且能就地修改。字典也是一样。</p><p>不可变类型没有修改自身内容的方法。比如，赋值为整数 6 的变量 x 并没有 “自增” 方法，如果需要计算 x + 1，必须创建另一个整数变量并给其命名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">my_list[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line"><span class="keyword">print</span> my_list  <span class="comment"># [4, 2, 3] &lt;- The same list has changed</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">6</span></span><br><span class="line">x = x + <span class="number">1</span>  <span class="comment"># The new x is another object</span></span><br></pre></td></tr></table></figure><p>这种差异导致的一个后果就是，可变类型是不 ‘稳定 ‘的，因而不能作为字典的键使用。</p><p>合理地使用可变类型与不可变类型有助于阐明代码的意图。</p><p>例如与列表相似的不可变类型是元组， 创建方式为 <code>(1, 2)</code>。元组是不可修改的，并能作为字典的键使用。</p><p>Python 中一个可能会让初学者惊讶的特性是：字符串是不可变类型。这意味着当需要组合一个 字符串时，将每一部分放到一个可变列表里，使用字符串时再组合 (<code>join</code>) 起来的做法更高效。 值得注意的是，使用列表推导的构造方式比在循环中调用 <code>append()</code> 来构造列表更好也更快。</p><p>还有一个选项是使用 <code>map</code> 函数，它可以 <code>map</code> 一个函数 <code>str</code> 到可序列化对象上 ( 例如 <code>range(20)</code>)。 结果会产生一个集合，你可以对结果进行 <code>join</code> 在一起，就如其他的例子一样。<code>map</code> 函数在一些场景下速度会更快。</p><p><strong>差</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 0 到 19 创建一个连续的字符串（例如「012..1819」）</span></span><br><span class="line">nums = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> n in range(<span class="number">20</span>):</span><br><span class="line">    nums += str(n)   <span class="comment"># slow and inefficient</span></span><br><span class="line"><span class="keyword">print</span> nums</span><br></pre></td></tr></table></figure><p><strong>好</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 0 到 19 创建一个连续的字符串（例如「012..1819」）</span></span><br><span class="line">nums = []</span><br><span class="line"><span class="keyword">for</span> n in range(<span class="number">20</span>):</span><br><span class="line">    nums.append(str(n))</span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span>.join(nums)  <span class="comment"># much more efficient</span></span><br></pre></td></tr></table></figure><p><strong>较好</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 0 到 19 创建一个连续的字符串（例如「012..1819」）</span></span><br><span class="line">nums = [str(n) <span class="keyword">for</span> n in range(<span class="number">20</span>)]</span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span>.join(nums)</span><br></pre></td></tr></table></figure><p><strong>最好</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 0 到 19 创建一个连续的字符串（例如「012..1819」）</span></span><br><span class="line">nums = map(str, range(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span>.join(nums)</span><br></pre></td></tr></table></figure><p>最后关于字符串的说明的一点是，使用 <code>join()</code> 并不总是最好的选择。比如当用预先确定数量的字符串创建一个新的字符串时，使用加法操作符确实更快，但在上文提到的情况 下或添加到已存在字符串的情况下，使用 <code>join()</code> 是更好的选择。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo = <span class="string">'foo'</span></span><br><span class="line">bar = <span class="string">'bar'</span></span><br><span class="line"></span><br><span class="line">foobar = foo + bar  <span class="comment"># This is good</span></span><br><span class="line">foo += <span class="string">'ooo'</span>  <span class="comment"># This is bad, instead you should do:</span></span><br><span class="line">foo = <span class="string">''</span>.join([foo, <span class="string">'ooo'</span>])</span><br></pre></td></tr></table></figure><blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>除了 <a href="http://docs.python.org/library/stdtypes.html#str.join" target="_blank" rel="noopener"><code>str.join()</code></a> 和 <code>+</code>，您也可以使用 <a href="http://docs.python.org/library/string.html#string-formatting" target="_blank" rel="noopener">%</a> 格式运算符来连接确定数量的字符串，但 <a href="https://www.python.org/dev/peps/pep-3101" target="_blank" rel="noopener">PEP 3101</a> 建议使用 <a href="http://docs.python.org/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 替代 <code>%</code> 操作符。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo = <span class="string">'foo'</span></span><br><span class="line">bar = <span class="string">'bar'</span></span><br><span class="line"></span><br><span class="line">foobar = <span class="string">'%s%s'</span> % (foo, bar) <span class="comment"># It is OK</span></span><br><span class="line">foobar = <span class="string">'&#123;0&#125;&#123;1&#125;'</span>.format(foo, bar) <span class="comment"># It is better</span></span><br><span class="line">foobar = <span class="string">'&#123;foo&#125;&#123;bar&#125;'</span>.format(foo=foo, bar=bar) <span class="comment"># It is best</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/writing/structure/#structure-of-the-repository" target="_blank" rel="noopener">Python漫游指南</a></li><li><a href="http://www.diveintopython.net/toc/index.html" target="_blank" rel="noopener">http://www.diveintopython.net/toc/index.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里我们所说的「结构」就是关于如何让项目达到预期的目标。我们需要考虑的是如何更好的利用 Python 的特性创造出干净、有效的代码。实际上，「结构」意味着代码的结构、依赖非常的清晰，像文件系统中的文件和文件夹一样。&lt;/p&gt;
&lt;p&gt;哪些函数应该放在哪个模块中？项目中的数据流是
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>部署postgresql</title>
    <link href="https://yo42.github.io/2018/09/11/%E9%83%A8%E7%BD%B2postgresql/"/>
    <id>https://yo42.github.io/2018/09/11/部署postgresql/</id>
    <published>2018-09-11T06:55:29.804Z</published>
    <updated>2018-09-15T03:22:00.637Z</updated>
    
    <content type="html"><![CDATA[<h3 id="部署postgres数据库-Docker"><a href="#部署postgres数据库-Docker" class="headerlink" title="部署postgres数据库(Docker)"></a>部署postgres数据库(Docker)</h3><h4 id="使用sameersbn-postgresql"><a href="#使用sameersbn-postgresql" class="headerlink" title="使用sameersbn/postgresql"></a>使用sameersbn/postgresql</h4><h4 id="工作目录-home-postgres"><a href="#工作目录-home-postgres" class="headerlink" title="工作目录:/home/postgres"></a>工作目录:/home/postgres</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">postgresql:</span><br><span class="line">  restart: always</span><br><span class="line">  image: sameersbn/postgresql:9.6-2</span><br><span class="line">  volumes:</span><br><span class="line">    - $PWD:/var/lib/postgresql</span><br><span class="line">    - /var/run/postgresql/:/var/run/postgresql/</span><br><span class="line">    - /home/nucleus-d1/rsyncd/data/:/home/nucleus-d1/rsyncd/data/</span><br><span class="line">    - /home/postgres/zhangxiaohao/:/home/postgres/zhangxiaohao/</span><br><span class="line">  environment:</span><br><span class="line">    - DB_USER=postgres</span><br><span class="line">    - DB_PASS=xxxxx</span><br><span class="line">    - DB_EXTENSION=</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;0.0.0.0:5432:5432&quot;</span><br></pre></td></tr></table></figure><h4 id="9-6-main-pg-hba-conf-权限配置"><a href="#9-6-main-pg-hba-conf-权限配置" class="headerlink" title="9.6/main/pg_hba.conf # 权限配置"></a>9.6/main/pg_hba.conf # 权限配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class="line">local   all             all                                  trust</span><br><span class="line">host    all             all             112.94.5.240/28      md5</span><br><span class="line">host    all             all             192.168.0.0/16       md5</span><br><span class="line">host    all             all             0.0.0.0/0            md5</span><br><span class="line"># IPv4 local connections:</span><br><span class="line">host    all             all             127.0.0.1/32         trust</span><br><span class="line">host    all             all             112.94.5.240/28      md5</span><br><span class="line">host    all             all             192.168.0.0/16       md5</span><br><span class="line">host    all             all             0.0.0.0/0            md5</span><br></pre></td></tr></table></figure><p>开放办公室ssh通道连接pgsql数据库</p><h4 id="centos-安装postgresql-client"><a href="#centos-安装postgresql-client" class="headerlink" title="centos 安装postgresql-client"></a>centos 安装postgresql-client</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install postgresql</span><br></pre></td></tr></table></figure><h4 id="修改默认密码"><a href="#修改默认密码" class="headerlink" title="修改默认密码"></a>修改默认密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user postgres  with password xxx</span><br></pre></td></tr></table></figure><h4 id="配置java应用连接pgsql数据库"><a href="#配置java应用连接pgsql数据库" class="headerlink" title="配置java应用连接pgsql数据库"></a>配置java应用连接pgsql数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- data_center_jdbc_url=jdbc:postgresql://192.168.8.143:5432/d1_statistics?autoReconnect=true&amp;useUnicode=true&amp;rewriteBatchedStatements=true&amp;useSSL=false</span><br><span class="line">- data_center_jdbc_username=postgres</span><br><span class="line">- data_center_jdbc_password=xxx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;部署postgres数据库-Docker&quot;&gt;&lt;a href=&quot;#部署postgres数据库-Docker&quot; class=&quot;headerlink&quot; title=&quot;部署postgres数据库(Docker)&quot;&gt;&lt;/a&gt;部署postgres数据库(Docker)&lt;/h3
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>游戏服内外网穿透</title>
    <link href="https://yo42.github.io/2018/09/11/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%86%85%E5%A4%96%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://yo42.github.io/2018/09/11/游戏服内外网穿透/</id>
    <published>2018-09-11T06:14:35.348Z</published>
    <updated>2018-09-11T06:42:22.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于游戏服内外网穿透"><a href="#关于游戏服内外网穿透" class="headerlink" title="关于游戏服内外网穿透"></a>关于游戏服内外网穿透</h2><p>大致一个场景:公司网络区分了内外网，游戏服务器架设在内网，而手机连接wifi是属于外网，需要满足个需求，外网环境(公司wifi、或个人办工电脑机器)实现正常访问内网游戏服。</p><p>涉及HTTP七层的转发以及TCP四层的转发</p><p>大致原理:部署转发代理服(包含外网网卡)，通过NGinx代理转发请求，内外网DNS劫持，实现。因为Nginx从1.9版本开始支持了TCP四层的转发，故使用Nginx的Stream模块进行实现，此外使用开源的HAproxy也是一个解决方案。</p><p>逻辑图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="内外网穿透.png" alt="内外网穿透" title="">                </div>                <div class="image-caption">内外网穿透</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="内外网穿透2.png" alt="内外网穿透" title="">                </div>                <div class="image-caption">内外网穿透</div>            </figure><p>Nginx配置nginx.conf:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line"></span><br><span class="line"> include /etc/nginx/vhost.d/01-proxy.conf;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TCP转发:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">    listen        7011;</span><br><span class="line">    proxy_pass    192.168.8.137:7011;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">     listen        7012;</span><br><span class="line">     proxy_pass    192.168.8.137:7012;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen        27011;</span><br><span class="line">     proxy_pass    192.168.8.137:27011;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen       27012;</span><br><span class="line">     proxy_pass    192.168.8.137:27012;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">     listen        27013;</span><br><span class="line">     proxy_pass    192.168.8.137:27013;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen        10004;</span><br><span class="line">     proxy_pass    192.168.8.137:10004;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen        10005;</span><br><span class="line">     proxy_pass    192.168.8.137:10005;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen        10006;</span><br><span class="line">     proxy_pass    192.168.8.137:10006;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen        10007;</span><br><span class="line">     proxy_pass    192.168.8.137:10007;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen        10008;</span><br><span class="line">     proxy_pass    192.168.8.137:10008;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen        10009;</span><br><span class="line">     proxy_pass    192.168.8.137:10009;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen         8111;</span><br><span class="line">     proxy_pass    192.168.8.137:8111;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> HTTP转发:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8080;</span><br><span class="line">    listen       8443 ssl;</span><br><span class="line">    server_name  proxydevh7d.demigame.com;</span><br><span class="line"></span><br><span class="line">    proxy_set_header Host             $host;</span><br><span class="line">    proxy_set_header X-Real-IP        $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-For2 $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    server_name_in_redirect off;</span><br><span class="line"></span><br><span class="line">    include /home/nucleus-h7/global/nginx-137/conf/ssl.cfg;</span><br><span class="line">    include /home/nucleus-h7/global/nginx-137/conf/vhost.d/games-out.cfg;</span><br><span class="line"></span><br><span class="line">    error_log  /home/nucleus-h7/global/nginx-137/logs/games_errors_log   notice;</span><br><span class="line">    access_log /home/nucleus-h7/global/nginx-137/logs/games_access_log combined;</span><br><span class="line"></span><br><span class="line">    location ~* ^/ &#123;</span><br><span class="line">         proxy_pass http://192.168.8.137;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    location ~* ^/h7d/download/ &#123;</span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line">    rewrite /h7d/(.*) /$1 break;</span><br><span class="line">        proxy_pass http://192.168.8.137;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS:在内外网网关机器使用的是centos7 dnsmasq</p><p>1、在内网网关机器添加hosts劫持DNS，指向内网服务器的ip地址</p><p>2、在外网网关机器添加hosts劫持DNS，指向外网服务器的ip地址</p><p>3、测试解析</p><p>TODO:</p><p>1、目前H7的代理服h7-proxy-s189只有一个外网接口，所以采用新增虚接口的形式实现多网卡。</p><p>2、缺点:机器一重启虚拟接口就消失，需要手动执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a a 192.168.1.54/22 dev eth1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于游戏服内外网穿透&quot;&gt;&lt;a href=&quot;#关于游戏服内外网穿透&quot; class=&quot;headerlink&quot; title=&quot;关于游戏服内外网穿透&quot;&gt;&lt;/a&gt;关于游戏服内外网穿透&lt;/h2&gt;&lt;p&gt;大致一个场景:公司网络区分了内外网，游戏服务器架设在内网，而手机连接wifi
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Docker 远程API调用启用TLS加密</title>
    <link href="https://yo42.github.io/2018/09/11/Docker-%E8%BF%9C%E7%A8%8BAPI%E8%B0%83%E7%94%A8%E5%90%AF%E7%94%A8TLS%E5%8A%A0%E5%AF%86/"/>
    <id>https://yo42.github.io/2018/09/11/Docker-远程API调用启用TLS加密/</id>
    <published>2018-09-11T05:06:02.930Z</published>
    <updated>2018-09-11T06:14:50.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="普通的HTTP模式（非常不安全）："><a href="#普通的HTTP模式（非常不安全）：" class="headerlink" title="普通的HTTP模式（非常不安全）："></a>普通的HTTP模式（非常不安全）：</h1><h2 id="服务端（CentOS-7，IP地址192-168-9-7）："><a href="#服务端（CentOS-7，IP地址192-168-9-7）：" class="headerlink" title="服务端（CentOS 7，IP地址192.168.9.7）："></a>服务端（CentOS 7，IP地址192.168.9.7）：</h2><pre>sed -i 's/\(OPTIONS="\)/\1-H 0.0.0.0:1699 /' /etc/sysconfig/docker# 也就是加入 -H 0.0.0.0:1699参数</pre>## 重启docker。## 客户端配置：<pre>echo 'export DOCKER_HOST="tcp://192.168.9.7:1699"' >> ~/.bashrcsource ~/.bashrc</pre>## 测试：<pre>docker version</pre>### 生成脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># vim:set et ts=4 sw=4:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到当前目录</span></span><br><span class="line">current_dir=`dirname <span class="variable">$0</span>`</span><br><span class="line">current_dir=`readlink -f <span class="variable">$current_dir</span>`</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;current_dir&#125;</span> &amp;&amp; <span class="built_in">export</span> current_dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># header</span></span><br><span class="line"><span class="built_in">exec</span> 6&gt;&amp;1</span><br><span class="line"><span class="built_in">exec</span>  &gt; <span class="variable">$&#123;0&#125;</span>.stdout</span><br><span class="line"><span class="built_in">exec</span> 2&gt; <span class="variable">$&#123;0&#125;</span>.stderr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">_usage</span></span>() &#123;</span><br><span class="line">    <span class="built_in">exec</span> 1&gt;&amp;6 6&gt;&amp;-</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&#123; "Action": "GenerateDockerTLSKey", "RetCode": 1, "Message": "Usage: ./docker-server-tlskey.sh IP1 IP2 PW" &#125;'</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IP1=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">IP2=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line">PW=<span class="string">"<span class="variable">$3</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check input</span></span><br><span class="line">[ <span class="string">"x<span class="variable">$IP1</span>"</span> == <span class="string">"x"</span> ] || [ <span class="string">"x<span class="variable">$IP2</span>"</span> == <span class="string">"x"</span> ] || [ <span class="string">"x<span class="variable">$PW</span>"</span> == <span class="string">"x"</span> ] &amp;&amp; _usage</span><br><span class="line"></span><br><span class="line"><span class="comment"># check IP1 or IP2</span></span><br><span class="line"><span class="keyword">if</span> ! /sbin/ip a | egrep -q <span class="string">"<span class="variable">$&#123;IP1&#125;</span>|<span class="variable">$&#123;IP2&#125;</span>"</span> ;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exec</span> 1&gt;&amp;6 6&gt;&amp;-</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&#123; "Action": "GenerateDockerTLSKey", "RetCode": 2, "Message": "Error: IP1 or IP2 not fount" &#125;'</span></span><br><span class="line">    <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check ca pem file</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f ./ca.pem ] || [ ! -f ./ca-key.pem ] ;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exec</span> 1&gt;&amp;6 6&gt;&amp;-</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&#123; "Action": "GenerateDockerTLSKey", "RetCode": 3, "Message": "ca.pem or ca-key.pem not fount" &#125;'</span></span><br><span class="line">    <span class="built_in">exit</span> 3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/docker/cert.pem ] ;<span class="keyword">then</span></span><br><span class="line">    ips=$(openssl x509 \</span><br><span class="line">        -certopt no_subject,no_header,no_version,no_serial,no_signame,no_validity,no_subject,no_issuer,no_pubkey,no_sigdump,no_aux \</span><br><span class="line">        -noout -text -<span class="keyword">in</span> /etc/docker/cert.pem )</span><br><span class="line"></span><br><span class="line">    i=0</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">echo</span> <span class="variable">$ips</span> | grep -q <span class="variable">$IP1</span> ;<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">let</span> i+=1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">echo</span> <span class="variable">$ips</span> | grep -q <span class="variable">$IP2</span> ;<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">let</span> i+=1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> -eq 2 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">exec</span> 1&gt;&amp;6 6&gt;&amp;-</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&#123; "Action": "GenerateDockerTLSKey", "RetCode": 0, "Message": "NotChange" &#125;'</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[ -d /etc/docker ] || mkdir -pv /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">openssl genrsa -out server-key.pem 4096 \</span><br><span class="line">    &amp;&amp; openssl req -subj <span class="string">"/CN=<span class="variable">$&#123;IP1&#125;</span>"</span> -sha256 -new -key server-key.pem -out ./server.csr \</span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> subjectAltName = IP:<span class="variable">$&#123;IP1&#125;</span>,IP:<span class="variable">$&#123;IP2&#125;</span>,IP:127.0.0.1 &gt; ./extfile.cnf \</span><br><span class="line">    &amp;&amp; openssl x509 -req -days 3650 -sha256 -passin pass:<span class="variable">$PW</span> \</span><br><span class="line">                    -<span class="keyword">in</span> ./server.csr -CA ./ca.pem -CAkey ./ca-key.pem \</span><br><span class="line">                    -CAcreateserial -extfile ./extfile.cnf \</span><br><span class="line">                    -out /etc/docker/cert.pem \</span><br><span class="line">    &amp;&amp; chmod 0444 /etc/docker/cert.pem       \</span><br><span class="line">    &amp;&amp; rm -f server.csr extfile.cnf ca.srl   \</span><br><span class="line">    &amp;&amp; cp ca.pem         /etc/docker/ca.pem  \</span><br><span class="line">    &amp;&amp; cp server-key.pem /etc/docker/key.pem \</span><br><span class="line">    &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line">retvar=$?</span><br><span class="line"></span><br><span class="line"><span class="comment">## 有时会遇到如下报错:</span></span><br><span class="line"><span class="comment">#Warning! D-Bus connection terminated.</span></span><br><span class="line"><span class="comment">#Failed to wait for response: Connection reset by peer</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># footer</span></span><br><span class="line"><span class="built_in">exec</span> 1&gt;&amp;6 6&gt;&amp;-</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$retvar</span> -eq 0 ] ;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&#123; "Action": "GenerateDockerTLSKey", "RetCode": 0 &#125;'</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&#123; "Action": "GenerateDockerTLSKey", "RetCode": 1, "Message": "openssl error" &#125;'</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>### 手动生成脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># vim:set et ts=2 sw=2:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到当前目录</span></span><br><span class="line">current_dir=`dirname <span class="variable">$0</span>`</span><br><span class="line">current_dir=`readlink -f <span class="variable">$current_dir</span>`</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;current_dir&#125;</span> &amp;&amp; <span class="built_in">export</span> current_dir</span><br><span class="line"></span><br><span class="line">IP1=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">IP2=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">_usage</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> IP1 IP2"</span></span><br><span class="line">  <span class="built_in">exit</span> 127</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># check input</span></span><br><span class="line">[ <span class="string">"x<span class="variable">$IP1</span>"</span> == <span class="string">"x"</span> ] || [ <span class="string">"x<span class="variable">$IP2</span>"</span> == <span class="string">"x"</span> ] &amp;&amp; _usage</span><br><span class="line"></span><br><span class="line"><span class="comment"># check IP1 or IP2</span></span><br><span class="line"><span class="keyword">if</span> ! /sbin/ip a | egrep -q <span class="string">"<span class="variable">$&#123;IP1&#125;</span>|<span class="variable">$&#123;IP2&#125;</span>"</span> ;<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"ERROR: <span class="variable">$&#123;IP1&#125;</span> or <span class="variable">$&#123;IP2&#125;</span> not fount"</span></span><br><span class="line">  <span class="built_in">exit</span> 126</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/docker/cert.pem ] ;<span class="keyword">then</span></span><br><span class="line">  ips=$(openssl x509 \</span><br><span class="line">    -certopt no_subject,no_header,no_version,no_serial,no_signame,no_validity,no_subject,no_issuer,no_pubkey,no_sigdump,no_aux \</span><br><span class="line">    -noout -text -<span class="keyword">in</span> /etc/docker/cert.pem )</span><br><span class="line"></span><br><span class="line">  i=0</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">echo</span> <span class="variable">$ips</span> | grep -q <span class="variable">$IP1</span> ;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">let</span> i+=1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">echo</span> <span class="variable">$ips</span> | grep -q <span class="variable">$IP2</span> ;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">let</span> i+=1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$i</span> -eq 2 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"not change, skip"</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ip change"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">openssl req -subj <span class="string">"/CN=<span class="variable">$&#123;IP1&#125;</span>"</span> -sha256 -new -key server-key.pem -out ./server.csr</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> subjectAltName = IP:<span class="variable">$&#123;IP1&#125;</span>,IP:<span class="variable">$&#123;IP2&#125;</span>,IP:127.0.0.1 &gt; ./extfile.cnf</span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 3650 -sha256 \</span><br><span class="line">  -<span class="keyword">in</span> ./server.csr -CA ./ca.pem -CAkey ./ca-key.pem \</span><br><span class="line">  -CAcreateserial -extfile ./extfile.cnf \</span><br><span class="line">  -out /etc/docker/cert.pem &amp;&amp; <span class="built_in">echo</span> <span class="string">"OK"</span></span><br><span class="line"></span><br><span class="line">chmod 0444 /etc/docker/cert.pem</span><br><span class="line">rm -f server.csr extfile.cnf ca.srl</span><br><span class="line"></span><br><span class="line">cp ca.pem         /etc/docker/ca.pem</span><br><span class="line">cp server-key.pem /etc/docker/key.pem</span><br></pre></td></tr></table></figure># 启用HTTPS模式：## 文档： https://docs.docker.com/engine/articles/https/## CA证书### 私钥（使用xlands做为密码）：<pre>openssl genrsa -aes256 -out ca-key.pem 4096 chmod 0400 ca-key.pem</pre>### 签发申请（10年）：<pre>openssl req -new -x509 -days 3650 \            -subj "/C=CN/ST=GD/L=GZ/O=baoyugame/OU=baoyugame/CN=*.baoyugame.com" \            -sha256 -key ca-key.pem -out ca.pemchmod 0444 ca.pem </pre>## 服务端证书：### 私钥：<pre>openssl genrsa -out server-key.pem 4096chmod 0400 server-key.pem</pre>### 请求证书（设置HOST为不同IP地址就可以给其他主机签发证书）：<pre>HOST=192.168.9.7openssl req -subj "/CN=$HOST" -sha256 -new -key server-key.pem -out server-$HOST.csr</pre>### 需允许服务器的网卡IP地址：<pre>echo subjectAltName = IP:$HOST,IP:127.0.0.1 > extfile.cnf</pre>### 签署 -（不带-extfile extfile.cnf参数）- ：<pre>openssl x509 -req -days 3650 -sha256 \             -in server-$HOST.csr -CA ca.pem -CAkey ca-key.pem \             -CAcreateserial -extfile extfile.cnf \             -out server-cert-$HOST.pem</pre><pre>chmod 0444 server-cert-$HOST.pem</pre><h3 id="删除请求证书："><a href="#删除请求证书：" class="headerlink" title="删除请求证书："></a>删除请求证书：</h3><pre>rm server-$HOST.csr</pre>### 部署证书（复制到各自主机上）：<pre>#echo 'DOCKER_CERT_PATH=/etc/docker' | sudo tee -a /etc/sysconfig/docker#sed -i 's/\(OPTIONS="\)/\1 --tlsverify '  /etc/sysconfig/docker</pre><pre>cat<<eof> /etc/sysconfig/dockerDOCKER_CERT_PATH=/etc/dockerOPTIONS="-g /home/docker --tlsverify --ip=172.17.42.1 --userland-proxy=false -H 0.0.0.0:1699 -H unix:///var/run/docker.sock "EOF</eof></pre><pre>sudo cp ca.pem          /etc/docker/ca.pemsudo cp server-key.pem  /etc/docker/key.pemsudo cp server-cert-$HOST.pem /etc/docker/cert.pem</pre><h3 id="开启："><a href="#开启：" class="headerlink" title="开启："></a>开启：</h3><pre>sudo systemctl start docker</pre>## 客户端证书：### 独立目录：<pre>mkdir client && cd client</pre>### 私钥：<pre>openssl genrsa -out key.pem 4096chmod 0400 key.pem</pre>### 请求证书：<pre>openssl req -subj '/CN=client' -new -key key.pem -out client.csr</pre>### 附件属性：<pre>echo extendedKeyUsage = clientAuth > extfile.cnf</pre>### 签署：<pre>openssl x509 -req -days 3650 -sha256 -in client.csr -CA ../ca.pem -CAkey ../ca-key.pem \  -CAcreateserial -extfile extfile.cnf \  -out cert.pem chmod 0444 cert.pemcp ../ca.pem .### 删除请求证书：<pre>rm client.csr extfile.cnf .srl</pre>### 部署证书：<pre>mkdir     ~/.docker/cp ca.pem ~/.docker/cp client-key.pem  ~/.docker/key.pemcp client-cert.pem ~/.docker/cert.pem</pre><h3 id="客户端配置（默认启用TLS）："><a href="#客户端配置（默认启用TLS）：" class="headerlink" title="客户端配置（默认启用TLS）："></a>客户端配置（默认启用TLS）：</h3><pre>cat<<eof>> ~/.bashrcexport DOCKER_HOST="tcp://192.168.9.7:1699" export DOCKER_TLS_VERIFY=1export DOCKER_CERT_PATH=/path/to/dir/tls-key/clientEOF</eof></pre><pre>source ~/.bashrc</pre><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><pre>docker version</pre> </pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;普通的HTTP模式（非常不安全）：&quot;&gt;&lt;a href=&quot;#普通的HTTP模式（非常不安全）：&quot; class=&quot;headerlink&quot; title=&quot;普通的HTTP模式（非常不安全）：&quot;&gt;&lt;/a&gt;普通的HTTP模式（非常不安全）：&lt;/h1&gt;&lt;h2 id=&quot;服务端（C
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker 学习笔记</title>
    <link href="https://yo42.github.io/2018/09/09/Docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://yo42.github.io/2018/09/09/Docker-学习笔记/</id>
    <published>2018-09-09T09:52:13.149Z</published>
    <updated>2018-09-09T10:03:45.823Z</updated>
    
    <content type="html"><![CDATA[<p>Docker有两个概念需要搞清楚,镜像与容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">镜像是从网上docker pub上拉取下来的镜像，拉取下来后可以使用docker run命令进行运行。</span><br><span class="line"># dockerhub 是官方构建的一个镜像仓库,类似github一样,上面累积了许多人上传制作的镜像,有官方,有的是用户上传的,任何人都可自由下载。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">容器是将镜像运行在一个容器中</span><br></pre></td></tr></table></figure><p>Registry</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户可以在自己的数据中心搭建私有的registry,也可以从官方使用docker官方的registry也就是docker hub.</span><br><span class="line">它是一个公共的镜像仓库，供用户下载和使用，dockerhub中有两种库。</span><br><span class="line">用户仓库和顶层库，用户仓库是有私人创建的，顶层使用docker公司负责维护的。</span><br></pre></td></tr></table></figure><p>常用操作命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker images #查看从docker hub上下载到本地的镜像</span><br><span class="line">docker search #镜像名#从docker hub上搜索镜像</span><br><span class="line">docker pull #从docker registry中拉取镜像</span><br><span class="line">docker push #将本地制作好的镜像推送到docker hub</span><br><span class="line">docker rm 容器id #删除容器命令</span><br><span class="line">docker rmi 镜像id #删除镜像 </span><br><span class="line">docker stop $(docker ps -a) #批量停止容器</span><br><span class="line">docker rm $(docker ps -a) # 批量删除容器</span><br><span class="line">docker rm $(docker ps -a|awk &apos;&#123;print $1&#125;&apos;|cut -f 1 -d &quot;C&quot;) # 批量删除容器</span><br><span class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq) #both</span><br><span class="line">###ps:docker rm 与docker rmi 都可以加 -f强制删除,需要注意的是如果删除镜像报错,如果基于镜像启动的容器存在,则无法直接删除,需要先删除容器再删除镜像。</span><br><span class="line">docker inspect # 查看镜像和容器的详细信息</span><br><span class="line">docker ps # 查看容器相关的信息，状态 选项 -a 列出所有容器的的状态 -l 列出最新的状态</span><br><span class="line">docker commit &lt;container_id&gt; &lt;some_name&gt; # 可以将一个容器固化为一个新的镜像,通过commit将镜像保存起来，也就是可以将一个环境配配置好的容器，保存，以后用到在拿出来使用。</span><br><span class="line">docker run -it -v --volumes-from --name --rm --privileged 镜像名字 # 以交互式运行容器 --name 只是一个名称，可以不加 --rm docker容器退出时将自动删除，注意如果容器运行在后台模式是不能带--rm的.需要映射多个端口使用多个-p 选项</span><br><span class="line">docker run 镜像名字 echo “hello world” # 在容器的shell中输出helloworld</span><br><span class="line">docker logs 容器id #显示容器的标准输出</span><br><span class="line">docker attach 容器id #重新进入关闭的容器</span><br><span class="line">docker network inspect bridge</span><br></pre></td></tr></table></figure><p>docker命令结构:</p><p>首先有两个方面，一个是docker镜像制作端，一个是用户使用端类似C/S 架构。</p><p>使用docker build命令结合dockerfile可以创建管理镜像,创建完后可以push到docker hub。</p><p>用户可以通过从网上拉取制作好的镜像,拉取到本地,运行容器。</p><p>使用docker pull时,可以从官方docker hub中的官方镜像库,其他公共库,私人仓库,拉取镜像资源,同时也可以拉取私有服务器中获取镜像资源，只需指定特定的库名,或服务器地址即可。</p><p>如何临时退出一个正在交互的容器，而不是终止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按ctrl-p+ctrl-q   #ctrl -c 是终止停止进程</span><br></pre></td></tr></table></figure><p>构建docker镜像应该遵循的原则,请参考官方文档，dockerfile最佳实践:</p><p>尽量选取满足需求但较小的基础系统镜像，例如大部分时候可以选择 debian:wheezy 或 debian:jessie 镜像，仅有不足百兆大小; </p><p>清理编译生成文件、安装包的缓存等临时文件; 安装各个软件时候要指定准确的版本号，并避免引入不需要的依赖; </p><p>从安全角度考虑，应用要尽量使用系统的库和依赖; 如果安装应用时候需要配置一些特殊的环境变量，</p><p>在安装后要还原不需要保持 的变量值; </p><p>使用 Dockerfile 创建镜像时候要添加 .dockerignore 文件或使用干净的工作目 录。</p><p>在构建docker容器时可以控制容器占用系统资源，调整系统硬件资源，例如cpu，内存，io等。</p><p>查看容器映射出来的端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -f name=nginx</span><br></pre></td></tr></table></figure><p>查看容器内应用监听的端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -ti global_nginx_1 ss -lntp</span><br></pre></td></tr></table></figure><p>制作镜像</p><pre><code>两种办法:1.使用Dockerfile,使用docker commit 将容器提交保存为镜像.##最好使用Dockerfile来构建镜像,不推荐docker commit方法。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">首先编辑一个空白的文本文件命名为DockerfIle，每一个指令的前缀都必须是大写的。</span><br><span class="line">FROM centos    #从centos 这个镜像文件中构建,from字段必须是第一个，可以有多个from</span><br><span class="line">在文件中可以写入运行命令使其在docker容器中运行</span><br><span class="line">RUN echo ’hello world‘ ##在容器中运行的指令</span><br><span class="line">CMD ##</span><br><span class="line">ENV ##后续的指令可以调用变量 $&#123;variable_name&#125;</span><br><span class="line">WORKDIR ##</span><br><span class="line">MAINTAINER ## dockerfile会根据上下文执行的命令，使用缓存，如果修改了使用者名称，将刷新缓存</span><br><span class="line">EXPOSE ## 端口宣告</span><br><span class="line">ADD ##</span><br><span class="line">COPY ##</span><br><span class="line">docker build -t 给镜像一个名称 . #注意，最后有个点，这条命令会读取当前目录下的所有文件以及目录和Dockerfile文件，建议创建新目录来build</span><br><span class="line"></span><br><span class="line">之后使用 docker images 就可以看到自己建立的镜像了，使用docker history 镜像id 就可以查看到刚刚容器的输出结果了。注意这个创建的镜像是不可以开启新的容器的 官方的解释 &quot;Notice the new changed-ubuntu image does not have its own copies of every layer. As can be seen in the diagram below, the new image is sharing its four underlying layers with the ubuntu:15.04 image.&quot;</span><br><span class="line">并且使用 docker history 可以看到刚刚通过文件输出镜像的大小只有11b，这种只是个共享图像层。</span><br><span class="line">一旦你构建或创建了一个新的镜像，你可以使用 docker push 命令将镜像推送到 Docker Hub 。这样你就可以分享你的镜像了，镜像可以是公开的，或者你可以把镜像添加到你的私有仓库中。</span><br></pre></td></tr></table></figure><p>Docker Volumes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">docker volumes 是一个存储卷,它可以使宿主机与容器里面共享数据,这个数据卷可以是系统文件上的任何一个目录,你可以挂在任意个Volumes 到容器里,多个容器也可以共享一个或多个数据量。</span><br><span class="line">docker run --volumes-from </span><br><span class="line">如果你有一些持久化的数据， 并且想在不同的container之间共享这些数据， 或者想在一些没有持久化的container中使用， </span><br><span class="line">最好的方法就是使用 Data Volumn Container, </span><br><span class="line">在把数据mount到你的container里.(译者：如开篇译者提到的docker的container是无状态的， </span><br><span class="line">也就是说标记状态的数据，例如：数据库数据， 应用程序的log 等等， 是不应该放到container里的， 而是放到 Data Volume </span><br><span class="line">Container里, 这点和funcational programming很像， 所以我喜欢把一般的docker container 叫做 </span><br><span class="line">functional container用来区分 data volume container ）</span><br><span class="line">这里的意思相当于有个最简洁的容器来专门跑存储容器，之后的启动的容器都可以使用 docker run --volumes-from 从存储数据容器中来实现数据的共享。</span><br><span class="line">$ docker run -d -v /dbdata --name dbdata training/postgres</span><br><span class="line"> </span><br><span class="line">这样做之后就可以通过 --volumes-from 把 /dbdata mount到其他的container里了</span><br><span class="line"></span><br><span class="line">$ docker run -d --volumes-from dbdata --name db1 training/postgres</span><br><span class="line"> </span><br><span class="line">还可以继续共享到另外一个container里</span><br><span class="line"></span><br><span class="line">$ docker run -d --volumes-from dbdata --name db2 training/postgres</span><br><span class="line"> </span><br><span class="line">-volumes-from 可以多次使用来 mount 多个conatainer里的多个volumes。</span><br><span class="line"></span><br><span class="line">这个操作是链式的， 我们在db1 中通过 --volumes-from mount进来的 volume可以继续被其他container使用</span><br><span class="line"></span><br><span class="line">$ docker run -d --name db3 --volumes-from db1 training/postgres</span><br><span class="line"> </span><br><span class="line">(译者:</span><br><span class="line"> 这里我们不是直接使用 volume container， 而是使用db1 这个functional container 把volume </span><br><span class="line">挂载到另外一个 funcational container上的，所谓的链式就是 dbdata -&gt; db1 -&gt; db3)</span><br><span class="line"></span><br><span class="line">如果你把所有mount volumes的container都移除掉， 包括初始化的那个 dbdata container， volume才会被移除掉。通过这个属性可以方便的升级升级数据或者在不同container间migrate数据.</span><br><span class="line"></span><br><span class="line">备份、恢复和移植数据卷</span><br><span class="line"></span><br><span class="line">Volume的另外一个用处就是备份、恢复和migrate数据。 具体的做法如下，使用 --volumes-from 来创建一个新的container mount这个volume</span><br><span class="line"></span><br><span class="line">$ sudo docker run --volumes-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata</span><br><span class="line"> </span><br><span class="line">&gt;</span><br><span class="line">    这里我们启动了一个新的container， </span><br><span class="line">从 dbdata 挂载了一个volume。同时挂载了一个本地目录到这个container里。最后我们通过一个 tar命令把 dbdata 里的数据备份到了 /backup 里。命令结束并且停止这个container后我们就在本地得到了一个备份的数据.</span><br><span class="line"></span><br><span class="line">(译者: 这里使用的 ubuntu container， 就是为了把volume中的数据打包备份到host的某一个目录里。)</span><br><span class="line"></span><br><span class="line">备份的数据可以恢复到这个container， 或者其他使用这个volume的container。首先创建一个container</span><br><span class="line"></span><br><span class="line">$ sudo docker run -v /dbdata --name dbdata2 ubuntu</span><br><span class="line"> </span><br><span class="line">&gt;    之后un-tar备份文件到 data volume 里</span><br><span class="line"></span><br><span class="line">$ sudo docker run --volumes-from dbdata2 -v $(pwd):/backup busybox tar xvf /backup/backup.tar</span><br><span class="line"> </span><br><span class="line">你可以使用你喜欢的工具加上上面的技术来自动备份，迁移和恢复数据</span><br></pre></td></tr></table></figure><p>实践:在Docker容器中运行web应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先docker pull nginx 或者制作好web应用的镜像.</span><br><span class="line">docker run -idt -p 80:80 -v /docker/download/:/data/ download:1 #以后台进程运行</span><br><span class="line">docker exec 容器id nginx #使用docker exec执行nginx 启动命令</span><br><span class="line">docker top #查看容器内的进程运行状态</span><br></pre></td></tr></table></figure><p>开启动一个长时间运行的后台进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=$(docker run -d centos /bin/bash -c &quot;while true; do echo hello world; sleep 1; done&quot;)</span><br><span class="line"></span><br><span class="line">docker logs $a ##将会看到有hello world</span><br></pre></td></tr></table></figure><h4 id="删除Docker镜像"><a href="#删除Docker镜像" class="headerlink" title="删除Docker镜像"></a>删除Docker镜像</h4><p>首先要保证有权限对Docker镜像或者容器进行操作，具体做法参见进入前文安装部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 停止所有容器</span><br><span class="line">$ docker stop $(docker ps -a -q)</span><br><span class="line"></span><br><span class="line"># 删除指定镜像</span><br><span class="line">$ docker rmi $image</span><br><span class="line"></span><br><span class="line"># 删除无标示镜像，即id为&lt;None&gt;的镜像</span><br><span class="line">$ docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;&#123;print $3&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 删除所有镜像</span><br><span class="line">$ docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="在Docker构建nginx容器-在构建Dockerfile时应在空目录下构建"><a href="#在Docker构建nginx容器-在构建Dockerfile时应在空目录下构建" class="headerlink" title="在Docker构建nginx容器 #在构建Dockerfile时应在空目录下构建"></a>在Docker构建nginx容器 #在构建Dockerfile时应在空目录下构建</h3><h4 id="构建dockerfile"><a href="#构建dockerfile" class="headerlink" title="构建dockerfile"></a>构建dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;&lt;\EOF &gt; Dockerfile </span><br><span class="line"># Nginx</span><br><span class="line">#</span><br><span class="line"># Version 1.0</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER djluo &lt;dj.luo@baoyugame.com&gt;</span><br><span class="line">RUN rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">RUN yum -y install nginx; yum clean all</span><br><span class="line">EOF</span><br><span class="line">#通过Dockerfile在容器中安装nginx</span><br><span class="line">docker build -t nginx:1.0 . #-t 只是个版本名称</span><br></pre></td></tr></table></figure><h4 id="进入容器修改配置文件"><a href="#进入容器修改配置文件" class="headerlink" title="进入容器修改配置文件:"></a>进入容器修改配置文件:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bash-4.2# </span><br><span class="line">bash-4.2# rm conf.d/&#123;default.conf,example_ssl.conf&#125;</span><br><span class="line">bash-4.2# rm -f /etc/nginx/&#123;koi-utf,koi-win,scgi_params,uwsgi_params,win-utf&#125;</span><br><span class="line">bash-4.2# cat&lt;&lt;\EOF &gt; /etc/nginx/conf.d/download.conf </span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root       /data/html;</span><br><span class="line">    access_log /data/logs/download.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">bash-4.2# mkdir -p /data/&#123;html,logs&#125;</span><br><span class="line">bash-4.2# /usr/sbin/nginx -t </span><br><span class="line">bash-4.2# exit</span><br></pre></td></tr></table></figure><h4 id="制作成镜像commit"><a href="#制作成镜像commit" class="headerlink" title="制作成镜像commit:"></a>制作成镜像commit:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps -l # 获取最新的一个容器信息，通常就是上面操作的了。</span><br><span class="line">docker commit -a &quot;djluo &lt;dj.luo@baoyugame.com&gt;&quot; -m &quot;用于docker build的下载环境&quot; 07d7a871cf32 download:1</span><br><span class="line">docker rm 07d7a871cf32 # 删除容器</span><br></pre></td></tr></table></figure><h4 id="构建Nginx的主目录和日志目录"><a href="#构建Nginx的主目录和日志目录" class="headerlink" title="构建Nginx的主目录和日志目录:"></a>构建Nginx的主目录和日志目录:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/docker/download/&#123;html,logs&#125;</span><br><span class="line">echo &quot;Hi&quot; &gt; ~/docker/download/html/index.html</span><br></pre></td></tr></table></figure><h4 id="正式运行下载环境的容器：需要映射端口，公网访问"><a href="#正式运行下载环境的容器：需要映射端口，公网访问" class="headerlink" title="正式运行下载环境的容器：需要映射端口，公网访问"></a>正式运行下载环境的容器：需要映射端口，公网访问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 --name download -v /docker/download/:/data/ download:1 /usr/sbin/nginx</span><br><span class="line">#将docker容器里的80端口映射到宿主机的80，好让外网访问，-v共享存储卷，将宿主机的目录数据挂载到容器里  并且启动nginx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正确的用法：应该是分为2个容器，应用容器和管理容器。</span><br><span class="line">应用容器：跑具体的应用，如nginx、java、php等。将应用数据放到VOULME中。</span><br><span class="line">管理容器：跑SSHD，并挂载上应用容器的数据VOULME。随心所欲的操作吧。</span><br><span class="line">不过有些应用的重启、重新导入配置等，可能需要到容器外操作</span><br><span class="line">docker守护进进程(服务端)默认以unixsocket方式启动，如果需要用到远程调用需要使用remoteapi</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">以下是一个RUN格式正确的指导，显示所有apt-get 建议。</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">    aufs-tools \</span><br><span class="line">    automake \</span><br><span class="line">    build-essential \</span><br><span class="line">    curl \</span><br><span class="line">    dpkg-sig \</span><br><span class="line">    libcap-dev \</span><br><span class="line">    libsqlite3-dev \</span><br><span class="line">    mercurial \</span><br><span class="line">    reprepro \</span><br><span class="line">    ruby1.9.1 \</span><br><span class="line">    ruby1.9.1-dev \</span><br><span class="line">    s3cmd=1.1.* \</span><br><span class="line"> &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">####################ENTRYPOINT###############################</span><br><span class="line">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] （exec表格，首选）</span><br></pre></td></tr></table></figure><p>docker 默认本地的仓库目录，存储着push的镜像。</p><p>这个目录默认是100g，超过了将会push失败，所以建议定时清理。</p><h3 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp &lt;containerId&gt;:/file/path/within/container /host/path/target</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker 镜像导入和导出</span><br><span class="line">导出镜像</span><br><span class="line">docker save -o centos7.tar centos</span><br><span class="line">导入本地镜像</span><br><span class="line">sudo docker load --input centos7.tar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker有两个概念需要搞清楚,镜像与容器。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>我的 Python 开发环境</title>
    <link href="https://yo42.github.io/2018/09/09/%E4%BD%A0%E7%9A%84-Python-%E5%BC%80%E5%8F%91%E8%80%85%E7%8E%AF%E5%A2%83/"/>
    <id>https://yo42.github.io/2018/09/09/你的-Python-开发者环境/</id>
    <published>2018-09-09T09:45:16.827Z</published>
    <updated>2018-09-09T09:49:14.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><p>任何可以做纯文本编辑的工具都可以用来写Python代码，但是用功能更加强大的文本编辑器可以使你的编程工作更加轻松。</p><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>Vim 是一个用键盘快捷键代替菜单和图标来操作的文本编辑器。对于 Vim 编辑器，有几个插件和设置可以用来辅助 Python 开发。如果你只用 Python 开发，一个好的开始就是把缩进和换行的默认设置设置成兼容 <a href="https://www.python.org/dev/peps/pep-0008" target="_blank" rel="noopener"><strong>PEP 8</strong></a> 的值。 在你的主目录里，打开一个叫作 <code>.vimrc</code> 的文件并且把下面这些代码添加进去：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set textwidth=<span class="number">79</span>  <span class="string">" 行宽超过 79 会被截断</span></span><br><span class="line"><span class="string">set shiftwidth=4  "</span> 操作符 &gt;&gt; 缩进 <span class="number">4</span> 列；&lt;&lt; 减少缩进 <span class="number">4</span> 列</span><br><span class="line">set tabstop=<span class="number">4</span>     <span class="string">" 一个 TAB 显示为 4 列</span></span><br><span class="line"><span class="string">set expandtab     "</span> 用空格代替 TAB</span><br><span class="line">set softtabstop=<span class="number">4</span> <span class="string">" 敲击 TAB/BACKSPACE 插入 / 删除 4 个空格 </span></span><br><span class="line"><span class="string">set shiftround    "</span> 缩进为 <span class="string">'shiftwidth'</span> 的倍数</span><br><span class="line">set autoindent    <span class="string">" 新行缩进与上一行对齐</span></span><br></pre></td></tr></table></figure><p>使用这些设置，行宽超过 79 个字符会自动换行，并且缩进设置为用 4 个空格代替一个制表符。如果你还用 Vim 写其它的语言，有一个很方便的插件 <a href="http://www.vim.org/scripts/script.php?script_id=974" target="_blank" rel="noopener">indent</a> ，用来处理 Python 源文件的缩进设置。</p><p>还有一个很方便的语法插件 <a href="http://www.vim.org/scripts/script.php?script_id=790" target="_blank" rel="noopener">syntax</a>，对 Vim 6.1 里自带的语法文件做了一些增强。</p><p>这些插件为你用 Python 开发提供了一个基本环境。你应该充分利用 Vim 去持续检查你的代码是否有语法错误并且是否符合 PEP8 规范。幸运的是有 <a href="https://pypi.python.org/pypi/pycodestyle/" target="_blank" rel="noopener">pycodestyle</a> 和 <a href="http://pypi.python.org/pypi/pyflakes/" target="_blank" rel="noopener">Pyflakes</a> 来帮你做这些事。如果你的 Vim 编译时附带了 <code>+python</code> ，你也可以使用一些自带的插件非常方便的来做这些检查。</p><p>对于 PEP8 和 Pyflakes ，你可以安装 <a href="https://github.com/nvie/vim-flake8" target="_blank" rel="noopener">vim-flake8</a>。然后你就可以在 Vim 里把 <code>Flake8</code> 功能映射到任何快捷键或操作上了。这个插件会在屏幕下方显示错误信息，并且提供一个简单的方式来跳转到对应的行。设置成每当你保存文件的时候就调用这个功能会很方便。如果想这样做，添加这行代码到你的 <code>.vimrc</code> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autocmd BufWritePost *.py call Flake8()</span><br></pre></td></tr></table></figure><p>如果你已经使用了 <a href="https://github.com/scrooloose/syntastic" target="_blank" rel="noopener">syntastic</a> ，你可以把它设置成在写入的时候自动运行 Pyflakes 并且在 quickfix 窗口里显示错误和警告信息。下面是一个在状态栏里显示检查状态和警告信息的示例配置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set statusline+=%<span class="comment">#warningmsg#</span></span><br><span class="line">set statusline+=%&#123;SyntasticStatuslineFlag()&#125;</span><br><span class="line">set statusline+=%*</span><br><span class="line">let g:syntastic_auto_loc_list=<span class="number">1</span></span><br><span class="line">let g:syntastic_loc_list_height=<span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="Python-mode"><a href="#Python-mode" class="headerlink" title="Python-mode"></a>Python-mode</h4><p><a href="https://github.com/klen/python-mode" target="_blank" rel="noopener">Python-mode</a> 是 Vim 编辑器中一个复杂的编写 Python 代码的解决方案。有以下功能：</p><ul><li>让任意的 Python 代码检查工具(<code>pylint</code>, <code>pyflakes</code>, <code>pycodestyle</code>, <code>mccabe</code>) 都能协同工作</li><li>使用 Rope 进行代码重构以及自动填写</li><li>快速折叠 Python 代码</li><li>虚拟环境支持</li><li>全文搜索 Python 文档，运行 Python代码</li><li>自动使用 <a href="https://pypi.python.org/pypi/pycodestyle/" target="_blank" rel="noopener">pycodestyle</a> 修正错误</li></ul><p>等等。</p><h4 id="SuperTab"><a href="#SuperTab" class="headerlink" title="SuperTab"></a>SuperTab</h4><p><a href="http://www.vim.org/scripts/script.php?script_id=1643" target="_blank" rel="noopener">SuperTab</a> 是一个小型的 Vim 插件，可以用 <code>&lt;Tab&gt;</code> 键或者其他的自定义键来方便的完成代码自动填写。</p><h3 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h3><p>Emacs 是另一个强大的文本编辑器。它是完全可编程的（lisp），但学习曲线有点陡。 如果您已经是一名 Emacs 的用户了，推荐阅读 EmacsWiki 上的 <a href="http://emacswiki.org/emacs/PythonProgrammingInEmacs" target="_blank" rel="noopener">Python Programming in Emacs</a> 。</p><ol><li>Emacs 本身支持Python模式。</li></ol><h3 id="TextMate"><a href="#TextMate" class="headerlink" title="TextMate"></a>TextMate</h3><p><a href="http://macromates.com/" target="_blank" rel="noopener">TextMate</a> 是一个带有苹果操作系统气质的文本编辑器。 巧取了 UNIX 和 GUI 的各自优点，TextMate 将两者中最好的部分带给了脚本专家和新手用户。</p><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><blockquote><p><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a> 是一个设计精良的编辑器，你可以用来编写脚本代码、标记代码和一般的文字编辑。您将会爱上其漂亮的用户界面、非凡的特性和惊人的运行速度。</p></blockquote><p>Sublime Text has excellent support for editing Python code and uses Python for its plugin API. It also has a diverse variety of plugins, <a href="https://github.com/SublimeLinter/SublimeLinter" target="_blank" rel="noopener">some of which</a> allow for in-editor PEP8 checking and code “linting”.</p><p>Sublime Text 对 Python 代码提供了非常棒的支持，而且其插件系统的 API 也是有 Python 语言编写的。它拥有大量各式各样的插件，  <a href="https://github.com/SublimeLinter/SublimeLinter" target="_blank" rel="noopener">其中一些</a>  允许编辑器内的 PEP8 检查和代码错误提示。</p><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><blockquote><p><a href="https://atom.io/" target="_blank" rel="noopener">Atom</a> 是一款 21 世纪的可定制性极高的文本编辑器。构建于atom-shell上，它拥有我们所喜欢的编辑器的所有优秀特性。</p></blockquote><p>Atom 是 Web 原生的（HTML、CSS、JS），编辑器核心专注于模块化的设计和插件开发的便捷性。它自带本地包管理和大量的扩展包。Atom 下从事 Python 开发所推荐的插件是 <a href="https://github.com/AtomLinter/Linter" target="_blank" rel="noopener">Linter</a> 和 <a href="https://github.com/AtomLinter/linter-flake8" target="_blank" rel="noopener">linter-flake8</a> 的组合。</p><h2 id="IDEs"><a href="#IDEs" class="headerlink" title="IDEs"></a>IDEs</h2><h3 id="PyCharm-IntelliJ-IDEA"><a href="#PyCharm-IntelliJ-IDEA" class="headerlink" title="PyCharm / IntelliJ IDEA"></a>PyCharm / IntelliJ IDEA</h3><p><a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a> 由 JetBrains 公司开发，此公司还以 IntelliJ IDEA 闻名。它们都共享着相同的基础代码，PyCharm 中大多数特性能通过免费的 Python 插件带入到 IntelliJ 中。PyCharm 由两个版本：专业版（Professional Edition）（30天试用）和拥有功能相对较少的社区版（Community Edition）（Apache 2.0 License）。</p><h3 id="使用-Visual-Studio-Code-来编辑-Python"><a href="#使用-Visual-Studio-Code-来编辑-Python" class="headerlink" title="使用 Visual Studio Code 来编辑 Python"></a>使用 Visual Studio Code 来编辑 Python</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="noopener">Python for Visual Studio</a> 是一款基于 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code IDE</a> 的扩展。 它是一个免费的、轻量的、开源的 IDE，支持 Mac、Windows 和 Linux 等主流平台。它以诸如 Node.js 和 Python 等开源技术构建，具有如智能自动补全、本地和远程调试、linting（代码检查）等 引人注目的特性。</p><p>MIT licensed.</p><h3 id="Enthought-Canopy"><a href="#Enthought-Canopy" class="headerlink" title="Enthought Canopy"></a>Enthought Canopy</h3><p><a href="https://www.enthought.com/products/canopy/" target="_blank" rel="noopener">Enthought Canopy</a> 是一款专门面向科学家 和工程师的 Python IDE，它预装了为数据分析而用的库。</p><h3 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h3><p>Eclipse 中进行 Python 开发最流行的插件是 Aptana 的 <a href="http://pydev.org/" target="_blank" rel="noopener">PyDev</a>。</p><h3 id="Komodo-IDE"><a href="#Komodo-IDE" class="headerlink" title="Komodo IDE"></a>Komodo IDE</h3><p><a href="http://www.activestate.com/komodo-ide" target="_blank" rel="noopener">Komodo IDE</a>  由 ActiveState 开发，并且是能运行在 Windows、Mac 和 Linux 平台上的商业 IDE。<a href="https://github.com/Komodo/KomodoEdit" target="_blank" rel="noopener">KomodoEdit</a> 是其开源版本。</p><h3 id="Spyder"><a href="#Spyder" class="headerlink" title="Spyder"></a>Spyder</h3><p><a href="https://github.com/spyder-ide/spyder" target="_blank" rel="noopener">Spyder</a> 是一款专门面向 Python科学库（即 <a href="http://www.scipy.org/" target="_blank" rel="noopener">Scipy</a>）的 IDE。它集成了 <a href="http://pypi.python.org/pypi/pyflakes/" target="_blank" rel="noopener">pyflakes</a> 、 <a href="http://www.logilab.org/857" target="_blank" rel="noopener">pylint</a> 和 <a href="https://github.com/python-rope/rope" target="_blank" rel="noopener">rope</a> 。</p><p>Spyder 是免费开源的，功能包括代码补全、语法高亮、类和函数浏览器，以及对象检查等。</p><h3 id="WingIDE"><a href="#WingIDE" class="headerlink" title="WingIDE"></a>WingIDE</h3><p><a href="http://wingware.com/" target="_blank" rel="noopener">WingIDE</a> 是一个专门面向 Python 的 IDE。它能运行在 Linux、Windows 和 Mac 上（作为一款 X11 应用程序，某些 Mac 用户可能会无法使用）。</p><p>WingIDE 提供了代码补全、语法高亮、源代码浏览器、图形化调试器的功能，还支持版本控制系统。</p><h3 id="NINJA-IDE"><a href="#NINJA-IDE" class="headerlink" title="NINJA-IDE"></a>NINJA-IDE</h3><p><a href="http://www.ninja-ide.org/" target="_blank" rel="noopener">NINJA-IDE</a> 的名称来自递归缩写：”Ninja-IDE Is Not Just Another IDE”， 是一款跨平台的IDE，专为构建 Python 应用而打造，并能运行于 Linux/X11、Mac OS X 和 Windows 桌面操作系统上。从网上可以下载到这些平台的安装包。</p><p>NINJA-IDE 是一款开源软件（GPLv3许可），是使用 Python 和 Qt 开发。在 <a href="https://github.com/ninja-ide" target="_blank" rel="noopener">GitHub</a> 能下载到源文件。</p><h3 id="Eric-The-Eric-Python-IDE"><a href="#Eric-The-Eric-Python-IDE" class="headerlink" title="Eric (The Eric Python IDE)"></a>Eric (The Eric Python IDE)</h3><p><a href="http://eric-ide.python-projects.org/" target="_blank" rel="noopener">Eric</a> 是一款功能齐全的Python IDE， 提供源代码自动补全、语法高亮、对版本控制系统的支持、对Python 3 的支持、集成的 Web 浏览器、 Python Shell、集成调试器和灵活的插件系统等功能。它基于 Qt GUI 工具集，使用 Python 编写， 集成了 Scintilla 编辑器控制。Eric 是一款超过 10 年仍活跃开发的开源软件（GPLv3许可）。</p><h2 id="解释器工具"><a href="#解释器工具" class="headerlink" title="解释器工具"></a>解释器工具</h2><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><p>虚拟环境完整隔离项目包依赖，这意味着您无须全局（系统范围内）安装 Python 工程特定的包， 因此就能避免潜在的版本冲突。</p><p>使用时请参阅 <a href="http://github.com/kennethreitz/python-guide/blob/master/docs/dev/virtualenvs.rst" target="_blank" rel="noopener">Virtual Environments</a> 文档。</p><h3 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h3><p><a href="https://github.com/yyuu/pyenv" target="_blank" rel="noopener">pyenv</a> 是一个允许多个 Python 解释器版本同时安装于一台机器的工具。这解决了不同的项目需要不同版本的 Python 的问题。比如，为了兼容性， 可以很容易地为一个项目安装 Python 2.7，而继续使用 Python 3.4 作为默认的解释器。 pyenv 不止限于 CPython 版本——它还能安装 PyPy、anaconda、miniconda、stackless、jython 和 ironpython 解释器。</p><p>pyenv 的工作原理是在一个叫做 <code>shims</code> 目录中创建 Python 解释器（以及其他工具像 <code>pip</code> 和 <code>2to3</code> 等）的伪造应用。当系统寻找名为 <code>python</code> 的应用时，它会先在 <code>shims</code> 目录中寻找并使用对应假版本的应用，然后会传递命令到 pyenv 中。 pyenv 再根据环境变量、<code>.python-version</code> 文件和全局默认设置的信息来判断该运行哪个版本的 Python。</p><p>pyenv 不是管理虚拟环境的工具，但是有一个叫做 <a href="https://github.com/yyuu/pyenv-virtualenv" target="_blank" rel="noopener">pyenv-virtualenv</a> 的插件可以自动化不同环境的创建，而且也能够直接集成到现有的 pyenv 工具中，基于环境变量或者 <code>.python-version</code> 文件，来切换不同的环境。</p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><h3 id="IDLE"><a href="#IDLE" class="headerlink" title="IDLE"></a>IDLE</h3><p><a href="http://docs.python.org/library/idle.html#idle" target="_blank" rel="noopener">IDLE</a> 是一个集成的开发环境，它是 Python 标准库的一部分。 它完全由 Python 编写，并使用 Tkinter GUI 工具集。尽管 IDLE 不适用于作为成熟的 Python 开发工具，很多时候我们用来尝试运行简单的 Python 代码片段，或者对 Python 不同特性做一些小实验。</p><p>它提供以下特性：</p><ul><li>Python Shell 窗口（解释器）</li><li>多窗口文本编辑器，支持 Python 代码高亮</li><li>最小的调试工具</li></ul><h3 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h3><p><a href="http://ipython.org/" target="_blank" rel="noopener">IPython</a> 提供一个丰富的工具集来帮助您最大限度地和 Python 交互。 它主要的组件有：</p><ul><li>强大的 Python shell（基于终端和 Qt ）。</li><li>一个基于网络的笔记本，拥有相同的核心特性，但是支持富媒体、文本、代码、数学表达式和内联绘图。</li><li>支持交互式的数据可视化和 GUI 工具集的使用。</li><li>灵活、嵌入的解释器载入到您的工程工程中。</li><li>支持高级可交互的并行计算的工具。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install ipython</span><br></pre></td></tr></table></figure><p>使用以下命令下载和安装带有所有可选依赖（notebook、qtconsol、tests 和其他功能）的 IPython：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install ipython[all]</span><br></pre></td></tr></table></figure><h3 id="BPython"><a href="#BPython" class="headerlink" title="BPython"></a>BPython</h3><p><a href="http://bpython-interpreter.org/" target="_blank" rel="noopener">bpython</a> 在类 Unix 操作系统中可替代 Python 解释器的接口。 它有以下特性：</p><ul><li>内建的语法高亮。</li><li>行内输入时的自动补全建议。</li><li>Python 函数预期选项提供。</li><li>“倒带” 功能 —— 从内存中 pop 出代码的最后一行并重新运行。</li><li>将输入的代码发送到 pastebin。</li><li>将输入的代码保存到一个文件中。</li><li>自动缩进。</li><li>支持 Python 3。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install bpython</span><br></pre></td></tr></table></figure><h3 id="ptpython"><a href="#ptpython" class="headerlink" title="ptpython"></a>ptpython</h3><p><a href="https://github.com/jonathanslenders/ptpython/" target="_blank" rel="noopener">ptpython</a> 是一个构建在 <a href="http://github.com/jonathanslenders/python-prompt-toolkit" target="_blank" rel="noopener">prompt_toolkit</a> 库之上的 REPL。它被视作是 <a href="http://bpython-interpreter.org/" target="_blank" rel="noopener">BPython</a> 的替代。特性包括：</p><ul><li>语法高亮</li><li>自动补全</li><li>多行编辑</li><li>Emacs 和 VIM 模式</li><li>代码中嵌入的 REPL</li><li>语法合法性检测</li><li>支持 Tab 页</li><li>通过 <code>pip install ipython</code> 安装后运行 <code>ptipython</code>，即可支持集成 <a href="http://ipython.org/" target="_blank" rel="noopener">IPython</a> 的 shell：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install ptpython</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文本编辑器&quot;&gt;&lt;a href=&quot;#文本编辑器&quot; class=&quot;headerlink&quot; title=&quot;文本编辑器&quot;&gt;&lt;/a&gt;文本编辑器&lt;/h2&gt;&lt;p&gt;任何可以做纯文本编辑的工具都可以用来写Python代码，但是用功能更加强大的文本编辑器可以使你的编程工作更加轻松。&lt;
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python 底层虚拟环境 virtualenv</title>
    <link href="https://yo42.github.io/2018/09/09/python-%E5%BA%95%E5%B1%82%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83-virtualenv/"/>
    <id>https://yo42.github.io/2018/09/09/python-底层虚拟环境-virtualenv/</id>
    <published>2018-09-09T09:41:57.899Z</published>
    <updated>2018-09-15T04:31:25.340Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://pypi.python.org/pypi/virtualenv" target="_blank" rel="noopener">virtualenv</a> 是一个创建独立的 Python 环境。 virtualenv 会创建一个文件夹，其中包含使用 Python 项目所有所需的可执行文件。</p><p>它可以单独使用，用于代替 Pipenv 。</p><p>通过 pip 安装 virtualenv ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install virtualenv</span><br></pre></td></tr></table></figure><p>测试下是否安装完成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv --version</span><br></pre></td></tr></table></figure><ol><li>为项目创建一个虚拟环境：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd my_project_folder</span><br><span class="line">$ virtualenv my_project</span><br></pre></td></tr></table></figure><p><code>virtualenv my_project</code> 将会在当前目录创建一个文件夹来存放 Python 的可执行文件以及拷贝一份 <code>pip</code>库，这样就能安装其他包了。虚拟环境名字（ 这里是 <code>myproject</code> ）可以随意，若省略名字将会把文件均放在当前目录。</p><p>这将在你运行此命令的文件目录下创建一个 Python 的副本，并将其放入名为 <code>my_project</code> 的文件夹中</p><p>你也可以选择 Python 解释器（如 <code>python2.7</code> ） 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv -p /usr/bin/python2<span class="number">.7</span> my_project</span><br></pre></td></tr></table></figure><p>或者改变 <code>~/.bashrc</code> 中的解释器的全局环境变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python2<span class="number">.7</span></span><br></pre></td></tr></table></figure><ol><li>开始使用虚拟环境前，需要先激活：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source my_project/bin/activate</span><br></pre></td></tr></table></figure><p>当前虚拟环境的名称将出现在提示符的左侧 (e.g. <code>(my_project)Your-Computer:your_project UserName$)</code>  ，这样你就能了解当前激活的虚拟环境是什么。 自此，你使用 pip 安装的任何包都会放在 <code>my_project</code> 文件夹，与全局 Python 安装的包相互独立。</p><p>安装包的话就与往常一样，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install requests</span><br></pre></td></tr></table></figure><ol><li>如果你在虚拟环境中暂时完成了工作，可以这样停用它：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ deactivate</span><br></pre></td></tr></table></figure><p>这样你就回到了系统默认的 Python 解释器，包括安装的库页会回到默认的。</p><p>要删除一个虚拟环境，只需要删除对应文件夹。( 以当前示例来说，执行 <code>rm -rfmy_project</code>) 。</p><p>然而 virtualenv 也有些不便之处，因为一段时间后你的系统中可能会有很多虚拟环境散落在各处，这样会让你忘记它们的名字或位置</p><p>运行  <code>virtualenv</code> 带上选项  <code>--no-site-packages</code>  将不会包含已经全局安装的包。这样有助于保持包列表的整洁以防万一之后需要访问它。<br>[ 这在 <code>virtualenv</code> 1.7 是默认的哦。 ]</p><p>为了保持环境的一致性，“冻结”当前环境包的状态是正确的选择。冻结环境可以运行下面的命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>该命令将创建一个 <code>requirements.txt</code> 文件，里面包含有当前环境所有包的简单列表及对应的版本。你可以使用 “pip list” 查看没有安装格式的已安装包列表。之后，对于开发人员（或你需要重新安装环境）来说就可以很容易的安装相同的版本一致的包，这样就能完全搭建出与之前一致的环境了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>这样有助于在跨设备，跨部署，跨人员的情况下保证环境的一致性。</p><p>最后，记得将虚拟环境文件夹从源代码控制中排除，也就是将其添加到 ignore 列表中 ( 详见 <a href="http://docs.python-guide.org/en/latest/writing/gotchas/#version-control-ignores" target="_blank" rel="noopener">Version Control Ignores</a>).</p><h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><p><a href="https://virtualenvwrapper.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">virtualenvwrapper</a> 提供一系列命令让你更加愉快地操作虚拟环境。它还将所有虚拟环境放在一块。</p><p>安装方法如下 ( 请确保 <strong>virtualenv</strong> 已安装 ) ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install virtualenvwrapper</span><br><span class="line">$ export WORKON_HOME=~/Envs</span><br><span class="line">$ source /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><p>(<a href="https://virtualenvwrapper.readthedocs.io/en/latest/install.html" target="_blank" rel="noopener">virtualenvwrapper 安装说明 </a>.)</p><p>对于 Windows 用户，你可以使用 <a href="https://github.com/davidmarble/virtualenvwrapper-win/" target="_blank" rel="noopener">virtualenvwrapper-win</a>.</p><p>安装方式如下 ( 请确保 <strong>virtualenv</strong> 已安装 ) ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p>在 Windows 中，设置环境变量 WORKON_HOME ，内容为 %USERPROFILE%Envs</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ol><li>创建虚拟环境</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkvirtualenv my_project</span><br></pre></td></tr></table></figure><p>该指令将在 <code>~/Envs</code> 创建 <code>my_project</code> 文件夹。</p><ol><li>在虚拟环境下工作：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ workon my_project</span><br></pre></td></tr></table></figure><p>或者，你可以通过创建项目来创建虚拟环境，该项目目录要在 <code>$WORKON_HOME</code> 下，当你在 <code>workon myproject</code> 时可以 <code>cd</code> 进入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkproject myproject</span><br></pre></td></tr></table></figure><p><strong>virtualenvwrapper</strong> 为环境名称提供 tab 键补全功能。当你有很多环境又很难记住它们的名字时，该功能很有帮助。</p><p><code>workon</code> 也会使你当前所在的环境失效，这样你就可以在不同地环境间快速切换。</p><ol><li>停止虚拟环境：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ deactivate</span><br></pre></td></tr></table></figure><ol><li>删除虚拟环境：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rmvirtualenv venv</span><br></pre></td></tr></table></figure><h3 id="其他有用的命令"><a href="#其他有用的命令" class="headerlink" title="其他有用的命令"></a>其他有用的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsvirtualenv</span><br></pre></td></tr></table></figure><p>列出所有虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdvirtualenv</span><br></pre></td></tr></table></figure><p>进入当前的虚拟环境目录，这样你就可以浏览它的 <code>site-packages</code> ，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdsitepackages</span><br></pre></td></tr></table></figure><p>上述命令将进入虚拟环境的 <code>site-packages</code> 目录.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lssitepackages</span><br></pre></td></tr></table></figure><p>列出 <code>site-packages</code> 目录下所有软件包.</p><p><a href="https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html" target="_blank" rel="noopener">virtualenvwrapper 的全部命令列表 </a>.</p><h2 id="virtualenv-burrito"><a href="#virtualenv-burrito" class="headerlink" title="virtualenv-burrito"></a>virtualenv-burrito</h2><p>使用 <a href="https://github.com/brainsik/virtualenv-burrito" target="_blank" rel="noopener">virtualenv-burrito</a> ，你可以只要使用一条命令就将 virtualenv + virtualenvwrapper 环境搭建起来。</p><h2 id="autoenv"><a href="#autoenv" class="headerlink" title="autoenv"></a>autoenv</h2><p>当你 <code>cd</code> 进一个含有 <code>.env</code> 的目录， <a href="https://github.com/kennethreitz/autoenv" target="_blank" rel="noopener">autoenv</a> 将自动激活虚拟环境。</p><p>Mac OS X 使用 <code>brew</code> 安装 autoenv 的方式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install autoenv</span><br></pre></td></tr></table></figure><p>Linux 安装方式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> git:<span class="comment">//github.com/kennethreitz/autoenv.git ~/.autoenv</span></span><br><span class="line">$ <span class="keyword">echo</span> <span class="string">'source ~/.autoenv/activate.sh'</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://pypi.python.org/pypi/virtualenv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;virtualenv&lt;/a&gt; 是一个创建独立的 Python 环境。 virtualenv 会创建一个文件夹，其中
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python next step</title>
    <link href="https://yo42.github.io/2018/09/09/python-next-step/"/>
    <id>https://yo42.github.io/2018/09/09/python-next-step/</id>
    <published>2018-09-09T09:34:05.479Z</published>
    <updated>2018-09-09T09:42:03.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迈出下一步"><a href="#迈出下一步" class="headerlink" title="迈出下一步"></a>迈出下一步</h1><p>如果到现在你已经阅读过本书并且编写了许多程序，那么你一定已经开始熟悉并且习惯 Python 了。或许你已经创建了一些 Python 程序来尝试完成一些工作，同时锻炼你自己的 Python 技能。如果你尚未至此，你也应该作出努力。现在我们面临的问题是“下一步该做什么？”。</p><p>我会建议你试图解决这个问题：</p><blockquote><p>编写一款你自己的命令行<em>地址簿</em>程序，你可以用它浏览、添加、编辑、删除或搜索你的联系人，例如你的朋友、家人、同事，还有他们诸如邮件地址、电话号码等多种信息。这些详细信息必须被妥善储存以备稍后的检索。</p></blockquote><p>如果你回想至今我们学过、讨论过、遇见过的所有东西，你会发现这其实非常简单。如果你仍想要有关如何进行的提示，这儿倒是有一些。</p><p>如果你觉得上面的程序太容易了，这还有另一个：</p><blockquote><p>实现<a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?replace" target="_blank" rel="noopener">替换命令</a>。这个命令能将一串字符串替换为另外提供的文件或列表中的另一串。</p></blockquote><p>只要你想，替换命令可以或简单或复杂地实现，从简单的字符串替换到搜寻搭配的样式（正则表达式）。</p><h2 id="下一个项目"><a href="#下一个项目" class="headerlink" title="下一个项目"></a>下一个项目</h2><p>如果你发现上面的程序都能很容易地编写出来，那么看看下面这个完整的项目列表，并尝试编写你自己的程序：<a href="https://github.com/thekarangoel/Projects#numbers" target="_blank" rel="noopener">https://github.com/thekarangoel/Projects#numbers</a> (这一列表与 <a href="http://www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/" target="_blank" rel="noopener">Martyr2 的超级项目列表</a>相同)。</p><p>你还可以看看：</p><ul><li><a href="https://pragprog.com/book/bhwb/exercises-for-programmers" target="_blank" rel="noopener">Exercises for Programmers: 57 Challenges to Develop Your Coding Skills</a></li><li><a href="https://openhatch.org/wiki/Intermediate_Python_Workshop/Projects" target="_blank" rel="noopener">Intermediate Python Projects</a></li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>学习一门编程语言的最好方式就是编写大量代码，并阅读大量代码：</p><ul><li><a href="http://code.activestate.com/recipes/langs/python/" target="_blank" rel="noopener">Python Cookbook</a> 是一本极具价值的“烹饪法”与提示的集合，它介绍了如何通过 Python 解决某些特定类型的问题。</li><li><a href="http://pymotw.com/2/contents.html" target="_blank" rel="noopener">Python Module of the Week</a> 是另一本优秀的<a href="https://bop.mol.uno/stdlib.md#stdlib" target="_blank" rel="noopener">标准库</a>必读指南。</li></ul><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><ul><li><a href="http://docs.python-guide.org/en/latest/" target="_blank" rel="noopener">The Hitchhiker’s Guide to Python!</a></li><li><a href="https://github.com/amontalenti/elements-of-python-style" target="_blank" rel="noopener">The Elements of Python Style</a></li><li><a href="http://slott-softwarearchitect.blogspot.ca/2013/06/python-big-picture-whats-roadmap.html" target="_blank" rel="noopener">Python Big Picture</a></li><li><a href="http://www.jeffknupp.com/writing-idiomatic-python-ebook/" target="_blank" rel="noopener">“Writing Idiomatic Python” ebook</a> （付费）</li></ul><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul><li><a href="https://github.com/realpython/discover-flask" target="_blank" rel="noopener">Full Stack Web Development with Flask</a></li><li><a href="http://www.pyvideo.org/" target="_blank" rel="noopener">PyVideo</a></li></ul><h2 id="问与答"><a href="#问与答" class="headerlink" title="问与答"></a>问与答</h2><ul><li><a href="http://docs.python.org/3/howto/doanddont.html" target="_blank" rel="noopener">Official Python Dos and Don’ts</a></li><li><a href="http://www.python.org/doc/faq/general/" target="_blank" rel="noopener">Official Python FAQ</a></li><li><a href="http://norvig.com/python-iaq.html" target="_blank" rel="noopener">Norvig’s list of Infrequently Asked Questions</a></li><li><a href="http://dev.fyicenter.com/Interview-Questions/Python/index.html" target="_blank" rel="noopener">Python Interview Q &amp; A</a></li><li><a href="http://stackoverflow.com/questions/tagged/python" target="_blank" rel="noopener">StackOverflow questions tagged with python</a></li></ul><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul><li><a href="http://stackoverflow.com/q/101268/4869" target="_blank" rel="noopener">Hidden features of Python</a></li><li><a href="http://www.reddit.com/r/Python/comments/19dir2/whats_the_one_code_snippetpython_tricketc_did_you/" target="_blank" rel="noopener">What’s the one code snippet/python trick/etc did you wish you knew when you learned python?</a></li><li><a href="http://www.awaretek.com/tutorials.html" target="_blank" rel="noopener">Awaretek’s comprehensive list of Python tutorials</a></li></ul><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>如果你遇到了一个 Python 问题，但不知道该问谁，那么 <a href="http://mail.python.org/mailman/listinfo/tutor" target="_blank" rel="noopener">python-tutor list</a> 是你提问的最佳场所。</p><p>请确保你会自己做你的家庭作业，你会首先尝试自己解决问题，同时，还要会<a href="http://catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">问聪明的问题</a>。</p><h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><p>如果你希望了解 Python 世界的最新动态，那就跟随 <a href="http://planet.python.org/" target="_blank" rel="noopener">Official Python Planet</a> 的脚步吧。</p><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><p><a href="http://pypi.python.org/pypi" target="_blank" rel="noopener">Python 库索引</a>中包含了大量开源的库，你可以在你自己的程序中使用它们。</p><p>要想了解如何安装并使用这些库，你可以使用 <a href="http://www.pip-installer.org/en/latest/" target="_blank" rel="noopener">pip</a>。</p><h2 id="创建一个网站"><a href="#创建一个网站" class="headerlink" title="创建一个网站"></a>创建一个网站</h2><p>学习使用 <a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a> 来创建你自己的网站。下面这些资源有助于你开始学习：</p><ul><li><a href="http://flask.pocoo.org/docs/quickstart/" target="_blank" rel="noopener">Flask Official Quickstart</a></li><li><a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world" target="_blank" rel="noopener">The Flask Mega-Tutorial</a></li><li><a href="https://github.com/mitsuhiko/flask/tree/master/examples" target="_blank" rel="noopener">Example Flask Projects</a></li></ul><h2 id="图形软件"><a href="#图形软件" class="headerlink" title="图形软件"></a>图形软件</h2><p>假设你希望使用 Python 来创建你自己的图形程序。这可以通过采用一个 GUI（Graphical User Interface，图形用户界面）库和它们的 Python 绑定来实现。绑定是允许你用 Python 编写你自己的程序，然后使用它们在 C 或 C++ 或其它语言写编写的库。</p><p>使用 Python 的 GUI 有许多选择：</p><ul><li>Kivy<ul><li><a href="http://kivy.org/" target="_blank" rel="noopener">http://kivy.org</a></li></ul></li><li>PyGTK<ul><li>这是 GTK+ 工具包的 Python 绑定，它是构建 GNOME 的基础。GTK+ 有许多奇怪的用法，但是你一旦习惯了使用它，就能很快的创建出你的 GUI 应用。Glade 图形界面设计工具是不可或缺的。它的文档至今仍在不断改进。GTK+ 在 GNU/Linux 下能够良好工作，但是它针对 Windows 平台的移植工作尚未完成。你可以使用 GTK+ 创建免费或专有的软件。要想开始使用，请阅读 <a href="http://www.pygtk.org/tutorial.html" target="_blank" rel="noopener">PyGTK 教程</a>。</li></ul></li><li>PyQt<ul><li>这是 Qt 工具包的 Python 绑定，它是构建 KDE 的基础。 受益于 Qt Designer 与令人惊讶的 Qt 文档，Qt 十分容易使用也十分强大。如果你希望创建一款开源（GPL）软件，你可以免费使用 PyQt，不过如果你想创建专有的闭源软件，你需要购买它。从 Qt 4.5 开始你可以使用它来创建不采用 GPL 授权的软件。要想开始使用，请阅读 <a href="http://qt-project.org/wiki/PySide" target="_blank" rel="noopener">PySide</a>。</li></ul></li><li>wxPython<ul><li>这是 wxWidgets 工具包的 Python 绑定。wxPython 有一个与之相关的学习曲线。不过，它非常便携，并且可以运行在 GNU/Linux、Windwos、Mac、甚至是嵌入式平台中。有许多 IDE 可以采用 wxPython，并且包含了 GUI 设计工具，例如 <a href="http://spe.pycs.net/" target="_blank" rel="noopener">SPE (Stani’s Python Editor)</a> 还有 <a href="http://wxglade.sourceforge.net/" target="_blank" rel="noopener">wxGlade</a> GUI 构建工具。你可以使用 wxPython 来创建免费或专有的软件。要想开始使用，请阅读<a href="http://zetcode.com/wxpython/" target="_blank" rel="noopener">wxPython 教程</a>。</li></ul></li></ul><h3 id="GUI-工具总结"><a href="#GUI-工具总结" class="headerlink" title="GUI 工具总结"></a>GUI 工具总结</h3><p>想要了解更多的选择，可以参阅 <a href="http://www.python.org/cgi-bin/moinmoin/GuiProgramming" target="_blank" rel="noopener">GuiProgramming wiki page at the official python website</a>。</p><p>不幸的是，Python 没有一款标准 GUI 工具。我建议你根据你的实际情况从上面列出的工具中进行挑选。第一个因素是你是否愿意为使用任何 GUI 工具付费。第二个因素是你希望你的程序只在 Windwos 上运行，还是在 Mac 和 GNU/Linux 上运行，还是在它们三者之上都能运行。第三个因素，如果 GNU/Linux 是目标平台，那你是要做 KDE 用户还是 GNOME 用户。</p><p>有关更详尽且更全面的分析，请参阅 <a href="http://archive.pythonpapers.org/ThePythonPapersVolume3Issue1.pdf" target="_blank" rel="noopener">‘The Python Papers, Volume 3, Issue 1’ (PDF)</a> 的第 26 页。</p><h2 id="各种实现"><a href="#各种实现" class="headerlink" title="各种实现"></a>各种实现</h2><p>编程语言主要有两部分——语言与软件。语言是你<em>如何</em>编写，软件是你<em>怎样</em>实际运行我们的程序。</p><p>我们一直在使用 <em>CPython</em> 软件来运行我们的程序。它被成为 CPython 是因为它是使用 C 语言编写的，同时它也是<em>经典的（Classical） Python 解释器</em>。</p><p>还有其他软件可以运行你的 Python 程序：</p><ul><li><a href="http://www.jython.org/" target="_blank" rel="noopener">Jython</a><ul><li>在 Java 平台上运行的 Python 实现。这意味着你可以在 Python 语言中使用 Java 的库与类，反之亦然。</li></ul></li><li><a href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython" target="_blank" rel="noopener">IronPython</a><ul><li>在 .NET 平台上运行的 Python 实现。这意味着你可以在 Python 语言中使用 .NET 的库与类，反之亦然</li></ul></li><li><a href="http://codespeak.net/pypy/dist/pypy/doc/home.html" target="_blank" rel="noopener">PyPy</a><ul><li>用 Python 编写的 Python 实现！这是一项研究项目，旨在于使其能快速且方便的改进解释器，因为解释器本身就是用动态语言编写的了（而不是采用上述三种 C、Java、C# 等动态语言来编写）。</li></ul></li></ul><p>还有其它诸如 <a href="http://common-lisp.net/project/clpython/" target="_blank" rel="noopener">CLPython</a>——采用 Common Lisp 编写的 Python 实现，和<a href="http://brython.info/" target="_blank" rel="noopener">Brython</a> ，它在 JavaScript 解释器之上实现，意味着你可以使用 Python（而非 JavaScript）编写你的 Web 浏览器（“Ajax”）程序。</p><p>上述这些实现每一种都有其大有作为的专门领域。</p><h2 id="函数式编程（面向高阶读者）"><a href="#函数式编程（面向高阶读者）" class="headerlink" title="函数式编程（面向高阶读者）"></a>函数式编程（面向高阶读者）</h2><p>当你开始编写更加庞大的程序时，你应该清楚了解更多关于使用函数的方式来进行编程，而不是我们在<a href="https://bop.mol.uno/14.oop.html#oop" target="_blank" rel="noopener">《面向对象编程》章节中</a>所学习的基于类的方式进行编程：</p><ul><li><a href="http://docs.python.org/3/howto/functional.html" target="_blank" rel="noopener">Functional Programming Howto by A.M. Kuchling</a></li><li><a href="http://www.diveintopython.net/functional_programming/index.html" target="_blank" rel="noopener">Functional programming chapter in ‘Dive Into Python’ book</a></li><li><a href="http://ua.pycon.org/static/talks/kachayev/index.html" target="_blank" rel="noopener">Functional Programming with Python presentation</a></li><li><a href="https://github.com/Suor/funcy" target="_blank" rel="noopener">Funcy library</a></li><li><a href="http://toolz.readthedocs.org/en/latest/" target="_blank" rel="noopener">PyToolz library</a></li></ul><p>阅读此教程可以加强你与 Python 的兴趣 — — 也许你更渴望用 Python 去解决你现实中的问题。从哪里去提升呢？</p><p>本教程只是 Python 众多文档中的一页。更多的文档你可以从这里获取：</p><ul><li><p><a href="https://docs.python.org/3/library/index.html#library-index" target="_blank" rel="noopener">Python 的标准库</a>:</p><p>你需要完整地浏览本指南，它（简洁地）阐述了语言中的类型、函数和标准库中的模型。本 Python 基础发行手册包括了 <em>大量</em> 额外的代码。它们是 Unix 的邮箱、通过 HTTP 检索文档、创建随机数、解析命令行选项、创建 CGI 程序、压缩数据等等项目。参考过这些项目可以让你在遇到类似的问题知道什么能用得上。</p></li><li><p><a href="https://docs.python.org/3/installing/index.html#installing-index" target="_blank" rel="noopener">安装 Python 的模块</a> 解释了如何去安装一些其他 Python 用户完成的模块。</p></li><li><p><a href="https://docs.python.org/3/reference/index.html#reference-index" target="_blank" rel="noopener">Python 语言的参考资料</a>: 一些关于 Python 的语法和语义的详细解释。它也许生涩难懂，但对你详细地了解到该语言的本体非常有用。</p></li></ul><p>关于 Python 的更多学习资源:</p><ul><li><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org</a>: Python 主网站，它包含了代码、文档和 Python相关网站的链接。这个网站在全世界各地有很多镜像，比如欧洲、日本和澳大利亚，你可以访问镜像网站来获取更快速的体验，当然这取决于你的地理位置。</li><li><a href="https://docs.python.org/" target="_blank" rel="noopener">https://docs.python.org</a>: 可以快速访问 Python 文档。</li><li><a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org</a>: Python Package Index 也被叫做 Cheese Shop，提供了一个Python模块下载列表，这些模块都是由 Python 用户所创建的。如果你想发布的你代码，并期望别人也能找到，你可以在这里注册。</li><li><a href="https://code.activestate.com/recipes/langs/python/" target="_blank" rel="noopener">https://code.activestate.com/recipes/langs/python/</a>: Python Cookbook 包含了大量的代码示例、模块用法和实用的脚本。特别值得注意的是，有一本书名字也叫 Python Cookbook (O’Reilly &amp; Associates, ISBN 0-596-00797-3.)</li><li><a href="http://www.pyvideo.org/" target="_blank" rel="noopener">http://www.pyvideo.org</a> 收集了来自会议和用户组讨论的 Python 相关的视频。</li><li><a href="https://scipy.org/" target="_blank" rel="noopener">https://scipy.org</a>: Python 的科学项目包括用于快速阵列计算和操作的模块，再加上诸如线性代数、傅立叶变换、非线性解算器、随机数分布、统计分析等诸如此类的软件包。</li></ul><p>对于 Python 的相关问题，你可以发布到新闻组 <em>comp.lang.python</em> ，或者投稿到 <a href="mailto:python-list%40python.org" target="_blank" rel="noopener">python-list@python.org</a>. 新闻组和投稿都是自动转发的，因此你提交到一个那里，就会自动转发给其他人。每天都会有上百个提交，包括问问题（和回答问题）、提出建议的新特性和发布新模块等等。投稿地址在 <a href="https://mail.python.org/pipermail/" target="_blank" rel="noopener">https://mail.python.org/pipermail/</a>.</p><p>在提交问题前，一定要先检查 <a href="https://docs.python.org/3/faq/index.html#faq-index" target="_blank" rel="noopener">Frequently Asked Questions</a> (也被称为FAQ)。FAQ回答了很多问题，而且有的问题会反复出现。所以里面很可能已经包含了你问题的解决方法。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://bop.mol.uno/19.what_next.html#fn_2" target="_blank" rel="noopener">简明python</a></li><li><a href="https://docs.python.org/3/tutorial/whatnow.html" target="_blank" rel="noopener">python官方文档</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;迈出下一步&quot;&gt;&lt;a href=&quot;#迈出下一步&quot; class=&quot;headerlink&quot; title=&quot;迈出下一步&quot;&gt;&lt;/a&gt;迈出下一步&lt;/h1&gt;&lt;p&gt;如果到现在你已经阅读过本书并且编写了许多程序，那么你一定已经开始熟悉并且习惯 Python 了。或许你已经创建了一些
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python面向对象编程 </title>
    <link href="https://yo42.github.io/2018/09/09/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://yo42.github.io/2018/09/09/python面向对象编程/</id>
    <published>2018-09-09T06:09:14.543Z</published>
    <updated>2018-09-09T09:34:16.804Z</updated>
    
    <content type="html"><![CDATA[<p>类就是一组数据和函数的集合。创建了一个新的类意味着创建了一个全新的对象 <em>类型</em>，也就允许我们创建新的此类型的 <em>实例</em>。每个类实例都带有属性以维护其状态。同样也有方法（在它自己的类中定义）来修改这些状态。</p><p>相比其他编程语言，使用 Python 的类机制创建类是最方便简洁的。Python 的类机制结合了 C++ 和 Modua-3 的机制，同时也符合所有面向对象编程的标准：类继承机制允许有多个基类，一个派生的类可以覆盖基类的任意方法，每个方法也可以调用基类的同名方法。每个对象都可以包含任意数量和类型的数据。与模块一样，类也具有 Python 动态的特性：即时创建，创建后仍可修改。</p><p>在 C++ 的概念中，常规的类成员都是 <em>公共（public）</em> 的（例外的情况请看 <a href="https://docs.python.org/3/tutorial/classes.html#tut-private" target="_blank" rel="noopener">Private Variables</a> 这一节）成员函数都是 <em>虚（virtual）</em> 的。 到了 Modula-3 中，我们没有从其自身的方法中引用对象成员的快速写法：方法函数声明时要在第一参数中标明对象，这样就会在调用时隐式的调用。在 Smalltalk 中，类本身就是对象。同时还有导入和重命名语法。但不同于 C++ 和 Modula-3，它的内置类型可以直接作为基类由用户进行扩展。同样，它也有类似 C++ 的地方，大部分有特殊语法的内置操作符（算术运算符，下标等等）都可以被类实例重定义。</p><h2 id="面向对象技术简介"><a href="#面向对象技术简介" class="headerlink" title="面向对象技术简介"></a>面向对象技术简介</h2><ul><li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong>类变量或者实例变量用于处理类及其实例对象的相关的数据。</li><li><strong>方法重载：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重载。</li><li><strong>实例变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li><li><strong>方法：</strong>类中定义的函数。</li><li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li></ul><h3 id="Python-作用域与命名空间"><a href="#Python-作用域与命名空间" class="headerlink" title="Python 作用域与命名空间"></a>Python 作用域与命名空间</h3><p>介绍类之前，我必须先向你介绍一下 Python 的作用域规则。类定义在命名空间中有一些非常聪明的技巧，而且你需要知道作用域和命名空间是如何工作的这样才能完全理解它做了什么。顺便一提，本节的知识对任何高级的 Python 编程都很！有！用！</p><p>让我们先从几个定义开始。</p><p><em>namespace（命名空间）</em> 是一个从名字到对象的映射。大部分命名空间当前都由 Python 字典实现，但一般情况下基本不会去关注它们（除了要面对性能问题时），而且也有可能在将来更改。下面是几个命名空间的例子：存放内置函数的集合（里面含有 <a href="https://docs.python.org/3/library/functions.html#abs" target="_blank" rel="noopener"><code>abs()</code></a> 这样的函数，和其他的内置名称）；模块中的全局名称；函数调用中的本地名称。从某种意义上说，某对象的的属性集合也是一种命名空间的形式；比如，两个不同的模块都可能定义了一个 <code>maximize</code> 的函数，为了不引起混乱用户必须用模块名作为前缀修饰一下。</p><p>顺便一提， 接下来所有跟在 <code>.</code> 后面的单词我都称其为 <em>attribute（属性）</em>，比如， <code>z.real</code> 中的 <code>real</code> 就是对象 <code>z</code> 的一个属性。严格来说，引用模块中的名称就是属性引用： <code>modname.funcname</code> 中的 <code>modname</code> 是一个模块对象，<code>funcname</code> 自然就是它的一个属性了。还有一种在模块的属性与本模块的全局名称之间恰好发生了一个直接的映射的情况：它们共享了同一个命名空间！<a href="https://docs.python.org/3/tutorial/classes.html#id2" target="_blank" rel="noopener">[1]</a>。</p><p>属性可以是只读的，也可以是可写的。在后一种情况中，可以指定某个属性某些内容。如果模块属性可写：你可以用 <code>modname.the_answer = 42</code> 来指定。可写的属性也同样可以被 <a href="https://docs.python.org/3/reference/simple_stmts.html#del" target="_blank" rel="noopener"><code>del</code></a> 语句删除。 例如， <code>del modname.the_answer</code> 将会删除掉 <code>modname</code> 的 <code>the_answer</code> 属性。</p><p>命名空间会在不同时刻被创建，也会拥有不同的命名空间。命名空间中包含着在 Python 解释器启动之初创建的内置名称，并且永远不会被删除。模块中的全局命名空间也会在模块被读入时创建，一般情况下也会持续到解释器退出。声明的执行由上层解释器调用，不管是从文件中读入还是交互式的，模块中包含最多的是一个叫 <a href="https://docs.python.org/3/library/__main__.html#module-__main__" target="_blank" rel="noopener"><code>__main__</code></a> 的东西，每个模块都有自己的全局命名空间（实际上内置名称也在模块中存在，它们被称为 <a href="https://docs.python.org/3/library/builtins.html#module-builtins" target="_blank" rel="noopener"><code>builtins</code></a>.) ）。</p><p>函数的本地命名空间在函数被调用时创建，函数返回或抛出异常时但没在函数内处理时删除。（实际上，忘记处理可能是描述实际所发生的了什么的更好的方式..）当然，递归调用每一次都有自己的本地命名空间。</p><p><em>scope (作用域)</em> 是一段 Python 程序的文本区域，处于其中的命名空间是可直接访问的。「可直接访问」在这里的意思是非限定性引用的某名称会尝试在此命名空间中查找。</p><p>尽管作用域一般都是静态的，不过也常常被动态的用。在任何执行的时候，每段代码都至少有3个嵌套的作用域可直接访问。</p><ul><li>最内层的作用域，会被首先搜索，里面放的是本地名称。</li><li>任何处于函数内的作用域，会从在最接近它的作用域中开始寻找，这层的命名空间中放的是非本地但也非全局的名称。</li><li>倒数第二层作用域是包含着当前模块的全局名称。</li><li>最外层作用域（最后搜索的一层）是包含内置名称的命名空间。</li></ul><p>如果某名称是在全局进行的声明，那么所有的引用和分配都会直接导向中间的这层包含模块的全局名称的作用域中。要想让最内层的作用域重新绑定一个在外层出现过的变量，我们可以用 <a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" target="_blank" rel="noopener"><code>nonlocal</code></a> 声明来完成；如果不声明 nonlocal (非本地)，这些变量则都是只读的（任何尝试写入这种变量的行为都将会创建一个 <em>全新</em> 的本地变量，不会对最外层的那个有丝毫影响。）</p><p>通常情况下，本地作用域引用着当前函数的本地名称。外层的函数引用的是和全局作用域一样的命名空间：模块的命名空间。类定义放置在本地作用域的另一个命名空间中。</p><p>意识到作用域取决于文本是很重要的：某个模块中所定义的函数的全局作用域是它所在的模块的命名空间，不管这函数来自什么地方或以什么别名被调用。换句话说，实际的名称搜索是在动态的情况下完成的，也就是运行时 — 但，语言定义的发展是朝着静态命名去的，在 「编译」阶段完成，所以不要试图依赖任何动态的命名！（实际上，本地变量已经是静态定义的了。）</p><p>Python 中也有皮一下的地方 – 如果不用 <a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 声明，那么所分配的变量总是在它所处位置的最内层。分配不会复制数据 – 它们只是把名字绑定到对象上。对删除来讲也是一样： <code>del x</code> 声明会把 <code>x</code> 从本地作用域所引用的命名空间中移除绑定。实际上，所有引入新名称的操作都会使用本地作用域：尤其是 <a href="https://docs.python.org/3/reference/simple_stmts.html#import" target="_blank" rel="noopener"><code>import</code></a> 声明和绑定在模块中的函数定义或者在本地作用域的函数名称。</p><p><a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 声明被用在要指定某个特殊的变量要在全局作用域中存活且应该在这重新被绑定的情况下；<a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" target="_blank" rel="noopener"><code>nonlocal</code></a>声明则是用在指示某变量存在于某封闭的作用域且应该在这被重新绑定的情况下。</p><h3 id="作用域和命名空间例子"><a href="#作用域和命名空间例子" class="headerlink" title="作用域和命名空间例子"></a>作用域和命名空间例子</h3><p>用个小例子来演示下如何引用不同的作用域和命名空间，以及 <a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 和 <a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" target="_blank" rel="noopener"><code>nonlocal</code></a> 是如何影响变量绑定的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_local</span><span class="params">()</span>:</span></span><br><span class="line">        spam = <span class="string">"local spam"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_nonlocal</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> spam</span><br><span class="line">        spam = <span class="string">"nonlocal spam"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_global</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">global</span> spam</span><br><span class="line">        spam = <span class="string">"global spam"</span></span><br><span class="line"></span><br><span class="line">    spam = <span class="string">"test spam"</span></span><br><span class="line">    do_local()</span><br><span class="line">    print(<span class="string">"After local assignment:"</span>, spam)</span><br><span class="line">    do_nonlocal()</span><br><span class="line">    print(<span class="string">"After nonlocal assignment:"</span>, spam)</span><br><span class="line">    do_global()</span><br><span class="line">    print(<span class="string">"After global assignment:"</span>, spam)</span><br><span class="line"></span><br><span class="line">scope_test()</span><br><span class="line">print(<span class="string">"In global scope:"</span>, spam)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">After local assignment: test spam</span><br><span class="line">After <span class="keyword">nonlocal</span> assignment: <span class="keyword">nonlocal</span> spam</span><br><span class="line">After <span class="keyword">global</span> assignment: <span class="keyword">nonlocal</span> spam</span><br><span class="line">In <span class="keyword">global</span> scope: <span class="keyword">global</span> spam</span><br></pre></td></tr></table></figure><p>注意 <em>本地</em> 的分配并未改变 <em>scope_test</em> 中绑定的 <em>spam</em>，而 <a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" target="_blank" rel="noopener"><code>nonlocal</code></a> 标明过的分配则改变了 <em>scope_test</em> 绑定的 <em>spam</em>，<a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 则更改的是模块层面的绑定。</p><p>不知道你有没有注意到，我们在 <a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 之前是没有绑定 <em>spam</em> 的。</p><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><h4 id="类定义语法"><a href="#类定义语法" class="headerlink" title="类定义语法"></a>类定义语法</h4><p>类定义的形式很简单像这样既可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>类的定义与函数定义（<a href="https://docs.python.org/3/reference/compound_stmts.html#def" target="_blank" rel="noopener"><code>def</code></a> statements）差不多，在它们生效前我们需要预先执行这些定义（你也可以在  <a href="https://docs.python.org/3/reference/compound_stmts.html#if" target="_blank" rel="noopener"><code>if</code></a>分支或函数内部声明类）。</p><p>在实践中，类定义内的声明通常是函数定义，不过也有其他的声明，而且还挺有用 – 我们之后再谈这个。在类中定义的函数通常有一个特有的参数列表，指代是作为方法调用的 — 同样我们稍后再解释。</p><p>进入到类定义后，会创建一个新的命名空间作为本地作用域 — 也因此，所有的本地变量的指定都会进到这个新的作用域里。尤其是定义函数所绑定的是此函数的名字。</p><p>类定义正常结束时，一个新的 <em>类对象</em> 就被创建出来了。这是类定义在命名空间中最基本的一层包装；我们在下一节中详细讨论这个。原始的本地作用域（在进入类定义前生效的那个）会被重新安装，然后将类名字（就是上例中的 <code>ClassName</code>）绑定到这个类对象上。</p><h4 id="类编码风格"><a href="#类编码风格" class="headerlink" title="类编码风格"></a>类编码风格</h4><p>类名应采用驼峰命名法，即类名中的每个单词首字母都大写，而不使用下划线。实例名和模块名都采用小写的格式，并且在单词之间加上下划线。</p><h4 id="类对象-1"><a href="#类对象-1" class="headerlink" title="类对象"></a>类对象</h4><p>类对象支持两种操作：属性引用和实例化。</p><p><em>Attribute references （属性引用）</em> 使用的是 Python 中标准的属性引用语法： <code>obj.name</code>。有效的属性名都会在此类创建时被塞入的命名空间中。所以，如果一个类定义看起来像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    <span class="string">"""简单的例子"""</span></span><br><span class="line">    i = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><p><code>MyClass.i</code> 和 <code>MyClass.f</code> 都是有效的属性引用，分别返回的是一个整数和一个函数对象。类属性同样是可分配的，所以你可以更改 <code>MyClass.i</code> 的值。<code>__doc__</code> 同样也是一个有效属性，返回的是此类的文档字符串： <code>&quot;简单的例子&quot;</code>。</p><p>类的 <em>实例化</em> 类似函数的形式。把它假装成一个无参数且返回的是此类实例的函数就行。看代码（用的上面那个类）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = MyClass()</span><br></pre></td></tr></table></figure><p>这样就创建一个新的类 <em>实例</em> 并把它分配给了本地变量 <code>x</code>。</p><p>实例化操作（「调用」类对象）创建的是一个空对象。大多数类都想在创建时自定义初始化状态。所以类通常也会定义一个名为 <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.data = []</span><br></pre></td></tr></table></figure><p>当某类定义了 <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a>  方法，类实例化时就会为新的类实例自动调用 <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 方法。所以，我们不需要做任何改变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = MyClass()</span><br></pre></td></tr></table></figure><p>当然，<a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 方法也可以有参数变得更加易用。需要参数时，在参数实例化时给定的参数会传递到 <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, realpart, imagpart)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.r = realpart</span><br><span class="line"><span class="meta">... </span>        self.i = imagpart</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = Complex(<span class="number">3.0</span>, <span class="number">-4.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.r, x.i</span><br><span class="line">(<span class="number">3.0</span>, <span class="number">-4.5</span>)</span><br></pre></td></tr></table></figure><h4 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h4><p>那么..我们要用这个实例对象干什么呢？最基本的操作时属性引用。我们现在有两种有效的属性名：数据属性和方法。</p><p><em>data attributes（数据属性）</em> 等同于 Smalltalk 中的「实例变量」，以及 C++ 中的 「数据成员」。数据属性不需要提前声明；就像本地变量一样，它们会在第一次分配时传播到已有的命名空间中。举个例子，假设我们已经创建了 <code>MyClass</code> 的实例 <code>x</code>，下面的代码会打印出 <code>16</code>且不留下痕迹：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x.counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> x.counter &lt; <span class="number">10</span>:</span><br><span class="line">    x.counter = x.counter * <span class="number">2</span></span><br><span class="line">print(x.counter)</span><br><span class="line"><span class="keyword">del</span> x.counter</span><br></pre></td></tr></table></figure><p>另一种实例属性引用是 <em>method (方法)</em>。一个方法也就是一个 「属于」某个对象的函数。（在 Python 中，方法一词并不被类实例独占：其他对象属性也同样具有方法。比如，列表对象也有如 <code>append</code>, <code>insert</code>, <code>remove</code>, <code>sort</code> 的方法。不过，接下来的讨论中我们所说的方法只指代类实例对象中的方法，除非特别指明。）</p><p>实例对象的有效方法名依赖于它的类。基于定义，所有是函数对象的类属性定义都会等同于它所实例化后的方法。所以在我们的例子中，<code>x.f</code> 是一个有效的方法引用，因为 <code>MyClass.f</code> 就是一个函数，但 <code>x.i</code> 则不是，因为 <code>MyClass.i</code> 就不是。但 <code>x.f</code> 并不是 <code>MyClass.f</code> – 在这里它变成了 <em>方法对象</em> 而不是函数对象。</p><h4 id="方法对象"><a href="#方法对象" class="headerlink" title="方法对象"></a>方法对象</h4><p>通常，绑定后可以立即调用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.f()</span><br></pre></td></tr></table></figure><p>在 <code>MyClass</code> 例子中，会返回一个字符串 <code>&quot;hello world&quot;</code>。不过，我们并不需要立即调用：<code>x.f</code> 是一个方法对象，可以被存储下来并且在任何其他时间调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xf = x.f</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(xf())</span><br></pre></td></tr></table></figure><p>将会一直打印 <code>hello world</code>。</p><p>调用方法时到底发生了什么？你可能注意到了，上面的 <code>x.f()</code> 调用并没有写参数，即使我们定义 <code>f()</code> 时指定了一个参数。那个函数呢？没错，如果没有足够的函数所需的参数 Python 会抛出一个异常 – 即使这参数可能实际并没有用到。</p><p>聪明的你，可能已经猜到了答案：关于方法最特殊的一件事就是实例对象会传递第一个参数到函数中。在我们的例子中， <code>x.f()</code> 实际上等同于 <code>MyClass.f(x)</code>。通俗点讲，调用一个有 <em>n</em> 个参数的方法等同于调用在这些参数前插入了一个方法的实例作为第一个参数的函数。</p><p>如果仍然不明白方法是怎么工作的，我们了解下实现过程可能会有些帮助。当一个引用一个实例的非数据属性时，实例对象类会首先被搜索。如果这个名字指代的是一个有些的类属性而且还是一个函数对象，那方法对象就会被创建用于包装（指针指向）实例对象和函数对象在同一个抽象对象中：这就是方法对象的形成。当带着参数调用方法对象时，会结合实例对象和参数列表创建一个新的参数列表，方法对象所调用的就是这个新的参数列表。</p><h4 id="类和实例变量"><a href="#类和实例变量" class="headerlink" title="类和实例变量"></a>类和实例变量</h4><p>通俗来讲，实例变量是每个实例独有的数据，而类变量则是会让所有此类的实例所共享的方法和属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line"></span><br><span class="line">    kind = <span class="string">'canine'</span>         <span class="comment"># 类变量会在所有实例里共享</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name    <span class="comment"># 每个实例都有独立的实例变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog(<span class="string">'Fido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Dog(<span class="string">'Buddy'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.kind                  <span class="comment"># 所有 dog 都会共享</span></span><br><span class="line"><span class="string">'canine'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.kind                  <span class="comment"># 同上</span></span><br><span class="line"><span class="string">'canine'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.name                  <span class="comment"># d 所独有的</span></span><br><span class="line"><span class="string">'Fido'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.name                  <span class="comment"># e 所独有的</span></span><br><span class="line"><span class="string">'Buddy'</span></span><br></pre></td></tr></table></figure><p>在 <a href="https://docs.python.org/3/tutorial/classes.html#tut-object" target="_blank" rel="noopener">A Word About Names and Objects</a> 的讨论中，共享的数据可能在调用 <a href="https://docs.python.org/3/glossary.html#term-mutable" target="_blank" rel="noopener">mutable</a> 可变对象（比如列表和字典）时有意料之外的效果。举个例子， 下面写的 <em>tricks</em> 列表就不应该作为一个类变量存在，因为同一个列表会在所有的 <em>Dog</em>实例中共享：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line"></span><br><span class="line">    tricks = []             <span class="comment"># 不要作为类变量误用。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span><span class="params">(self, trick)</span>:</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog(<span class="string">'Fido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Dog(<span class="string">'Buddy'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.add_trick(<span class="string">'roll over'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.add_trick(<span class="string">'play dead'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.tricks                <span class="comment"># 我们不希望它在所有 dog 中共享。</span></span><br><span class="line">[<span class="string">'roll over'</span>, <span class="string">'play dead'</span>]</span><br></pre></td></tr></table></figure><p>正确的设计应该是用实例变量代替：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.tricks = []    <span class="comment"># 每只 dog 都有一个全新的列表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span><span class="params">(self, trick)</span>:</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog(<span class="string">'Fido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Dog(<span class="string">'Buddy'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.add_trick(<span class="string">'roll over'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.add_trick(<span class="string">'play dead'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.tricks</span><br><span class="line">[<span class="string">'roll over'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.tricks</span><br><span class="line">[<span class="string">'play dead'</span>]</span><br></pre></td></tr></table></figure><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>数据属性会覆盖同名的方法属性；为了避免命名冲突（冲突的话在大型程序中往往会引起很难查找的 bug），用一些大家都遵守的约定来最小化冲突的机会是非常明智的。一般有大写方法名字，使用独特的短字符串来给数据属性加上前缀（也可以是仅仅一个下划线），或者使用动词命名方法，而使用名词命名数据属性。</p><p>数据属性不光可以被此对象的用户（「客户」）一方使用，我们在方法内同样可以使用。换句话说，类不能用于实现纯粹的抽象数据类型。实际上，在 Python 中强制数据隐藏起来也是不可能的 — 它们只是在约定。（换..换句话说， Python 中实现于 C 的部分可以做到完全的隐藏实现细节，也可以控制一个对象的访问；这一点可以用在用 C 写 Python 的扩展上）。</p><p>客户一方（就是创建了实例后再用）也应该小心地使用数据属性 — 因为有可能弄乱方法们维护的数据属性一致性。不过客户一方也可以添加自己的数据属性进去，只要避免影响到方法的有效性就行，也就是说避免命名冲突 — 再说一遍！避免命名冲突很！重！要！</p><p>Python 中并无在方法内快捷访问数据熟悉的途径（方法的也没有！）。因为这样可以提高可读性：这样就可以快速弄清楚本地变量和实例变量。</p><p>通常我们把方法的第一个参数命名为 <code>self</code>. 这只是一个约定： <code>self</code> 这个名字对 Python 来讲并无特殊含义。不过要注意，如果不遵守的话~，其他的 Python 程序猿可能会不知道你写的啥呦~，而且还可依据此来写一个 <em>class browser</em> 的程序</p><p>任何作为类属性定义的函数对象都会作为实例或类的方法。把相关的函数定义在类的文本域内并不是必须的：指定一个函数对象到类的本地变量中同样是 Ok 的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义在类外了...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> min(x, x+y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    f = f1</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">    h = g</span><br></pre></td></tr></table></figure><p><code>f</code>，<code>g</code>， <code>h</code> 都是类 <code>C</code> 的属性，全都是属性对象，同时也都是 <code>C</code> 实例的方法 — <code>h</code> 等同于 <code>g</code>。要注意，这里这种写法一般是为了让程序变得混乱。</p><p>使用 <code>self</code> 参数可以在方法内调用其他的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.data.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addtwice</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.add(x)</span><br><span class="line">        self.add(x)</span><br></pre></td></tr></table></figure><p>方法也可以像引用普通函数一样引用全局名称。与方法关联的全局作用域是包含着它的模块。（类永远不能作为全局作用域使用）若是有一个在方法中必须要用到全局数据的理由，那要遵守以下几点：其实只有一件事，全局作用域中引入的函数和模块可以使用，在全局作用域中的函数和类也可以使用。通常，全局作用域中的类所包含的方法都是它自己定义的，我们将在下一节找到几个合理的理由来解释为什么一个方法需要引用它自己的类。</p><p>每个值都是一个对象，也因此都有 <em>class</em> (也被称为 <em>type</em>)。这些东西都被放在了 <code>object.__class__</code> 中。</p><h3 id="使用-property"><a href="#使用-property" class="headerlink" title="使用 @property"></a>使用 @property</h3><p>在使用 <code>@property</code> 之前，让我们先来看一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exam</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        self._score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> val &lt; <span class="number">0</span>:</span><br><span class="line">            self._score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> val &gt; <span class="number">100</span>:</span><br><span class="line">            self._score = <span class="number">100</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._score = val</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Exam(<span class="number">60</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.get_score()</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.set_score(<span class="number">70</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.get_score()</span><br><span class="line"><span class="number">70</span></span><br></pre></td></tr></table></figure><p>在上面，我们定义了一个 Exam 类，为了避免直接对 <code>_score</code> 属性操作，我们提供了 get_score 和 set_score 方法，这样起到了封装的作用，把一些不想对外公开的属性隐蔽起来，而只是提供方法给用户操作，在方法里面，我们可以检查参数的合理性等。</p><p>这样做没什么问题，但是我们有更简单的方式来做这件事，Python 提供了 <code>property</code> 装饰器，被装饰的方法，我们可以将其『当作』属性来用，看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exam</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        self._score = score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> val &lt; <span class="number">0</span>:</span><br><span class="line">            self._score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> val &gt; <span class="number">100</span>:</span><br><span class="line">            self._score = <span class="number">100</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._score = val</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Exam(<span class="number">60</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score = <span class="number">90</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score</span><br><span class="line"><span class="number">90</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score = <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>在上面，我们给方法 score 加上了 <code>@property</code>，于是我们可以把 score 当成一个属性来用，此时，又会创建一个新的装饰器 <code>score.setter</code>，它可以把被装饰的方法变成属性来赋值。</p><p>另外，我们也不一定要使用 <code>score.setter</code> 这个装饰器，这时 score 就变成一个只读属性了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exam</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        self._score = score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Exam(<span class="number">60</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score = <span class="number">200</span>  <span class="comment"># score 是只读属性，不能设置值</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-676</span>-b0515304f6e0&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 e.score = 200</span><br><span class="line"></span><br><span class="line">AttributeError: can<span class="string">'t set attribute</span></span><br></pre></td></tr></table></figure><p><code>@property</code> 把方法『变成』了属性。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在面向对象编程中，当我们已经创建了一个类，而又想再创建一个与之相似的类，比如添加几个方法，或者修改原来的方法，这时我们不必从头开始，可以从原来的类<strong>派生</strong>出一个新的类，我们把原来的类称为<strong>父类</strong>或<strong>基类</strong>，而派生出的类称为<strong>子类</strong>，<strong>子类</strong>继承了<strong>父类</strong>的所有数据和方法。</p><ul><li>继承可以拿到父类的所有数据和方法，子类可以重写父类的方法，也可以新增自己特有的方法。</li><li>有了继承，才有了多态，不同类的对象对同一消息会作出不同的相应。</li></ul><p>当然，一个不支持继承的「类」不足以被称为类。在类的定义中，继承的语法是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(BaseClassName)</span>:</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>类名 <code>BaseClassName</code> 必须被定义在一个包含派生类 <code>DerivedClassName</code> 定义的作用域下。相较于直接使用基类名，任何其它表达式也是可以被填入的。这个特性经常被用到，比如，当基类被定义在其它模块中时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(modname.BaseClassName)</span>:</span></span><br></pre></td></tr></table></figure><p>派生类定义时的执行流程和基类相同。当一个类对象被创建，它会记录它的基类。这将被用于解析对象的属性：如果一个需要的属性不存在于当前类中，紧接着就会去基类中寻找。如果该基类也是从其他类派生出来的，那么相同的过程也会递归地被应用到这些类中。</p><p>实例化派生类也没有什么特别的： <code>DerivedClassName()</code> 就会创建类的一个新的实例。方法引用则按如下的方式被解析：首先在当前类中搜索对应的属性，然后沿着继承链往下搜索，如果找到了一个函数对象，那么这个方法引用就是可用的。</p><p>派生类可以重写基类的方法。因为方法在调用同一对象其它方法的时候没有什么特权，所以当派生类的实例调用某个基类的方法后，该基类的方法可能会再次调用派生类覆写的另一个基类方法。（对于 C++ 程序员而言， Python 中所有的方法都是 <code>virtual</code> 函数。）</p><p>派生类中重写的方法一般用于扩展同名的基类方法，而非简单的替换。 Python 中有一种简单的直接调用基类方法的方案：调用 <code>BaseClassName.methodname(self, arguments)</code> 即可。这在某些情景下也是有用的。（注意这个方法只有在基类 <code>BaseClassName</code> 在全局作用域下可以访问才能使用。）</p><p>Python 提供了两个判断继承关系的内建函数：</p><ul><li>使用 <a href="https://docs.python.org/3/library/functions.html#isinstance" target="_blank" rel="noopener"><code>isinstance()</code></a> 检查一个实例的类型：当且仅当 <code>obj.__class__</code> 是 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 或其它从 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 派生的类时， <code>isinstance(obj, int)</code> 才会返回 <code>True</code> 。</li><li>使用 <a href="https://docs.python.org/3/library/functions.html#issubclass" target="_blank" rel="noopener"><code>issubclass()</code></a> 检查类之间的继承关系：因为 <a href="https://docs.python.org/3/library/functions.html#issubclass" target="_blank" rel="noopener"><code>bool</code></a> 是 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的一个子类，所以 <code>issubclass(bool, int)</code> 返回 <code>True</code> 。然而，因为 <a href="https://docs.python.org/3/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> 不是 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的派生类，所以 <code>issubclass(float, int)</code> 返回 <code>False</code> 。</li></ul><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>Python 也支持多重继承。一个具有多个基类的类定义如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(Base1, Base2, Base3)</span>:</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>对于多数目的，在最简单的情况下，你可以认为搜索父类中继承的属性是深度优先，从左到右，而不是在继承结构中重叠的同一个类中搜索两次。因此，如果一个属性在 <code>DerivedClassName</code> 中没有找到，则在 <code>Base1</code> 中查找，再在 <code>Base1</code> 的基类中（递归地）查找，如果未能找到，则在 <code>Base2</code> 中查找，以此类推。</p><p>事实上，这个过程要稍稍更复杂一些；方法解析顺序是动态变化的，以支持合作调用 <a href="https://docs.python.org/3/library/functions.html#super" target="_blank" rel="noopener"><code>super()</code></a> 。这种方法在其他多继承语言中被称为调用下一方法，比单继承语言中的 super 调用更加强大。</p><p>动态排序是必要的，因为所有多重继承的情况都表现出一个或多个菱形关系（其中至少有一个父类可以通过最底层的多个路径访问）。例如，所有的类都继承自 <a href="https://docs.python.org/3/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> ，所以任何情况的多重继承都提供了不止一条的路径到达 <a href="https://docs.python.org/3/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> 。 为了避免基类被多次访问，动态算法保证在每个类中进行从左到右特定顺序的线性搜索，因此每个父类只被调用一次，并且这个方法是单调的（意味着类可以被子类化而不影响其的优先顺序）。 总之，这些特性使得设计具有多重继承的可靠的且可扩展的类成为可能。 更多细节请参考 <a href="https://www.python.org/download/releases/2.3/mro/" target="_blank" rel="noopener">https://www.python.org/download/releases/2.3/mro/</a>.</p><h4 id="你不知道的-super"><a href="#你不知道的-super" class="headerlink" title="你不知道的 super"></a>你不知道的 super</h4><p>在类的继承中，如果重定义某个方法，该方法会覆盖父类的同名方法，但有时，我们希望能同时实现父类的功能，这时，我们就需要调用父类的方法了，可通过使用 <code>super</code> 来实现，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Hello, I am %s.'</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Dog, self).greet()   <span class="comment"># Python3 可使用 super().greet()</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'WangWang...'</span></span><br></pre></td></tr></table></figure><p>在上面，Animal 是父类，Dog 是子类，我们在 Dog 类重定义了 <code>greet</code> 方法，为了能同时实现父类的功能，我们又调用了父类的方法，看下面的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog = Dog(<span class="string">'dog'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog.greet()</span><br><span class="line">Hello, I am dog.</span><br><span class="line">WangWang..</span><br></pre></td></tr></table></figure><p><code>super</code> 的一个最常见用法可以说是在子类中调用父类的初始化方法了，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b, c)</span>:</span></span><br><span class="line">        super(A, self).__init__(a, b)  <span class="comment"># Python3 可使用 super().__init__(a, b)</span></span><br><span class="line">        self.c = c</span><br></pre></td></tr></table></figure><h4 id="深入-super"><a href="#深入-super" class="headerlink" title="深入 super()"></a>深入 super()</h4><p>看了上面的使用，你可能会觉得 <code>super</code> 的使用很简单，无非就是获取了父类，并调用父类的方法。其实，在上面的情况下，super 获得的类刚好是父类，但在其他情况就不一定了，<strong>super 其实和父类没有实质性的关联</strong>。</p><p>让我们看一个稍微复杂的例子，涉及到多重继承，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter Base"</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave Base"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter A"</span></span><br><span class="line">        super(A, self).__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave A"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter B"</span></span><br><span class="line">        super(B, self).__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave B"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter C"</span></span><br><span class="line">        super(C, self).__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave C"</span></span><br></pre></td></tr></table></figure><p>其中，Base 是父类，A, B 继承自 Base, C 继承自 A, B，它们的继承关系是一个典型的『菱形继承』，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  Base</span><br><span class="line">  /  \</span><br><span class="line"> /    \</span><br><span class="line">A      B</span><br><span class="line"> \    /</span><br><span class="line">  \  /</span><br><span class="line">   C</span><br></pre></td></tr></table></figure><p>现在，让我们看一下使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = C()</span><br><span class="line">enter C</span><br><span class="line">enter A</span><br><span class="line">enter B</span><br><span class="line">enter Base</span><br><span class="line">leave Base</span><br><span class="line">leave B</span><br><span class="line">leave A</span><br><span class="line">leave C</span><br></pre></td></tr></table></figure><p>如果你认为 <code>super</code> 代表『调用父类的方法』，那你很可能会疑惑为什么 enter A 的下一句不是 enter Base 而是 enter B。原因是，<strong>super 和父类没有实质性的关联</strong>，现在让我们搞清 <code>super</code> 是怎么运作的。</p><h4 id="MRO-列表"><a href="#MRO-列表" class="headerlink" title="MRO 列表"></a>MRO 列表</h4><p>事实上，对于你定义的每一个类，Python 会计算出一个<strong>方法解析顺序（Method Resolution Order, MRO）列表</strong>，<strong>它代表了类继承的顺序</strong>，我们可以使用下面的方式获得某个类的 MRO 列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.mro()   <span class="comment"># or C.__mro__ or C().__class__.mro()</span></span><br><span class="line">[__main__.C, __main__.A, __main__.B, __main__.Base, object]</span><br></pre></td></tr></table></figure><p>那这个 MRO 列表的顺序是怎么定的呢，它是通过一个 <a href="https://www.python.org/download/releases/2.3/mro/" target="_blank" rel="noopener">C3 线性化算法</a>来实现的，这里我们就不去深究这个算法了，感兴趣的读者可以自己去了解一下，总的来说，一个类的 MRO 列表就是合并所有父类的 MRO 列表，并遵循以下三条原则：</p><ul><li>子类永远在父类前面</li><li>如果有多个父类，会根据它们在列表中的顺序被检查</li><li>如果对下一个类存在两个合法的选择，选择第一个父类</li></ul><h4 id="super-原理"><a href="#super-原理" class="headerlink" title="super 原理"></a>super 原理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">super</span><span class="params">(cls, inst)</span>:</span></span><br><span class="line">    mro = inst.__class__.mro()</span><br><span class="line">    <span class="keyword">return</span> mro[mro.index(cls) + <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>其中，cls 代表类，inst 代表实例，上面的代码做了两件事：</p><ul><li>获取 inst 的 MRO 列表</li><li>查找 cls 在当前 MRO 列表中的 index, 并返回它的下一个类，即 mro[index + 1]</li></ul><p>当你使用 <code>super(cls, inst)</code> 时，Python 会在 inst 的 MRO 列表上搜索 cls 的下一个类。</p><p>现在，让我们回到前面的例子。</p><p>首先看类 C 的 <code>__init__</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(C, self).__init__()</span><br></pre></td></tr></table></figure><p>这里的 self 是当前 C 的实例，self.<strong>class</strong>.mro() 结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[__main__.C, __main__.A, __main__.B, __main__.Base, object]</span><br></pre></td></tr></table></figure><p>可以看到，C 的下一个类是 A，于是，跳到了 A 的 <code>__init__</code>，这时会打印出 enter A，并执行下面一行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(A, self).__init__()</span><br></pre></td></tr></table></figure><p>注意，这里的 self 也是当前 C 的实例，MRO 列表跟上面是一样的，搜索 A 在 MRO 中的下一个类，发现是 B，于是，跳到了 B 的 <code>__init__</code>，这时会打印出 enter B，而不是 enter Base。</p><p>整个过程还是比较清晰的，关键是要理解 super 的工作方式，而不是想当然地认为 super 调用了父类的方法。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>事实上，<code>super</code> 和父类没有实质性的关联。</li><li><code>super(cls, inst)</code> 获得的是 cls 在 inst 的 MRO 列表中的下一个类。</li></ul><h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><p>只能从对像内部访问的『私有』实例变量，在 Python 中不存在。然而，在大多数 Python 代码中存在一个这样的约定：以一个下划线开头的命名（例如 <code>_spam</code> ）会被处理为 API 的非公开部分（无论它是一个函数、方法或数据成员）。它会被视为一个实现细节，无需公开。</p><p>因为有一个正当的类私有成员用途（即避免子类里定义的命名与之冲突），Python 提供了对这种结构的有限支持，称为 <em>name mangling</em> （命名编码） 。任何形如 <code>__spam</code> 的标识（前面至少两个下划线，后面至多一个下划线），被替代为 <code>_classname__spam</code> ，去掉前导下划线的 <code>classname</code> 即当前的类名。此语法不关注标识的位置，只要求在类定义内。</p><p>名称重整是有助于子类重写方法，而不会打破组内的方法调用。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mapping</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable)</span>:</span></span><br><span class="line">        self.items_list = []</span><br><span class="line">        self.__update(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, iterable)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">            self.items_list.append(item)</span><br><span class="line"></span><br><span class="line">    __update = update   <span class="comment"># private copy of original update() method</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MappingSubclass</span><span class="params">(Mapping)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, keys, values)</span>:</span></span><br><span class="line">        <span class="comment"># provides new signature for update()</span></span><br><span class="line">        <span class="comment"># but does not break __init__()</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> zip(keys, values):</span><br><span class="line">            self.items_list.append(item)</span><br></pre></td></tr></table></figure><p>需要注意的是编码规则设计为尽可能的避免冲突，被认作为私有的变量仍然有可能被访问或修改。在特定的场合它也是有用的，比如调试的时候。</p><p>要注意的是代码传入 <code>exec()</code>， <code>eval()</code> 时不考虑所调用的类的类名，视其为当前类，这类似于 <code>global</code> 语句的效应，已经按字节编译的部分也有同样的限制。这也同样作用于 <code>getattr()</code>， <code>setattr()</code> 和 <code>delattr()</code>，像直接引用 <code>__dict__</code> 一样。</p><h3 id="零碎知识点"><a href="#零碎知识点" class="headerlink" title="零碎知识点"></a>零碎知识点</h3><p>有时候，有一个类似于 Pascal 「记录」或者 C 「结构体」的数据类型是非常有用的，它能够将一些命名数据项捆绑在一起：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">john = Employee()  <span class="comment"># 创建一个新的 employee 记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给记录的各个字段赋值</span></span><br><span class="line">john.name = <span class="string">'John Doe'</span></span><br><span class="line">john.dept = <span class="string">'computer lab'</span></span><br><span class="line">john.salary = <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>一块 Python 代码通常希望能够传递特定抽象数据类型 ，而一个类则会模拟该数据类型的方法。例如，如果你有一个函数，可以格式化文件对象当中的一些数据；那么，你就可以定义一个带有 <code>read()</code> 方法和 <code>readline()</code> 方法的类，这两个方法可以从数据缓冲区中读取数据没并且将其作为参数传递出去。</p><p>实例方法对象也有属性： <code>m.__self__</code> 是带有方法 <code>m()</code> 的实例对象，并且 <code>m.__func__</code> 是和方法相对应的函数对象。</p><ul><li>类是具有相同<strong>属性</strong>和<strong>方法</strong>的一组对象的集合，实例是一个个具体的对象。</li><li>方法是与实例绑定的函数。</li><li><p>获取对象信息可使用下面方法：</p><ul><li><code>type(obj)</code>：来获取对象的相应类型；</li><li><code>isinstance(obj, type)</code>：判断对象是否为指定的 type 类型的实例；</li><li><code>hasattr(obj, attr)</code>：判断对象是否具有指定属性/方法；</li><li><code>getattr(obj, attr[, default])</code> 获取属性/方法的值, 要是没有对应的属性则返回 default 值（前提是设置了 default），否则会抛出 AttributeError 异常；</li><li><code>setattr(obj, attr, value)</code>：设定该属性/方法的值，类似于 obj.attr=value；</li><li><code>dir(obj)</code>：可以获取相应对象的<strong>所有</strong>属性和方法名的列表：</li></ul></li><li><p><code>__new__</code> 在 <code>__init__</code> 之前被调用，用来创建实例。</p></li><li><code>__str__</code> 是用 print 和 str 显示的结果，<code>__repr__</code> 是直接显示的结果。</li><li><code>__getitem__</code> 用类似 <code>obj[key]</code> 的方式对对象进行取值</li><li><code>__getattr__</code> 用于获取不存在的属性 obj.attr</li><li><code>__call__</code> 使得可以对实例进行调用</li></ul><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>目前为止，你可能发现了，大部分容器对象都能被 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 所循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    print(element)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line">    print(element)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> &#123;<span class="string">'one'</span>:<span class="number">1</span>, <span class="string">'two'</span>:<span class="number">2</span>&#125;:</span><br><span class="line">    print(key)</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">"123"</span>:</span><br><span class="line">    print(char)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"myfile.txt"</span>):</span><br><span class="line">    print(line, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>这种形式的访问很清晰，简洁，方便。其背后是迭代器在起作用，<a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a><br>声明会调用容器对象的 <a href="https://docs.python.org/3/library/functions.html#iter" target="_blank" rel="noopener"><code>iter()</code></a> 函数，这个函数则返回一个迭代器对象，迭代器对象有 <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 方法，它会让容器中的元素一次返回一个。 <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a>  会抛出 <a href="https://docs.python.org/3/library/exceptions.html#StopIteration" target="_blank" rel="noopener"><code>StopIteration</code></a> 异常来让 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 结束。你也可以用 <a href="https://docs.python.org/3/library/functions.html#next" target="_blank" rel="noopener"><code>next()</code></a> 函数来调用它的 <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 方法；下面的例子显示了迭代器是如何工作的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = iter(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it</span><br><span class="line">&lt;iterator object at <span class="number">0x00A1DB50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    next(it)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>了解了迭代器协议背后的机制，我们就可以很容易得在我们自己的类中添加迭代器行为。<a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener"><code>__iter__()</code></a> 方法需要返回一个带有 <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 方法的对象。如果类仅仅定义了<code>__next__()</code>， <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener"><code>__iter__()</code></a> 那么返回的对象就是它自己 <code>self</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Reverse:</span><br><span class="line">    &quot;&quot;&quot;从后向前的迭代器&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, data):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.index = len(data)</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.index == 0:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        self.index = self.index - 1</span><br><span class="line">        return self.data[self.index]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rev = Reverse(<span class="string">'spam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iter(rev)</span><br><span class="line">&lt;__main__.Reverse object at <span class="number">0x00A1DB50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> char <span class="keyword">in</span> rev:</span><br><span class="line"><span class="meta">... </span>    print(char)</span><br><span class="line">...</span><br><span class="line">m</span><br><span class="line">a</span><br><span class="line">p</span><br><span class="line">s</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p><a href="https://docs.python.org/3/glossary.html#term-generator" target="_blank" rel="noopener">Generator</a> 是一个简单又强大的创建迭代器的工具。写它们只要像常规函数一样就可以，只不过用的是 <a href="https://docs.python.org/3/reference/simple_stmts.html#yield" target="_blank" rel="noopener"><code>yield</code></a> 代替 <code>return</code> 返回数据。 每次 <a href="https://docs.python.org/3/library/functions.html#next" target="_blank" rel="noopener"><code>next()</code></a> 调用生成器时，生成器就会从它断开的地方恢复（它会记录所有的数据和最后执行的声明）。下面写个例子来展示下生成器并不神秘难写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(data)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">yield</span> data[index]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> char <span class="keyword">in</span> reverse(<span class="string">'golf'</span>):</span><br><span class="line"><span class="meta">... </span>    print(char)</span><br><span class="line">...</span><br><span class="line">f</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line">g</span><br></pre></td></tr></table></figure><p>所以生成器能做的事情，我们之前介绍过的以类为基础的迭代器也可以做。生成器之所以显得更加紧凑，是因为 <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener"><code>__iter__()</code></a> 和 <a href="https://docs.python.org/3/reference/expressions.html#generator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 方法都被自动隐式的创建了。</p><p>生成器的另一个特色是本地变量和执行条件都会被自动保存。这就让我们很容易写出生成器函数，同时也比使用实例属性像是 <code>self.index</code>，<code>self.data</code> 来的简洁。</p><p>除了自动创建的方法和保存的程序状态，当生成器结束时，还会自动抛出 <a href="https://docs.python.org/3/library/exceptions.html#StopIteration" target="_blank" rel="noopener"><code>StopIteration</code></a>. 这些东西组合起来，就变成了一个让我们非常容易书写的迭代器形式。</p><h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><p>一些简单的生成器我们可以用类似列表表达式的代码做出来，只要把方括号换成圆括号就行了。生成器表达式用来一般用在在函数内需要写即用即删的数据的时候。生成器表达式比起完整的生成器要更加紧凑但并不如它功能强大，不过比起列表表达式来内存占用更少。</p><p>例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))                 <span class="comment"># 平方之和</span></span><br><span class="line"><span class="number">285</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xvec = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yvec = [<span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(x*y <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(xvec, yvec))         <span class="comment"># 乘积</span></span><br><span class="line"><span class="number">260</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pi, sin</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sine_table = &#123;x: sin(x*pi/<span class="number">180</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">91</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unique_words = set(word  <span class="keyword">for</span> line <span class="keyword">in</span> page  <span class="keyword">for</span> word <span class="keyword">in</span> line.split())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>valedictorian = max((student.gpa, student.name) <span class="keyword">for</span> student <span class="keyword">in</span> graduates)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = <span class="string">'golf'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(data[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>))</span><br><span class="line">[<span class="string">'f'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/tutorial/classes.html" target="_blank" rel="noopener">python官方文档</a></li><li><a href="http://funhacks.net/explore-python/Class/class_and_object.html" target="_blank" rel="noopener">python之旅</a></li><li><a href="https://bop.mol.uno/14.oop.html" target="_blank" rel="noopener">简明python</a></li><li><a href="https://wizardforcel.gitbooks.io/w3school-python/content/24.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/w3school-python/content/24.html</a></li><li><a href="http://yangcongchufang.com/%E9%AB%98%E7%BA%A7python%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/python-object-class.html" target="_blank" rel="noopener">http://yangcongchufang.com/%E9%AB%98%E7%BA%A7python%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/python-object-class.html</a></li><li><a href="https://mrlongx.com/index.php/2017/09/27/core-python-ch13/" target="_blank" rel="noopener">https://mrlongx.com/index.php/2017/09/27/core-python-ch13/</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类就是一组数据和函数的集合。创建了一个新的类意味着创建了一个全新的对象 &lt;em&gt;类型&lt;/em&gt;，也就允许我们创建新的此类型的 &lt;em&gt;实例&lt;/em&gt;。每个类实例都带有属性以维护其状态。同样也有方法（在它自己的类中定义）来修改这些状态。&lt;/p&gt;
&lt;p&gt;相比其他编程语言，使用 
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python错误和异常</title>
    <link href="https://yo42.github.io/2018/09/08/python%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    <id>https://yo42.github.io/2018/09/08/python错误和异常/</id>
    <published>2018-09-08T13:51:01.289Z</published>
    <updated>2018-09-09T06:09:35.601Z</updated>
    
    <content type="html"><![CDATA[<p>Python使用名为”异常”的特殊对象来管理程序执行期间发生的错误。</p><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>语法错误，也叫作解析错误，这可能是你在学习Python的过程中，最容易碰到的错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="keyword">True</span> print(<span class="string">'Hello world'</span>)</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span> print(<span class="string">'Hello world'</span>)</span><br><span class="line">                   ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>解析结果显示出错的行代码，并用小箭头指明解析到错误的具体位置。<br>这个错误是在箭头所指向的位置：在本例中，错误是在这个函数中检测到的 <a href="https://docs.python.org/3/library/functions.html#print" target="_blank" rel="noopener"><code>print()</code></a>，因为print函数之前应该存在的冒号缺失。文件名称和行号都被打印出来，这样你就可以知道这行有错误的代码是在哪个位置了。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>一条语句或表达式即便是语法正确也有可能在运行的时候报错。程序执行过程中遇到的错误被称为<em>异常</em>。这种错误并不一定是致命错误，我们一会儿来看如何在程序中处理异常。大多数的异常并非由程序自身处理，而是会显示类似下面列举的错误信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> * (<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> + spam*<span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'spam'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'2'</span> + <span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: Can<span class="string">'t convert '</span>int<span class="string">' object to str implicitly</span></span><br></pre></td></tr></table></figure><p>错误信息的最后一行告诉我们程序遇到了什么类型的错误。异常有不同的类型，而其类型名称将会在错误信息中输出出来。上述样例中的异常类型依次是： <a href="https://docs.python.org/3/library/exceptions.html#ZeroDivisionError" target="_blank" rel="noopener"><code>ZeroDivisionError</code></a> 、 <a href="https://docs.python.org/3/library/exceptions.html#NameError" target="_blank" rel="noopener"><code>NameError</code></a> 以及 <a href="https://docs.python.org/3/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 。错误信息中的异常类型是执行时抛出的内建异常类型。所有的内建类型都会如此，而虽然这是一个有用的惯例，但是用户自定义的异常并非一定如此。标准的异常类型是内建的标识符而非预留关键词。</p><p>这一行剩下的部分能告诉我们此处抛出异常的具体信息及触发的原因。</p><p>错误信息的前面部分能够通过栈调用信息告诉我们抛出异常时的上下文。一般情况下栈调用信息会包含函数调用所在的源代码行，但是不会包含从标准输入读入的信息。</p><p><a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions" target="_blank" rel="noopener">Built-in Exceptions</a> 列举了内建异常类型以及各自的含义。</p><h3 id="捕捉异常"><a href="#捕捉异常" class="headerlink" title="捕捉异常"></a>捕捉异常</h3><p>Python 允许编程处理特定的异常。在下面这个例子中，程序要求用户进行输入，直到接收到一个合法的整数，同时也允许用户中断程序 （使用 <code>Control-C</code> 或操作系统支持的其他方式）；注意，由用户引起的中断通过抛出 <a href="https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt" target="_blank" rel="noopener"><code>KeyboardInterrupt</code></a> 异常来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>        x = int(input(<span class="string">"Please enter a number: "</span>))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ValueError:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"Oops!  That was no valid number.  Try again..."</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a>声明的工作原理如下：</p><ul><li>程序首先执行 <em>try</em> 子句 （位于 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 和 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 关键字之间的内容)。</li><li>如果没有异常产生，则 <em>except</em> 子句被跳过，并且 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 声明的部分运行结束</li><li>如果在执行 <em>try</em> 子句的过程中产生了一个异常，那么这个子句范围内产生异常位置之后的代码不会被执行，如果产生的异常位于 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 关键字后提到的若干异常之中，那么<em>except</em> 子句的内容将会接着 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 中刚被中止的位置继续执行。</li><li>如果产生的异常并不在 <em>exception</em> 后面包含的若干异常中，该异常将会被抛给上一层的 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句；如果一个异常没有被任何一层 <em>try-exception</em> 语句捕捉，它就成为一个 <em>未处理异常</em> ，程序执行将因此停止并显示如上所示的消息。<br>一个 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 声明可以包含多个 <em>except</em> 子句来针对不同的异常做出不同的处理，但最多只有一个 <em>except</em> 子句（即错误处理器）会被执行。错误处理器只处理出现在对应 <em>try</em> 子句中产生的异常，而不会处理同一  <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a>  语句中其他错误处理器中的异常。一个 <em>except</em> 子句可以指定多个异常，这些异常用一个元组包含起来，例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">... </span><span class="keyword">except</span> (RuntimeError, TypeError, NameError):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果两个异常是同一类或者具有同一个父类，那它们可以在一个 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 子句中同时存在（但是另一种情况并不成立——如果一个类是另一个类的派生类，那么这两个类不能在一个 <em>except</em> 子句中同时存在）。例如，下面的这段代码中，将按照顺序输出 <code>B, C, D</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cls <span class="keyword">in</span> [B, C, D]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> cls()</span><br><span class="line">    <span class="keyword">except</span> D:</span><br><span class="line">        print(<span class="string">"D"</span>)</span><br><span class="line">    <span class="keyword">except</span> C:</span><br><span class="line">        print(<span class="string">"C"</span>)</span><br><span class="line">    <span class="keyword">except</span> B:</span><br><span class="line">        print(<span class="string">"B"</span>)</span><br></pre></td></tr></table></figure><p>注意：如果这些 <em>except</em> 子句按照相反的顺序排列（<code>except B</code>在最前面），则输出会变成 B，B，B。——和异常匹配的第一个 <em>except</em> 子句会被触发。</p><p>最后一个 except 子句可以省略异常名用作通配符。使用这个方法要特别谨慎，因为这个方法可能掩盖一个真正的编程错误！它还可以用于打印错误后，重新引发异常（也允许调用者处理异常）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'myfile.txt'</span>)</span><br><span class="line">    s = f.readline()</span><br><span class="line">    i = int(s.strip())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">"OS error: &#123;0&#125;"</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"Could not convert data to an integer."</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"Unexpected error:"</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> … <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 语句有一个可选的 <em>else 子句</em>， 当它出现时，必须在所有l except 子句之后。在执行 try 子句之后没有引发异常因此时，它可以用于必须执行的代码。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(arg, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        print(<span class="string">'cannot open'</span>, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(arg, <span class="string">'has'</span>, len(f.readlines()), <span class="string">'lines'</span>)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/3/reference/compound_stmts.html#else" target="_blank" rel="noopener"><code>else</code></a> 子句的使用比在 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 子句中增加而外的代码更好，因为他可以避免意外地捕获不被 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> …<a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 语句包含的异常。</p><p>当一个异常发生时，它可能有相关的值，或者是异常的 <em>参数</em>。尝试的有无和参数的类型取决于异常的类型。</p><p>except 子句可以在异常名之后指定变量。这些变量被绑定到一个异常实例中，实例中的参数储存在 <code>instance.args</code> 中。为了方便，异常实例定义了 <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" target="_blank" rel="noopener"><code>__str__()</code></a> ，所以参数可以被直接打印出来，而不需要引用 <code>.args</code> 。还可以在引发异常之前先实例化异常并根据需要添加任何属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> Exception(<span class="string">'spam'</span>, <span class="string">'eggs'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> Exception <span class="keyword">as</span> inst:</span><br><span class="line"><span class="meta">... </span>    print(type(inst))    <span class="comment"># 异常实例</span></span><br><span class="line"><span class="meta">... </span>    print(inst.args)     <span class="comment"># 储存在 .args 中的参数</span></span><br><span class="line"><span class="meta">... </span>    print(inst)          <span class="comment"># __str__ 允许参数被直接打印，</span></span><br><span class="line"><span class="meta">... </span>                         <span class="comment"># 但是方法可能会被异常子类复写</span></span><br><span class="line"><span class="meta">... </span>    x, y = inst.args     <span class="comment"># 提取参数</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'x ='</span>, x)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'y ='</span>, y)</span><br><span class="line">...</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">Exception</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'spam'</span>, <span class="string">'eggs'</span>)</span></span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'spam'</span>, <span class="string">'eggs'</span>)</span></span></span><br><span class="line">x = spam</span><br><span class="line">y = eggs</span><br></pre></td></tr></table></figure><p>如果异常带有参数，他们会作为未处理异常的信息中的最后一部分（’detail’）被打印出来。</p><p>异常处理程序不仅仅立刻处理 try 子句中的产生的异常，同时也包括 try 子句中调用函数（即使是间接地）中产生的异常。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">this_fails</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    x = <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    this_fails()</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> err:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Handling run-time error:'</span>, err)</span><br><span class="line">...</span><br><span class="line">Handling run-time error: division by zero</span><br></pre></td></tr></table></figure><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p><a href="https://docs.python.org/3/reference/simple_stmts.html#raise" target="_blank" rel="noopener"><code>raise</code></a> 语句允许开发者显式地引发异常。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> NameError(<span class="string">'HiThere'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: HiThere</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/3/reference/simple_stmts.html#raise" target="_blank" rel="noopener"><code>raise</code></a> 关键字后跟随表示被抛出异常的单一变量，该变量可以是一个异常实例，或者一个异常类（继承自 <a href="https://docs.python.org/3/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a>）。如果被传递的变量是一个异常类，它会隐式地无参数调用其构造方法进行实例化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">raise</span> ValueError  <span class="comment"># 'raise ValueError()' 的简写</span></span><br></pre></td></tr></table></figure><p>如果你只需要知道一个异常被抛出了，但并需要处理它，可以通过一个简单的 <a href="https://docs.python.org/3/reference/simple_stmts.html#raise" target="_blank" rel="noopener"><code>raise</code></a> 语句重新抛出这个异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> NameError(<span class="string">'HiThere'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> NameError:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'An exception flew by!'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span></span><br><span class="line">...</span><br><span class="line">An exception flew by!</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: HiThere</span><br></pre></td></tr></table></figure><h3 id="用户定义的异常"><a href="#用户定义的异常" class="headerlink" title="用户定义的异常"></a>用户定义的异常</h3><p>程序可以通过创建一个新的异常类来命名其专属的异常 (参考 <a href="https://docs.python.org/3/tutorial/classes.html#tut-classes" target="_blank" rel="noopener">Classes</a> 以获得更多有关Python类的信息)。 异常通常应该派生自 <a href="https://docs.python.org/3/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a> 类，无论是直接地还是间接地。</p><p>异常类可以以如通常类一样进行定义，但是通常会保持简洁，一般仅仅提供数个用于异常处理时可以解析异常信息的属性。在创建一个可以能引起多个不同异常的模块时，通常的做法是创建一个由模块定义的异常基类，并为不同的异常条件创建特定的异常子类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"""本模块的异常基类"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputError</span><span class="params">(Error)</span>:</span></span><br><span class="line">    <span class="string">"""输入中错误引发的异常</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    属性：</span></span><br><span class="line"><span class="string">        expression -- 产生错误输入表达</span></span><br><span class="line"><span class="string">        message -- 错误解释</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, expression, message)</span>:</span></span><br><span class="line">        self.expression = expression</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitionError</span><span class="params">(Error)</span>:</span></span><br><span class="line">    <span class="string">"""尝试不允许状态转换的操作时引发的异常</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    属性：</span></span><br><span class="line"><span class="string">        previous -- 转换前的状态</span></span><br><span class="line"><span class="string">        next -- 尝试转换的状态</span></span><br><span class="line"><span class="string">        message -- 解释为什么特定的转换操作不允许</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, previous, next, message)</span>:</span></span><br><span class="line">        self.previous = previous</span><br><span class="line">        self.next = next</span><br><span class="line">        self.message = message</span><br></pre></td></tr></table></figure><p>大多数的异常定义都以「错误（Error）」结尾，和标准异常的命名类似。</p><p>很多标准模块定义了它们自己的异常，用于报告它们定义的函数中可能产生的错误。有关类的更多信息在章节 <a href="https://docs.python.org/3/tutorial/classes.html#tut-classes" target="_blank" rel="noopener">Classes</a> 中有介绍.</p><h3 id="定义清理操作"><a href="#定义清理操作" class="headerlink" title="定义清理操作"></a>定义清理操作</h3><p> <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句有另一个可选的子语句，用于定义必须在所有情况下都执行的清理操作。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> KeyboardInterrupt</span><br><span class="line"><span class="meta">... </span><span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Goodbye, world!'</span>)</span><br><span class="line">...</span><br><span class="line">Goodbye, world!</span><br><span class="line">KeyboardInterrupt</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br></pre></td></tr></table></figure><p><em>finally 子句</em> 总是在结束 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句之前执行，无论是否有异常产生。当异常产生在When an exception  <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 子句中产生并未被 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 子句捕获（或异常在 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 或 <a href="https://docs.python.org/3/reference/compound_stmts.html#else" target="_blank" rel="noopener"><code>else</code></a> 子句中产生）时，异常将在 <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a>子句被执行后再引发。 <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句也在「离开的路上」被执行，即当其他子句通过 <a href="https://docs.python.org/3/reference/simple_stmts.html#break" target="_blank" rel="noopener"><code>break</code></a>, <a href="https://docs.python.org/3/reference/simple_stmts.html#continue" target="_blank" rel="noopener"><code>continue</code></a> or <a href="https://docs.python.org/3/reference/simple_stmts.html#return" target="_blank" rel="noopener"><code>return</code></a> 等语句离开 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句时。以下为一个更加复杂的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>        result = x / y</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"division by zero!"</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"result is"</span>, result)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"executing finally clause"</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divide(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">result <span class="keyword">is</span> <span class="number">2.0</span></span><br><span class="line">executing <span class="keyword">finally</span> clause</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divide(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">division by zero!</span><br><span class="line">executing <span class="keyword">finally</span> clause</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divide(<span class="string">"2"</span>, <span class="string">"1"</span>)</span><br><span class="line">executing <span class="keyword">finally</span> clause</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> divide</span><br><span class="line">TypeError: unsupported operand type(s) <span class="keyword">for</span> /: <span class="string">'str'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br></pre></td></tr></table></figure><p>如你所见， <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句在任一事件中都被执行。 <a href="https://docs.python.org/3/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 异常因进行字符串除法引发，而且未被 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 子句捕获，并因此在 <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句被执行后之后才产生。</p><p>在实际的应用中， <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句在释放外部资源（如文件或者网络连接）时非常非常有用，无论资源是否被成功使用。</p><h3 id="预定义的清理操作"><a href="#预定义的清理操作" class="headerlink" title="预定义的清理操作"></a>预定义的清理操作</h3><p>某些对象定义了在不再需要该对象时需要执行的标准清理操作，无论在该对象上进行的操作是成功还是失败。 查看以下示例，该示例尝试打开文件并将其内容打印到屏幕上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"myfile.txt"</span>):</span><br><span class="line">    print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>此代码的问题在于，在部分代码执行完毕后，它会使文件保持打开一段不确定的时间。 这在简单脚本中不是问题，但对于较大的应用可能是一个问题。 <a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 语句使用允许文件之类的对象是，以保证始终及时正确的清理的方式进行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"myfile.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>在语句执行后，文件 <em>f</em> 总是被关闭，即使在处理每行时遇到错误。 与文件相同，提供预定义清理操作的对象将在其文档中指出这一点。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/tutorial/errors.html" target="_blank" rel="noopener">https://docs.python.org/3/tutorial/errors.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python使用名为”异常”的特殊对象来管理程序执行期间发生的错误。&lt;/p&gt;
&lt;h3 id=&quot;语法错误&quot;&gt;&lt;a href=&quot;#语法错误&quot; class=&quot;headerlink&quot; title=&quot;语法错误&quot;&gt;&lt;/a&gt;语法错误&lt;/h3&gt;&lt;p&gt;语法错误，也叫作解析错误，这可能是你在学
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python输入和输出</title>
    <link href="https://yo42.github.io/2018/09/08/python%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/"/>
    <id>https://yo42.github.io/2018/09/08/python输入和输出/</id>
    <published>2018-09-08T13:26:51.456Z</published>
    <updated>2018-09-08T13:50:04.711Z</updated>
    
    <content type="html"><![CDATA[<p>程序的输出可以有多种形式：我们可以将数据以人类可读的形式打印到屏幕上，或者将其写入到文件中以供后续使用。本章将讨论其中的几种实现方式。</p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>迄今为止，在 Python 中存在两种输出值的方法：<em>表达式语句</em>以及 <a href="https://docs.python.org/3/library/functions.html#print" target="_blank" rel="noopener"><code>print()</code></a> 函数。（第三种方法是使用文件对象的 <code>write()</code> 方法；标准文件输出可以参考 <code>sys.stdout</code> 方法，其详细内容请查阅库参考手册。）</p><p>通常，相较于简单地打印以空格为分隔符的值，你会想要对程序的输出结果进行更多的格式控制。在 Python 中，存在如下几种格式化输出的方法：</p><ul><li><p>使用 <a href="https://docs.python.org/3/tutorial/inputoutput.html#tut-f-strings" target="_blank" rel="noopener">f-strings</a> 字符串。这类字符串需要在引号标记之前，以 <code>f</code> 或者 <code>F</code> 作为字符串的开头。你可以使用 <code>{</code> 和 <code>}</code> 包裹想要嵌入到字符串中的 Python 表达式。该表达式可以是某个变量或字面值 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>year = <span class="number">2016</span> ; event = <span class="string">'Referendum'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f'Results of the <span class="subst">&#123;year&#125;</span> <span class="subst">&#123;event&#125;</span>'</span></span><br><span class="line"><span class="string">'Results of the 2016 Referendum'</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 是格式化字符串的第二种方法。相较于第一种方法，该方法需要你进行更多的操作。你仍然可以在字符串中使用 <code>{</code> 和 <code>}</code> 来内嵌变量，也可以进行详细的格式化设计。但这要求你提供与之对应的被格式化的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>yes_votes = <span class="number">42</span>_572_654 ; no_votes = <span class="number">43</span>_132_495</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>percentage = yes_votes/(yes_votes+no_votes)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:-9&#125; YES votes  &#123;:2.2%&#125;'</span>.format(yes_votes, percentage)</span><br><span class="line"><span class="string">' 42572654 YES votes  49.67%'</span></span><br></pre></td></tr></table></figure></li><li><p>当然，你也可以通过字符串的切片操作和连接操作来完成字符串的格式化处理。这种方法可以创建任何你想要的格式化形式。在 string 类型中，包含了一些能够将字符串按指定列宽填充的方法。</p></li></ul><p>如果你仅仅想要在调试时打印某些变量，而不进行格式化输出，那么你也可以使用 <a href="https://docs.python.org/3/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 函数或者 <a href="https://docs.python.org/3/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 函数将任意值转化成字符串。</p><p><a href="https://docs.python.org/3/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 函数能够将值以人类可读的形式呈现，而 <a href="https://docs.python.org/3/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 函数则是将值以解释器可读的形式呈现（如果没有与之对应的转换语法，则会产生 <a href="https://docs.python.org/3/library/exceptions.html#SyntaxError" target="_blank" rel="noopener"><code>SyntaxError</code></a> 异常）。若某个对象没有适用于人类可读的形式，则 <a href="https://docs.python.org/3/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 函数的返回值与 <a href="https://docs.python.org/3/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 函数相同。在 Python 中，诸如数值、或者是链表、字典这样的结构，上述两种函数各自有统一的呈现方式。但是对于字符串，上述两种函数各自有独特的呈现方式。</p><p>如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'Hello, world.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(s)</span><br><span class="line"><span class="string">'Hello, world.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repr(s)</span><br><span class="line"><span class="string">"'Hello, world.'"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1</span>/<span class="number">7</span>)</span><br><span class="line"><span class="string">'0.14285714285714285'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span> * <span class="number">3.25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">200</span> * <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'The value of x is '</span> + repr(x) + <span class="string">', and y is '</span> + repr(y) + <span class="string">'...'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">The value of x <span class="keyword">is</span> <span class="number">32.5</span>, <span class="keyword">and</span> y <span class="keyword">is</span> <span class="number">40000.</span>..</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 对于字符串，repr() 函数会添加引号以及反斜杠：</span></span><br><span class="line"><span class="meta">... </span>hello = <span class="string">'hello, world\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hellos = repr(hello)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(hellos)</span><br><span class="line"><span class="string">'hello, world\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># repr() 函数的参数也可以是某个 Python 对象：</span></span><br><span class="line"><span class="meta">... </span>repr((x, y, (<span class="string">'spam'</span>, <span class="string">'eggs'</span>)))</span><br><span class="line"><span class="string">"(32.5, 40000, ('spam', 'eggs'))"</span></span><br></pre></td></tr></table></figure><h4 id="格式化字符串文字"><a href="#格式化字符串文字" class="headerlink" title="格式化字符串文字"></a>格式化字符串文字</h4><p><a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" target="_blank" rel="noopener">格式化字符串文字</a> （简称 f-strings ）允许你在字符串中包含Python表达式的值，方法是在字符串前面加上 <code>f</code> 或者 <code>F</code> ，并将表达式写成 <code>{expression}</code> 格式。</p><p>在表达式后面可以加上格式说明符。这样能够更好地控制表达式值的输出格式。下面的例子将 PI 舍入到小数位数后三位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">f'The value of pi is approximately <span class="subst">&#123;math.pi:<span class="number">.3</span>f&#125;</span>.'</span>)</span><br></pre></td></tr></table></figure><p>在 <code>&#39;:&#39;</code> 之后加上一个整数表示该字段的最小字符数，这对于列排序很有用。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">'Sjoerd'</span>: <span class="number">4127</span>, <span class="string">'Jack'</span>: <span class="number">4098</span>, <span class="string">'Dcab'</span>: <span class="number">7678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, phone <span class="keyword">in</span> table.items():</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">f'<span class="subst">&#123;name:<span class="number">10</span>&#125;</span> ==&gt; <span class="subst">&#123;phone:<span class="number">10</span>d&#125;</span>'</span>)</span><br><span class="line">...</span><br><span class="line">Sjoerd     ==&gt;       4127</span><br><span class="line">Jack       ==&gt;       4098</span><br><span class="line">Dcab       ==&gt;       7678</span><br></pre></td></tr></table></figure><p>也可用其他修饰符来转换要格式化的值。 <code>&#39;!a&#39;</code> 表示应用 <a href="https://docs.python.org/3/library/functions.html#ascii" target="_blank" rel="noopener"><code>ascii()</code></a>函数 ， <code>&#39;!s&#39;</code> 表示应用 <a href="https://docs.python.org/3/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 函数， 另外 <code>&#39;!r&#39;</code> 表示应用 <a href="https://docs.python.org/3/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>animals = <span class="string">'eels'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">f'My hovercraft is full of <span class="subst">&#123;animals&#125;</span>.'</span>)</span><br><span class="line">My hovercraft <span class="keyword">is</span> full of eels.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'My hovercraft is full of &#123;animals !r&#125;.'</span>)</span><br><span class="line">My hovercraft <span class="keyword">is</span> full of <span class="string">'eels'</span>.</span><br></pre></td></tr></table></figure><p>有关这些格式规范的参考，请参阅参考指南 <a href="https://docs.python.org/3/library/string.html#formatspec" target="_blank" rel="noopener">最小字符串格式化</a>。</p><h4 id="format-字符串格式化方法"><a href="#format-字符串格式化方法" class="headerlink" title="format() 字符串格式化方法"></a>format() 字符串格式化方法</h4><p><a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 的基本使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'We are the &#123;&#125; who say "&#123;&#125;!"'</span>.format(<span class="string">'knights'</span>, <span class="string">'Ni'</span>))</span><br><span class="line">We are the knights who say <span class="string">"Ni!"</span></span><br></pre></td></tr></table></figure><p>其中的括号和字符（称为格式字段）将用传入 <a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 方法中的对象来替换。括号中的数字可用于表示传递给 <a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 方法的对象的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;0&#125; and &#123;1&#125;'</span>.format(<span class="string">'spam'</span>, <span class="string">'eggs'</span>))</span><br><span class="line">spam <span class="keyword">and</span> eggs</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;1&#125; and &#123;0&#125;'</span>.format(<span class="string">'spam'</span>, <span class="string">'eggs'</span>))</span><br><span class="line">eggs <span class="keyword">and</span> spam</span><br></pre></td></tr></table></figure><p>如果在 <a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 方法中使用关键字参数，其值等于参数名称对应的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'This &#123;food&#125; is &#123;adjective&#125;.'</span>.format(</span><br><span class="line"><span class="meta">... </span>      food=<span class="string">'spam'</span>, adjective=<span class="string">'absolutely horrible'</span>))</span><br><span class="line">This spam <span class="keyword">is</span> absolutely horrible.</span><br></pre></td></tr></table></figure><p>位置和关键字参数可以任意组合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'The story of &#123;0&#125;, &#123;1&#125;, and &#123;other&#125;.'</span>.format(<span class="string">'Bill'</span>, <span class="string">'Manfred'</span>,</span><br><span class="line">                                                       other=<span class="string">'Georg'</span>))</span><br><span class="line">The story of Bill, Manfred, <span class="keyword">and</span> Georg.</span><br></pre></td></tr></table></figure><p>如果你有一个不想拆分的长字符，使用名称而不是位置来进行格式化将会是一个更好的方法。这可以简单的使用 <code>&#39;[]&#39;</code> 符号来获取字典中的键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">'Sjoerd'</span>: <span class="number">4127</span>, <span class="string">'Jack'</span>: <span class="number">4098</span>, <span class="string">'Dcab'</span>: <span class="number">8637678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Jack: &#123;0[Jack]:d&#125;; Sjoerd: &#123;0[Sjoerd]:d&#125;; '</span></span><br><span class="line"><span class="meta">... </span>      <span class="string">'Dcab: &#123;0[Dcab]:d&#125;'</span>.format(table))</span><br><span class="line">Jack: <span class="number">4098</span>; Sjoerd: <span class="number">4127</span>; Dcab: <span class="number">8637678</span></span><br></pre></td></tr></table></figure><p>上面的方法也可以使用 ‘**’ 将字典中的信息进行传递。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">'Sjoerd'</span>: <span class="number">4127</span>, <span class="string">'Jack'</span>: <span class="number">4098</span>, <span class="string">'Dcab'</span>: <span class="number">8637678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Jack: &#123;Jack:d&#125;; Sjoerd: &#123;Sjoerd:d&#125;; Dcab: &#123;Dcab:d&#125;'</span>.format(**table))</span><br><span class="line">Jack: <span class="number">4098</span>; Sjoerd: <span class="number">4127</span>; Dcab: <span class="number">8637678</span></span><br></pre></td></tr></table></figure><p>这与内置函数 <a href="https://docs.python.org/3/library/functions.html#vars" target="_blank" rel="noopener"><code>vars()</code></a> 的结合非常有用，这个内置函数能够能够返回包含所有局部变量的字典。</p><p>例如，下面的代码生成了将数字本身与其平方、立方整齐对齐的数列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;0:2d&#125; &#123;1:3d&#125; &#123;2:4d&#125;'</span>.format(x, x*x, x*x*x))</span><br><span class="line">...</span><br><span class="line"> <span class="number">1</span>   <span class="number">1</span>    <span class="number">1</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">4</span>    <span class="number">8</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">9</span>   <span class="number">27</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">16</span>   <span class="number">64</span></span><br><span class="line"> <span class="number">5</span>  <span class="number">25</span>  <span class="number">125</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">36</span>  <span class="number">216</span></span><br><span class="line"> <span class="number">7</span>  <span class="number">49</span>  <span class="number">343</span></span><br><span class="line"> <span class="number">8</span>  <span class="number">64</span>  <span class="number">512</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">81</span>  <span class="number">729</span></span><br><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>有关字符串格式的完整概述 <a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> ，请参阅 <a href="https://docs.python.org/3/library/string.html#formatstrings" target="_blank" rel="noopener">格式字符串语法</a> 。</p><h4 id="手动格式化字符串"><a href="#手动格式化字符串" class="headerlink" title="手动格式化字符串"></a>手动格式化字符串</h4><p>这是一些相同的平方和立方的表，手动格式化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line"><span class="meta">... </span>    print(repr(x).rjust(<span class="number">2</span>), repr(x*x).rjust(<span class="number">3</span>), end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="comment"># 注意在前一行中使用 'end'</span></span><br><span class="line"><span class="meta">... </span>    print(repr(x*x*x).rjust(<span class="number">4</span>))</span><br><span class="line">...</span><br><span class="line"> <span class="number">1</span>   <span class="number">1</span>    <span class="number">1</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">4</span>    <span class="number">8</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">9</span>   <span class="number">27</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">16</span>   <span class="number">64</span></span><br><span class="line"> <span class="number">5</span>  <span class="number">25</span>  <span class="number">125</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">36</span>  <span class="number">216</span></span><br><span class="line"> <span class="number">7</span>  <span class="number">49</span>  <span class="number">343</span></span><br><span class="line"> <span class="number">8</span>  <span class="number">64</span>  <span class="number">512</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">81</span>  <span class="number">729</span></span><br><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>（注意 <a href="https://docs.python.org/3/library/functions.html#print" target="_blank" rel="noopener"><code>print()</code></a> 函数在每一列中添加了一个空格 <a href="https://docs.python.org/3/library/functions.html#print" target="_blank" rel="noopener"><code>print()</code></a> ：它经常在参数之间添加空格。）</p><p>字符串对象的 <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" target="_blank" rel="noopener"><code>str.rjust()</code></a> 方法在某一栏以给定的宽度会在左边填充空格来对一个字符串进行右对齐。 <a href="https://docs.python.org/3/library/stdtypes.html#str.ljust" target="_blank" rel="noopener"><code>str.ljust()</code></a> 和 <a href="https://docs.python.org/3/library/stdtypes.html#str.center" target="_blank" rel="noopener"><code>str.center()</code></a> 等这些方法相似。 这些方法不写入任何东西，它们只会返回一个新的字符串。如果输入的字符串太长，它们不会截断它，但是会原样返回它。它们会搞乱你的列的排序，但这通常比替代方案更好，它们会通过值来排布。（如果你真的想截断字符串，通常你可以添加一个切片操作，像  <code>x.ljust(n)[:n]</code> 。）</p><p>有另外一个方法， <a href="https://docs.python.org/3/library/stdtypes.html#str.zfill" target="_blank" rel="noopener"><code>str.zfill()</code></a>， 它会在一个数字型的字符串的左边添加0。它了解正负号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'12'</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">'00012'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'-3.14'</span>.zfill(<span class="number">7</span>)</span><br><span class="line"><span class="string">'-003.14'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'3.14159265359'</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">'3.14159265359'</span></span><br></pre></td></tr></table></figure><h4 id="传统字符串格式化方法"><a href="#传统字符串格式化方法" class="headerlink" title="传统字符串格式化方法"></a>传统字符串格式化方法</h4><p>操作符 ‘%’ 同样可以被用来格式化字符串。它将该操作符左侧参数解释为 ‘sprintf()’ 样式的字符串应用到操作符右侧参数，并且返回字符串。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'The value of pi is approximately %5.3f.'</span> % math.pi)</span><br><span class="line">The value of pi <span class="keyword">is</span> approximately <span class="number">3.142</span>.</span><br></pre></td></tr></table></figure><p>更多信息请参考文档  <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" target="_blank" rel="noopener">printf-style String Formatting</a>。</p><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><p><a href="https://docs.python.org/3/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a> 将返回一个文件对象，它使用两个参数作为输入：<code>open(filename,mode)</code>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'workfile'</span>, <span class="string">'w'</span>)</span><br></pre></td></tr></table></figure><p>第一个参数 <em>filename</em> 是一个包含文件名的字符串。第二个参数 <em>mode</em> 是包含几个单独字母的字符串，用于解释该文件将被用何种方式处理。 <em>mode</em> 参数可以使用 <code>&#39;r&#39;</code> 表示只读模式；<code>&#39;w&#39;</code> 表示只写入模式（同时，同名文件的文件内容将会被抹掉）； <code>&#39;a&#39;</code> 表示在文件末尾追加写入，在该模式下，任何数据都会被自动追加到该文件末尾；<code>&#39;r+&#39;</code> 表示读写操作。 <em>mode</em> 是可选的，未指定的情况下将会默认为 <code>&#39;r&#39;</code> 模式进行读文件。</p><p>正常情况下，文件以 <em>text mode</em> 打开， 这就意味着，我们使用字符串数据对文件进行读写操作，这些都是按照某种指定的编码格式进行读写。如果编码格式未被指定，默认编码格式是与平台相关（详情见 <a href="https://docs.python.org/3/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a>）。 <code>&#39;b&#39;</code> 表示以 <em>二进制模式</em> 打开文件并且追加数据， 数据以字节的形式读写到文件中，但是这种模式应该被用来打开不包含文本的文件中。</p><p>在 <em>text mode</em> 中，默认读操作的行尾  <code>\n</code> 同样是依据指定平台进行选择的。（Unix系统中使用<code>\n</code> ， Windows系统中使用 <code>\r\n</code>）。在 <em>text mode</em> 模式下写入文件，默认情况下会将<code>\n</code>转换成对应的平台的行尾字符。这种对文件修改的操作仅适用于文本文件，但是在操作  <code>JPEG</code> 或者  <code>EXE</code> 二进制数据文件过程中，要非常小心的使用二进制模式对他们进行读写操作。</p><p>关键字  <a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 是非常适合用于处理文件对象。它的优势在于，即使发生了 <em>exception</em>，文件操作序列结束后也可以自动关闭。使用关键字 <a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 处理的代码要远少于 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a>-<a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 块进行处理的代码，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'workfile'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    read_data = f.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.closed</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>如果未使用关键字 <a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 操作文件，那么必须要调用 <code>f.close()</code> 来结束文件和释放系统资源。未结束一个文件时，Python 的垃圾回收机制将会最终关闭并销毁这个文件对象，但是这个文件将在一段时间内仍然处于打开状态。不同的 Python 实现方式将会在不同的时间对文件进行释放，这将会带来其他的风险。</p><p>当文件对象被关闭后，使用 <a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 或者调用 <code>f.close()</code> 对文件对象的操作都会失效。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: I/O operation on closed file.</span><br></pre></td></tr></table></figure><h4 id="文件对象的方法"><a href="#文件对象的方法" class="headerlink" title="文件对象的方法"></a>文件对象的方法</h4><p>该例子的剩下部分将会继续使用上文所建立的文件 <code>f</code> 进行介绍。</p><p>读取文件内容的方法为 <code>f.read(size)</code> ，可以读取指定大小的文件内容，可以得到一个字符串（文本模式）或者字节对象（二进制模式）。 <em>size</em> 是一个可选的数值参数，如果 <em>size</em> 省略或为负，可以读取并返回整个文件；要注意的是，文件的大小有可能超出设备内存的上限。否则，最多读取并返回 <em>size</em> 的字节内容。当读取到文件的结尾时，<code>f.read()</code> 会返回一个空字符串（<code>&#39;&#39;</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">'This is the entire file.\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure><p><code>f.readline()</code> 可以仅仅从文件里读取一行；读取的字符串中，结尾会有一个换行符（<code>\n</code>），唯一的例外时在最后一行文件不以换行符结束。这个结果是明确的。如果 <code>f.readline()</code> 返回一个空字符串，那么已经读取到文件的结尾，因为空白行只有一个 <code>&#39;\n&#39;</code>，一个仅仅包含换行符的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">'This is the first line of the file.\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">'Second line of the file\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure><p>要读取多行内容，你可以借助循环遍历整个文档类型。这是一种内存复杂度优先，快速而编码简单的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="meta">... </span>    print(line, end=<span class="string">''</span>)</span><br><span class="line">...</span><br><span class="line">This <span class="keyword">is</span> the first line of the file.</span><br><span class="line">Second line of the file</span><br></pre></td></tr></table></figure><p>如果你想一行行读取整个文件，你同样可以使用 <code>list(f)</code> 或<code>f.readlines()</code>，你可以得到一个各行字符串的列表。</p><p><code>f.write(string)</code> 可以写入字符串 <em>string</em> 内容到文件内，返回写入的字符数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'This is a test\n'</span>)</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><p>其他类型需要转换才能写入文件中，或者转成字符串（文本模式）或者字节类型（二进制模式）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = (<span class="string">'the answer'</span>, <span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = str(value)  <span class="comment"># convert the tuple to string</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(s)</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><p><code>f.tell()</code> 返回一个整数，给出当前在文件中的位置；在二进制模式中，用字节数表示，在文本模式中，用不透明数表示。</p><p>要改变当前的位置，可以使用 <code>f.seek(offset, from_what)</code> 。新位置从参考点出发，由参数 <em>offset</em> 值计算得出；参考点位置由 <em>from_what</em> 参数给出。 <em>from_what</em> 为 0 时，从文件开头出发；为 1 时，从当前位置出发；为 2 时从文件结尾出发。 <em>from_what</em> 缺省值为 0 ，采用文件开头作为参考点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'workfile'</span>, <span class="string">'rb+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">b'0123456789abcdef'</span>)</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">5</span>)      <span class="comment"># Go to the 6th byte in the file</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">1</span>)</span><br><span class="line"><span class="string">b'5'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">-3</span>, <span class="number">2</span>)  <span class="comment"># Go to the 3rd byte before the end</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">1</span>)</span><br><span class="line"><span class="string">b'd'</span></span><br></pre></td></tr></table></figure><p>在文本文件（即那些没有使用 <code>b</code> 参数打开的字符串模式文件），只能从文件的开头或是 <code>f.tell()</code> 返回值出发（从文件末尾的定位 <code>seek(0, 2)</code> 为异常）。任何其他的 <em>offset</em> 将产生不可预知的表现。</p><p>文件对象有一些附加的方法，比如 <code>isatty()</code> 和 <code>truncate()</code>，它们的使用频率较低；有关文件对象的完整指南，请参阅「参考文档」。</p><h4 id="利用-json结构保存数据"><a href="#利用-json结构保存数据" class="headerlink" title="利用 json结构保存数据"></a>利用 <a href="https://docs.python.org/3/library/json.html#module-json" target="_blank" rel="noopener"><code>json</code></a>结构保存数据</h4><p>字符串可以轻松地从文件读写。但是数值要花费上更多的功夫，因为 <code>read()</code> 方法可以仅仅返回字符串，这将必须经过一些函数处理，例如 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><code>int()</code></a>，将 <code>&#39;123&#39;</code> 字符串转化为数值 123 。 当你希望保存更复杂的数据类型像嵌套列表或字典时，手动解析和序列化复杂程度难以接受。</p><p>Python 提供了被称为 <a href="http://json.org/" target="_blank" rel="noopener">JSON (JavaScript Object Notation)</a> 的流行数据交换格式，而不希望用户不断自行编写和调试代码以储存复杂的数据类型。标准库 <a href="https://docs.python.org/3/library/json.html#module-json" target="_blank" rel="noopener"><code>json</code></a> 可以采用 Python 式的数据层级，并且转换成字符串的形式； 这个进程称为 <em>序列化</em> 。反之，从字符串转化成数据类型被称作 <em>反序列化</em> 。得到的字符串对象可以储存在文件或数据中，也可以通过网络连接发送到某个远程主机。</p><blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>JSON 格式通常被现代应用程序用于数据交换，为许多程序员所熟悉，使其成为交互数据的较优选择。</p></blockquote><p>如果你有一个对象 <code>x</code> ，你能够通过如下的代码访问其 JSON 字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps([<span class="number">1</span>, <span class="string">'simple'</span>, <span class="string">'list'</span>])</span><br><span class="line"><span class="string">'[1, "simple", "list"]'</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/3/library/json.html#json.dumps" target="_blank" rel="noopener"><code>dumps()</code></a> 另一个变体函数，叫作 <a href="https://docs.python.org/3/library/json.html#json.dump" target="_blank" rel="noopener"><code>dump()</code></a> ，只将对象序列化成一个 <a href="https://docs.python.org/3/glossary.html#term-text-file" target="_blank" rel="noopener">文本文件</a> 。 所以，如果 <code>f</code> 是一个 <a href="https://docs.python.org/3/glossary.html#term-text-file" target="_blank" rel="noopener">文本文件</a> 已打开的可写入文件对象，我们能够利用如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dump(x, f)</span><br></pre></td></tr></table></figure><p>要重新解码对象，当 <code>f</code> 是一个 <a href="https://docs.python.org/3/glossary.html#term-text-file" target="_blank" rel="noopener">文本文件</a> 已打开的读取用文件对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = json.load(f)</span><br></pre></td></tr></table></figure><p>这种简单的序列化技术可以处理列表和字典，但是不足以在 JSON 中序列化任意类的实例。 参考文档 <a href="https://docs.python.org/3/library/json.html#module-json" target="_blank" rel="noopener"><code>json</code></a> 包含对此的解释.</p><blockquote><h4 id="也可以看"><a href="#也可以看" class="headerlink" title="也可以看"></a>也可以看</h4><p><a href="https://docs.python.org/3/library/pickle.html#module-pickle" target="_blank" rel="noopener"><code>pickle</code></a> - Pickle 模块</p><p>与 <a href="https://docs.python.org/3/tutorial/inputoutput.html#tut-json" target="_blank" rel="noopener">JSON</a> 相反， <em>pickle</em> 是一个允许对任意复杂的 Python 对象进行序列化的协议。因此，它仅仅适配 Python ，不能用于与其他语言编写的应用程序通信。默认情况下，它也是不安全的：如果有人特地设计用于注入攻击的数据，这些不受信任的 Pickle 数据可能会在序列化中被 Python 运行。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/tutorial/inputoutput.html" target="_blank" rel="noopener">https://docs.python.org/3/tutorial/inputoutput.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;程序的输出可以有多种形式：我们可以将数据以人类可读的形式打印到屏幕上，或者将其写入到文件中以供后续使用。本章将讨论其中的几种实现方式。&lt;/p&gt;
&lt;h3 id=&quot;格式化输出&quot;&gt;&lt;a href=&quot;#格式化输出&quot; class=&quot;headerlink&quot; title=&quot;格式化输出&quot;&gt;
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yo42</title>
  
  <subtitle>Dont&#39;t Panic,Do not go gentle into that good night~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yo42.github.io/"/>
  <updated>2018-09-11T05:07:33.833Z</updated>
  <id>https://yo42.github.io/</id>
  
  <author>
    <name>Yo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 远程API调用启用TLS加密</title>
    <link href="https://yo42.github.io/2018/09/11/Docker-%E8%BF%9C%E7%A8%8BAPI%E8%B0%83%E7%94%A8%E5%90%AF%E7%94%A8TLS%E5%8A%A0%E5%AF%86/"/>
    <id>https://yo42.github.io/2018/09/11/Docker-远程API调用启用TLS加密/</id>
    <published>2018-09-11T05:06:02.930Z</published>
    <updated>2018-09-11T05:07:33.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="普通的HTTP模式（非常不安全）："><a href="#普通的HTTP模式（非常不安全）：" class="headerlink" title="普通的HTTP模式（非常不安全）："></a>普通的HTTP模式（非常不安全）：</h1><h2 id="服务端（CentOS-7，IP地址192-168-9-7）："><a href="#服务端（CentOS-7，IP地址192-168-9-7）：" class="headerlink" title="服务端（CentOS 7，IP地址192.168.9.7）："></a>服务端（CentOS 7，IP地址192.168.9.7）：</h2><pre>sed -i 's/\(OPTIONS="\)/\1-H 0.0.0.0:1699 /' /etc/sysconfig/docker# 也就是加入 -H 0.0.0.0:1699参数</pre>## 重启docker。## 客户端配置：<pre>echo 'export DOCKER_HOST="tcp://192.168.9.7:1699"' >> ~/.bashrcsource ~/.bashrc</pre>## 测试：<pre>docker version</pre># 启用HTTPS模式：## 文档： https://docs.docker.com/engine/articles/https/## CA证书### 私钥（使用xlands做为密码）：<pre>openssl genrsa -aes256 -out ca-key.pem 4096 chmod 0400 ca-key.pem</pre>### 签发申请（10年）：<pre>openssl req -new -x509 -days 3650 \            -subj "/C=CN/ST=GD/L=GZ/O=baoyugame/OU=baoyugame/CN=*.baoyugame.com" \            -sha256 -key ca-key.pem -out ca.pemchmod 0444 ca.pem </pre>## 服务端证书：### 私钥：<pre>openssl genrsa -out server-key.pem 4096chmod 0400 server-key.pem</pre>### 请求证书（设置HOST为不同IP地址就可以给其他主机签发证书）：<pre>HOST=192.168.9.7openssl req -subj "/CN=$HOST" -sha256 -new -key server-key.pem -out server-$HOST.csr</pre>### 需允许服务器的网卡IP地址：<pre>echo subjectAltName = IP:$HOST,IP:127.0.0.1 > extfile.cnf</pre>### 签署 -（不带-extfile extfile.cnf参数）- ：<pre>openssl x509 -req -days 3650 -sha256 \             -in server-$HOST.csr -CA ca.pem -CAkey ca-key.pem \             -CAcreateserial -extfile extfile.cnf \             -out server-cert-$HOST.pemchmod 0444 server-cert-$HOST.pem</pre>### 删除请求证书：<pre>rm server-$HOST.csr</pre>### 部署证书（复制到各自主机上）：<pre>#echo 'DOCKER_CERT_PATH=/etc/docker' | sudo tee -a /etc/sysconfig/docker#sed -i 's/\(OPTIONS="\)/\1 --tlsverify '  /etc/sysconfig/dockercat<<eof> /etc/sysconfig/dockerDOCKER_CERT_PATH=/etc/dockerOPTIONS="-g /home/docker --tlsverify --ip=172.17.42.1 --userland-proxy=false -H 0.0.0.0:1699 -H unix:///var/run/docker.sock "EOFsudo cp ca.pem          /etc/docker/ca.pemsudo cp server-key.pem  /etc/docker/key.pemsudo cp server-cert-$HOST.pem /etc/docker/cert.pem</eof></pre>### 开启：<pre>sudo systemctl start docker</pre>## 客户端证书：### 独立目录：<pre>mkdir client && cd client</pre>### 私钥：<pre>openssl genrsa -out key.pem 4096chmod 0400 key.pem</pre>### 请求证书：<pre>openssl req -subj '/CN=client' -new -key key.pem -out client.csr</pre>### 附件属性：<pre>echo extendedKeyUsage = clientAuth > extfile.cnf</pre>### 签署：<pre>openssl x509 -req -days 3650 -sha256 -in client.csr -CA ../ca.pem -CAkey ../ca-key.pem \  -CAcreateserial -extfile extfile.cnf \  -out cert.pem chmod 0444 cert.pemcp ../ca.pem .</pre>### 删除请求证书：<pre>rm client.csr extfile.cnf .srl</pre>### 部署证书：-<pre>mkdir     ~/.docker/cp ca.pem ~/.docker/cp client-key.pem  ~/.docker/key.pemcp client-cert.pem ~/.docker/cert.pem</pre>-### 客户端配置（默认启用TLS）：<pre>cat<<eof>> ~/.bashrcexport DOCKER_HOST="tcp://192.168.9.7:1699" export DOCKER_TLS_VERIFY=1export DOCKER_CERT_PATH=/path/to/dir/tls-key/clientEOFsource ~/.bashrc</eof></pre>### 测试：<pre>docker version</pre> <h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;普通的HTTP模式（非常不安全）：&quot;&gt;&lt;a href=&quot;#普通的HTTP模式（非常不安全）：&quot; class=&quot;headerlink&quot; title=&quot;普通的HTTP模式（非常不安全）：&quot;&gt;&lt;/a&gt;普通的HTTP模式（非常不安全）：&lt;/h1&gt;&lt;h2 id=&quot;服务端（C
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习笔记</title>
    <link href="https://yo42.github.io/2018/09/09/Docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://yo42.github.io/2018/09/09/Docker-学习笔记/</id>
    <published>2018-09-09T09:52:13.149Z</published>
    <updated>2018-09-09T10:03:45.823Z</updated>
    
    <content type="html"><![CDATA[<p>Docker有两个概念需要搞清楚,镜像与容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">镜像是从网上docker pub上拉取下来的镜像，拉取下来后可以使用docker run命令进行运行。</span><br><span class="line"># dockerhub 是官方构建的一个镜像仓库,类似github一样,上面累积了许多人上传制作的镜像,有官方,有的是用户上传的,任何人都可自由下载。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">容器是将镜像运行在一个容器中</span><br></pre></td></tr></table></figure><p>Registry</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户可以在自己的数据中心搭建私有的registry,也可以从官方使用docker官方的registry也就是docker hub.</span><br><span class="line">它是一个公共的镜像仓库，供用户下载和使用，dockerhub中有两种库。</span><br><span class="line">用户仓库和顶层库，用户仓库是有私人创建的，顶层使用docker公司负责维护的。</span><br></pre></td></tr></table></figure><p>常用操作命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker images #查看从docker hub上下载到本地的镜像</span><br><span class="line">docker search #镜像名#从docker hub上搜索镜像</span><br><span class="line">docker pull #从docker registry中拉取镜像</span><br><span class="line">docker push #将本地制作好的镜像推送到docker hub</span><br><span class="line">docker rm 容器id #删除容器命令</span><br><span class="line">docker rmi 镜像id #删除镜像 </span><br><span class="line">docker stop $(docker ps -a) #批量停止容器</span><br><span class="line">docker rm $(docker ps -a) # 批量删除容器</span><br><span class="line">docker rm $(docker ps -a|awk &apos;&#123;print $1&#125;&apos;|cut -f 1 -d &quot;C&quot;) # 批量删除容器</span><br><span class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq) #both</span><br><span class="line">###ps:docker rm 与docker rmi 都可以加 -f强制删除,需要注意的是如果删除镜像报错,如果基于镜像启动的容器存在,则无法直接删除,需要先删除容器再删除镜像。</span><br><span class="line">docker inspect # 查看镜像和容器的详细信息</span><br><span class="line">docker ps # 查看容器相关的信息，状态 选项 -a 列出所有容器的的状态 -l 列出最新的状态</span><br><span class="line">docker commit &lt;container_id&gt; &lt;some_name&gt; # 可以将一个容器固化为一个新的镜像,通过commit将镜像保存起来，也就是可以将一个环境配配置好的容器，保存，以后用到在拿出来使用。</span><br><span class="line">docker run -it -v --volumes-from --name --rm --privileged 镜像名字 # 以交互式运行容器 --name 只是一个名称，可以不加 --rm docker容器退出时将自动删除，注意如果容器运行在后台模式是不能带--rm的.需要映射多个端口使用多个-p 选项</span><br><span class="line">docker run 镜像名字 echo “hello world” # 在容器的shell中输出helloworld</span><br><span class="line">docker logs 容器id #显示容器的标准输出</span><br><span class="line">docker attach 容器id #重新进入关闭的容器</span><br><span class="line">docker network inspect bridge</span><br></pre></td></tr></table></figure><p>docker命令结构:</p><p>首先有两个方面，一个是docker镜像制作端，一个是用户使用端类似C/S 架构。</p><p>使用docker build命令结合dockerfile可以创建管理镜像,创建完后可以push到docker hub。</p><p>用户可以通过从网上拉取制作好的镜像,拉取到本地,运行容器。</p><p>使用docker pull时,可以从官方docker hub中的官方镜像库,其他公共库,私人仓库,拉取镜像资源,同时也可以拉取私有服务器中获取镜像资源，只需指定特定的库名,或服务器地址即可。</p><p>如何临时退出一个正在交互的容器，而不是终止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按ctrl-p+ctrl-q   #ctrl -c 是终止停止进程</span><br></pre></td></tr></table></figure><p>构建docker镜像应该遵循的原则,请参考官方文档，dockerfile最佳实践:</p><p>尽量选取满足需求但较小的基础系统镜像，例如大部分时候可以选择 debian:wheezy 或 debian:jessie 镜像，仅有不足百兆大小; </p><p>清理编译生成文件、安装包的缓存等临时文件; 安装各个软件时候要指定准确的版本号，并避免引入不需要的依赖; </p><p>从安全角度考虑，应用要尽量使用系统的库和依赖; 如果安装应用时候需要配置一些特殊的环境变量，</p><p>在安装后要还原不需要保持 的变量值; </p><p>使用 Dockerfile 创建镜像时候要添加 .dockerignore 文件或使用干净的工作目 录。</p><p>在构建docker容器时可以控制容器占用系统资源，调整系统硬件资源，例如cpu，内存，io等。</p><p>查看容器映射出来的端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -f name=nginx</span><br></pre></td></tr></table></figure><p>查看容器内应用监听的端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -ti global_nginx_1 ss -lntp</span><br></pre></td></tr></table></figure><p>制作镜像</p><pre><code>两种办法:1.使用Dockerfile,使用docker commit 将容器提交保存为镜像.##最好使用Dockerfile来构建镜像,不推荐docker commit方法。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">首先编辑一个空白的文本文件命名为DockerfIle，每一个指令的前缀都必须是大写的。</span><br><span class="line">FROM centos    #从centos 这个镜像文件中构建,from字段必须是第一个，可以有多个from</span><br><span class="line">在文件中可以写入运行命令使其在docker容器中运行</span><br><span class="line">RUN echo ’hello world‘ ##在容器中运行的指令</span><br><span class="line">CMD ##</span><br><span class="line">ENV ##后续的指令可以调用变量 $&#123;variable_name&#125;</span><br><span class="line">WORKDIR ##</span><br><span class="line">MAINTAINER ## dockerfile会根据上下文执行的命令，使用缓存，如果修改了使用者名称，将刷新缓存</span><br><span class="line">EXPOSE ## 端口宣告</span><br><span class="line">ADD ##</span><br><span class="line">COPY ##</span><br><span class="line">docker build -t 给镜像一个名称 . #注意，最后有个点，这条命令会读取当前目录下的所有文件以及目录和Dockerfile文件，建议创建新目录来build</span><br><span class="line"></span><br><span class="line">之后使用 docker images 就可以看到自己建立的镜像了，使用docker history 镜像id 就可以查看到刚刚容器的输出结果了。注意这个创建的镜像是不可以开启新的容器的 官方的解释 &quot;Notice the new changed-ubuntu image does not have its own copies of every layer. As can be seen in the diagram below, the new image is sharing its four underlying layers with the ubuntu:15.04 image.&quot;</span><br><span class="line">并且使用 docker history 可以看到刚刚通过文件输出镜像的大小只有11b，这种只是个共享图像层。</span><br><span class="line">一旦你构建或创建了一个新的镜像，你可以使用 docker push 命令将镜像推送到 Docker Hub 。这样你就可以分享你的镜像了，镜像可以是公开的，或者你可以把镜像添加到你的私有仓库中。</span><br></pre></td></tr></table></figure><p>Docker Volumes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">docker volumes 是一个存储卷,它可以使宿主机与容器里面共享数据,这个数据卷可以是系统文件上的任何一个目录,你可以挂在任意个Volumes 到容器里,多个容器也可以共享一个或多个数据量。</span><br><span class="line">docker run --volumes-from </span><br><span class="line">如果你有一些持久化的数据， 并且想在不同的container之间共享这些数据， 或者想在一些没有持久化的container中使用， </span><br><span class="line">最好的方法就是使用 Data Volumn Container, </span><br><span class="line">在把数据mount到你的container里.(译者：如开篇译者提到的docker的container是无状态的， </span><br><span class="line">也就是说标记状态的数据，例如：数据库数据， 应用程序的log 等等， 是不应该放到container里的， 而是放到 Data Volume </span><br><span class="line">Container里, 这点和funcational programming很像， 所以我喜欢把一般的docker container 叫做 </span><br><span class="line">functional container用来区分 data volume container ）</span><br><span class="line">这里的意思相当于有个最简洁的容器来专门跑存储容器，之后的启动的容器都可以使用 docker run --volumes-from 从存储数据容器中来实现数据的共享。</span><br><span class="line">$ docker run -d -v /dbdata --name dbdata training/postgres</span><br><span class="line"> </span><br><span class="line">这样做之后就可以通过 --volumes-from 把 /dbdata mount到其他的container里了</span><br><span class="line"></span><br><span class="line">$ docker run -d --volumes-from dbdata --name db1 training/postgres</span><br><span class="line"> </span><br><span class="line">还可以继续共享到另外一个container里</span><br><span class="line"></span><br><span class="line">$ docker run -d --volumes-from dbdata --name db2 training/postgres</span><br><span class="line"> </span><br><span class="line">-volumes-from 可以多次使用来 mount 多个conatainer里的多个volumes。</span><br><span class="line"></span><br><span class="line">这个操作是链式的， 我们在db1 中通过 --volumes-from mount进来的 volume可以继续被其他container使用</span><br><span class="line"></span><br><span class="line">$ docker run -d --name db3 --volumes-from db1 training/postgres</span><br><span class="line"> </span><br><span class="line">(译者:</span><br><span class="line"> 这里我们不是直接使用 volume container， 而是使用db1 这个functional container 把volume </span><br><span class="line">挂载到另外一个 funcational container上的，所谓的链式就是 dbdata -&gt; db1 -&gt; db3)</span><br><span class="line"></span><br><span class="line">如果你把所有mount volumes的container都移除掉， 包括初始化的那个 dbdata container， volume才会被移除掉。通过这个属性可以方便的升级升级数据或者在不同container间migrate数据.</span><br><span class="line"></span><br><span class="line">备份、恢复和移植数据卷</span><br><span class="line"></span><br><span class="line">Volume的另外一个用处就是备份、恢复和migrate数据。 具体的做法如下，使用 --volumes-from 来创建一个新的container mount这个volume</span><br><span class="line"></span><br><span class="line">$ sudo docker run --volumes-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata</span><br><span class="line"> </span><br><span class="line">&gt;</span><br><span class="line">    这里我们启动了一个新的container， </span><br><span class="line">从 dbdata 挂载了一个volume。同时挂载了一个本地目录到这个container里。最后我们通过一个 tar命令把 dbdata 里的数据备份到了 /backup 里。命令结束并且停止这个container后我们就在本地得到了一个备份的数据.</span><br><span class="line"></span><br><span class="line">(译者: 这里使用的 ubuntu container， 就是为了把volume中的数据打包备份到host的某一个目录里。)</span><br><span class="line"></span><br><span class="line">备份的数据可以恢复到这个container， 或者其他使用这个volume的container。首先创建一个container</span><br><span class="line"></span><br><span class="line">$ sudo docker run -v /dbdata --name dbdata2 ubuntu</span><br><span class="line"> </span><br><span class="line">&gt;    之后un-tar备份文件到 data volume 里</span><br><span class="line"></span><br><span class="line">$ sudo docker run --volumes-from dbdata2 -v $(pwd):/backup busybox tar xvf /backup/backup.tar</span><br><span class="line"> </span><br><span class="line">你可以使用你喜欢的工具加上上面的技术来自动备份，迁移和恢复数据</span><br></pre></td></tr></table></figure><p>实践:在Docker容器中运行web应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先docker pull nginx 或者制作好web应用的镜像.</span><br><span class="line">docker run -idt -p 80:80 -v /docker/download/:/data/ download:1 #以后台进程运行</span><br><span class="line">docker exec 容器id nginx #使用docker exec执行nginx 启动命令</span><br><span class="line">docker top #查看容器内的进程运行状态</span><br></pre></td></tr></table></figure><p>开启动一个长时间运行的后台进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=$(docker run -d centos /bin/bash -c &quot;while true; do echo hello world; sleep 1; done&quot;)</span><br><span class="line"></span><br><span class="line">docker logs $a ##将会看到有hello world</span><br></pre></td></tr></table></figure><h4 id="删除Docker镜像"><a href="#删除Docker镜像" class="headerlink" title="删除Docker镜像"></a>删除Docker镜像</h4><p>首先要保证有权限对Docker镜像或者容器进行操作，具体做法参见进入前文安装部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 停止所有容器</span><br><span class="line">$ docker stop $(docker ps -a -q)</span><br><span class="line"></span><br><span class="line"># 删除指定镜像</span><br><span class="line">$ docker rmi $image</span><br><span class="line"></span><br><span class="line"># 删除无标示镜像，即id为&lt;None&gt;的镜像</span><br><span class="line">$ docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;&#123;print $3&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 删除所有镜像</span><br><span class="line">$ docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="在Docker构建nginx容器-在构建Dockerfile时应在空目录下构建"><a href="#在Docker构建nginx容器-在构建Dockerfile时应在空目录下构建" class="headerlink" title="在Docker构建nginx容器 #在构建Dockerfile时应在空目录下构建"></a>在Docker构建nginx容器 #在构建Dockerfile时应在空目录下构建</h3><h4 id="构建dockerfile"><a href="#构建dockerfile" class="headerlink" title="构建dockerfile"></a>构建dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;&lt;\EOF &gt; Dockerfile </span><br><span class="line"># Nginx</span><br><span class="line">#</span><br><span class="line"># Version 1.0</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER djluo &lt;dj.luo@baoyugame.com&gt;</span><br><span class="line">RUN rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">RUN yum -y install nginx; yum clean all</span><br><span class="line">EOF</span><br><span class="line">#通过Dockerfile在容器中安装nginx</span><br><span class="line">docker build -t nginx:1.0 . #-t 只是个版本名称</span><br></pre></td></tr></table></figure><h4 id="进入容器修改配置文件"><a href="#进入容器修改配置文件" class="headerlink" title="进入容器修改配置文件:"></a>进入容器修改配置文件:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bash-4.2# </span><br><span class="line">bash-4.2# rm conf.d/&#123;default.conf,example_ssl.conf&#125;</span><br><span class="line">bash-4.2# rm -f /etc/nginx/&#123;koi-utf,koi-win,scgi_params,uwsgi_params,win-utf&#125;</span><br><span class="line">bash-4.2# cat&lt;&lt;\EOF &gt; /etc/nginx/conf.d/download.conf </span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root       /data/html;</span><br><span class="line">    access_log /data/logs/download.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">bash-4.2# mkdir -p /data/&#123;html,logs&#125;</span><br><span class="line">bash-4.2# /usr/sbin/nginx -t </span><br><span class="line">bash-4.2# exit</span><br></pre></td></tr></table></figure><h4 id="制作成镜像commit"><a href="#制作成镜像commit" class="headerlink" title="制作成镜像commit:"></a>制作成镜像commit:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps -l # 获取最新的一个容器信息，通常就是上面操作的了。</span><br><span class="line">docker commit -a &quot;djluo &lt;dj.luo@baoyugame.com&gt;&quot; -m &quot;用于docker build的下载环境&quot; 07d7a871cf32 download:1</span><br><span class="line">docker rm 07d7a871cf32 # 删除容器</span><br></pre></td></tr></table></figure><h4 id="构建Nginx的主目录和日志目录"><a href="#构建Nginx的主目录和日志目录" class="headerlink" title="构建Nginx的主目录和日志目录:"></a>构建Nginx的主目录和日志目录:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/docker/download/&#123;html,logs&#125;</span><br><span class="line">echo &quot;Hi&quot; &gt; ~/docker/download/html/index.html</span><br></pre></td></tr></table></figure><h4 id="正式运行下载环境的容器：需要映射端口，公网访问"><a href="#正式运行下载环境的容器：需要映射端口，公网访问" class="headerlink" title="正式运行下载环境的容器：需要映射端口，公网访问"></a>正式运行下载环境的容器：需要映射端口，公网访问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 --name download -v /docker/download/:/data/ download:1 /usr/sbin/nginx</span><br><span class="line">#将docker容器里的80端口映射到宿主机的80，好让外网访问，-v共享存储卷，将宿主机的目录数据挂载到容器里  并且启动nginx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正确的用法：应该是分为2个容器，应用容器和管理容器。</span><br><span class="line">应用容器：跑具体的应用，如nginx、java、php等。将应用数据放到VOULME中。</span><br><span class="line">管理容器：跑SSHD，并挂载上应用容器的数据VOULME。随心所欲的操作吧。</span><br><span class="line">不过有些应用的重启、重新导入配置等，可能需要到容器外操作</span><br><span class="line">docker守护进进程(服务端)默认以unixsocket方式启动，如果需要用到远程调用需要使用remoteapi</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">以下是一个RUN格式正确的指导，显示所有apt-get 建议。</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">    aufs-tools \</span><br><span class="line">    automake \</span><br><span class="line">    build-essential \</span><br><span class="line">    curl \</span><br><span class="line">    dpkg-sig \</span><br><span class="line">    libcap-dev \</span><br><span class="line">    libsqlite3-dev \</span><br><span class="line">    mercurial \</span><br><span class="line">    reprepro \</span><br><span class="line">    ruby1.9.1 \</span><br><span class="line">    ruby1.9.1-dev \</span><br><span class="line">    s3cmd=1.1.* \</span><br><span class="line"> &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">####################ENTRYPOINT###############################</span><br><span class="line">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] （exec表格，首选）</span><br></pre></td></tr></table></figure><p>docker 默认本地的仓库目录，存储着push的镜像。</p><p>这个目录默认是100g，超过了将会push失败，所以建议定时清理。</p><h3 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp &lt;containerId&gt;:/file/path/within/container /host/path/target</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker 镜像导入和导出</span><br><span class="line">导出镜像</span><br><span class="line">docker save -o centos7.tar centos</span><br><span class="line">导入本地镜像</span><br><span class="line">sudo docker load --input centos7.tar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker有两个概念需要搞清楚,镜像与容器。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>我的 Python 开发环境</title>
    <link href="https://yo42.github.io/2018/09/09/%E4%BD%A0%E7%9A%84-Python-%E5%BC%80%E5%8F%91%E8%80%85%E7%8E%AF%E5%A2%83/"/>
    <id>https://yo42.github.io/2018/09/09/你的-Python-开发者环境/</id>
    <published>2018-09-09T09:45:16.827Z</published>
    <updated>2018-09-09T09:49:14.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><p>任何可以做纯文本编辑的工具都可以用来写Python代码，但是用功能更加强大的文本编辑器可以使你的编程工作更加轻松。</p><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>Vim 是一个用键盘快捷键代替菜单和图标来操作的文本编辑器。对于 Vim 编辑器，有几个插件和设置可以用来辅助 Python 开发。如果你只用 Python 开发，一个好的开始就是把缩进和换行的默认设置设置成兼容 <a href="https://www.python.org/dev/peps/pep-0008" target="_blank" rel="noopener"><strong>PEP 8</strong></a> 的值。 在你的主目录里，打开一个叫作 <code>.vimrc</code> 的文件并且把下面这些代码添加进去：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set textwidth=<span class="number">79</span>  <span class="string">" 行宽超过 79 会被截断</span></span><br><span class="line"><span class="string">set shiftwidth=4  "</span> 操作符 &gt;&gt; 缩进 <span class="number">4</span> 列；&lt;&lt; 减少缩进 <span class="number">4</span> 列</span><br><span class="line">set tabstop=<span class="number">4</span>     <span class="string">" 一个 TAB 显示为 4 列</span></span><br><span class="line"><span class="string">set expandtab     "</span> 用空格代替 TAB</span><br><span class="line">set softtabstop=<span class="number">4</span> <span class="string">" 敲击 TAB/BACKSPACE 插入 / 删除 4 个空格 </span></span><br><span class="line"><span class="string">set shiftround    "</span> 缩进为 <span class="string">'shiftwidth'</span> 的倍数</span><br><span class="line">set autoindent    <span class="string">" 新行缩进与上一行对齐</span></span><br></pre></td></tr></table></figure><p>使用这些设置，行宽超过 79 个字符会自动换行，并且缩进设置为用 4 个空格代替一个制表符。如果你还用 Vim 写其它的语言，有一个很方便的插件 <a href="http://www.vim.org/scripts/script.php?script_id=974" target="_blank" rel="noopener">indent</a> ，用来处理 Python 源文件的缩进设置。</p><p>还有一个很方便的语法插件 <a href="http://www.vim.org/scripts/script.php?script_id=790" target="_blank" rel="noopener">syntax</a>，对 Vim 6.1 里自带的语法文件做了一些增强。</p><p>这些插件为你用 Python 开发提供了一个基本环境。你应该充分利用 Vim 去持续检查你的代码是否有语法错误并且是否符合 PEP8 规范。幸运的是有 <a href="https://pypi.python.org/pypi/pycodestyle/" target="_blank" rel="noopener">pycodestyle</a> 和 <a href="http://pypi.python.org/pypi/pyflakes/" target="_blank" rel="noopener">Pyflakes</a> 来帮你做这些事。如果你的 Vim 编译时附带了 <code>+python</code> ，你也可以使用一些自带的插件非常方便的来做这些检查。</p><p>对于 PEP8 和 Pyflakes ，你可以安装 <a href="https://github.com/nvie/vim-flake8" target="_blank" rel="noopener">vim-flake8</a>。然后你就可以在 Vim 里把 <code>Flake8</code> 功能映射到任何快捷键或操作上了。这个插件会在屏幕下方显示错误信息，并且提供一个简单的方式来跳转到对应的行。设置成每当你保存文件的时候就调用这个功能会很方便。如果想这样做，添加这行代码到你的 <code>.vimrc</code> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autocmd BufWritePost *.py call Flake8()</span><br></pre></td></tr></table></figure><p>如果你已经使用了 <a href="https://github.com/scrooloose/syntastic" target="_blank" rel="noopener">syntastic</a> ，你可以把它设置成在写入的时候自动运行 Pyflakes 并且在 quickfix 窗口里显示错误和警告信息。下面是一个在状态栏里显示检查状态和警告信息的示例配置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set statusline+=%<span class="comment">#warningmsg#</span></span><br><span class="line">set statusline+=%&#123;SyntasticStatuslineFlag()&#125;</span><br><span class="line">set statusline+=%*</span><br><span class="line">let g:syntastic_auto_loc_list=<span class="number">1</span></span><br><span class="line">let g:syntastic_loc_list_height=<span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="Python-mode"><a href="#Python-mode" class="headerlink" title="Python-mode"></a>Python-mode</h4><p><a href="https://github.com/klen/python-mode" target="_blank" rel="noopener">Python-mode</a> 是 Vim 编辑器中一个复杂的编写 Python 代码的解决方案。有以下功能：</p><ul><li>让任意的 Python 代码检查工具(<code>pylint</code>, <code>pyflakes</code>, <code>pycodestyle</code>, <code>mccabe</code>) 都能协同工作</li><li>使用 Rope 进行代码重构以及自动填写</li><li>快速折叠 Python 代码</li><li>虚拟环境支持</li><li>全文搜索 Python 文档，运行 Python代码</li><li>自动使用 <a href="https://pypi.python.org/pypi/pycodestyle/" target="_blank" rel="noopener">pycodestyle</a> 修正错误</li></ul><p>等等。</p><h4 id="SuperTab"><a href="#SuperTab" class="headerlink" title="SuperTab"></a>SuperTab</h4><p><a href="http://www.vim.org/scripts/script.php?script_id=1643" target="_blank" rel="noopener">SuperTab</a> 是一个小型的 Vim 插件，可以用 <code>&lt;Tab&gt;</code> 键或者其他的自定义键来方便的完成代码自动填写。</p><h3 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h3><p>Emacs 是另一个强大的文本编辑器。它是完全可编程的（lisp），但学习曲线有点陡。 如果您已经是一名 Emacs 的用户了，推荐阅读 EmacsWiki 上的 <a href="http://emacswiki.org/emacs/PythonProgrammingInEmacs" target="_blank" rel="noopener">Python Programming in Emacs</a> 。</p><ol><li>Emacs 本身支持Python模式。</li></ol><h3 id="TextMate"><a href="#TextMate" class="headerlink" title="TextMate"></a>TextMate</h3><p><a href="http://macromates.com/" target="_blank" rel="noopener">TextMate</a> 是一个带有苹果操作系统气质的文本编辑器。 巧取了 UNIX 和 GUI 的各自优点，TextMate 将两者中最好的部分带给了脚本专家和新手用户。</p><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><blockquote><p><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a> 是一个设计精良的编辑器，你可以用来编写脚本代码、标记代码和一般的文字编辑。您将会爱上其漂亮的用户界面、非凡的特性和惊人的运行速度。</p></blockquote><p>Sublime Text has excellent support for editing Python code and uses Python for its plugin API. It also has a diverse variety of plugins, <a href="https://github.com/SublimeLinter/SublimeLinter" target="_blank" rel="noopener">some of which</a> allow for in-editor PEP8 checking and code “linting”.</p><p>Sublime Text 对 Python 代码提供了非常棒的支持，而且其插件系统的 API 也是有 Python 语言编写的。它拥有大量各式各样的插件，  <a href="https://github.com/SublimeLinter/SublimeLinter" target="_blank" rel="noopener">其中一些</a>  允许编辑器内的 PEP8 检查和代码错误提示。</p><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><blockquote><p><a href="https://atom.io/" target="_blank" rel="noopener">Atom</a> 是一款 21 世纪的可定制性极高的文本编辑器。构建于atom-shell上，它拥有我们所喜欢的编辑器的所有优秀特性。</p></blockquote><p>Atom 是 Web 原生的（HTML、CSS、JS），编辑器核心专注于模块化的设计和插件开发的便捷性。它自带本地包管理和大量的扩展包。Atom 下从事 Python 开发所推荐的插件是 <a href="https://github.com/AtomLinter/Linter" target="_blank" rel="noopener">Linter</a> 和 <a href="https://github.com/AtomLinter/linter-flake8" target="_blank" rel="noopener">linter-flake8</a> 的组合。</p><h2 id="IDEs"><a href="#IDEs" class="headerlink" title="IDEs"></a>IDEs</h2><h3 id="PyCharm-IntelliJ-IDEA"><a href="#PyCharm-IntelliJ-IDEA" class="headerlink" title="PyCharm / IntelliJ IDEA"></a>PyCharm / IntelliJ IDEA</h3><p><a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a> 由 JetBrains 公司开发，此公司还以 IntelliJ IDEA 闻名。它们都共享着相同的基础代码，PyCharm 中大多数特性能通过免费的 Python 插件带入到 IntelliJ 中。PyCharm 由两个版本：专业版（Professional Edition）（30天试用）和拥有功能相对较少的社区版（Community Edition）（Apache 2.0 License）。</p><h3 id="使用-Visual-Studio-Code-来编辑-Python"><a href="#使用-Visual-Studio-Code-来编辑-Python" class="headerlink" title="使用 Visual Studio Code 来编辑 Python"></a>使用 Visual Studio Code 来编辑 Python</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="noopener">Python for Visual Studio</a> 是一款基于 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code IDE</a> 的扩展。 它是一个免费的、轻量的、开源的 IDE，支持 Mac、Windows 和 Linux 等主流平台。它以诸如 Node.js 和 Python 等开源技术构建，具有如智能自动补全、本地和远程调试、linting（代码检查）等 引人注目的特性。</p><p>MIT licensed.</p><h3 id="Enthought-Canopy"><a href="#Enthought-Canopy" class="headerlink" title="Enthought Canopy"></a>Enthought Canopy</h3><p><a href="https://www.enthought.com/products/canopy/" target="_blank" rel="noopener">Enthought Canopy</a> 是一款专门面向科学家 和工程师的 Python IDE，它预装了为数据分析而用的库。</p><h3 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h3><p>Eclipse 中进行 Python 开发最流行的插件是 Aptana 的 <a href="http://pydev.org/" target="_blank" rel="noopener">PyDev</a>。</p><h3 id="Komodo-IDE"><a href="#Komodo-IDE" class="headerlink" title="Komodo IDE"></a>Komodo IDE</h3><p><a href="http://www.activestate.com/komodo-ide" target="_blank" rel="noopener">Komodo IDE</a>  由 ActiveState 开发，并且是能运行在 Windows、Mac 和 Linux 平台上的商业 IDE。<a href="https://github.com/Komodo/KomodoEdit" target="_blank" rel="noopener">KomodoEdit</a> 是其开源版本。</p><h3 id="Spyder"><a href="#Spyder" class="headerlink" title="Spyder"></a>Spyder</h3><p><a href="https://github.com/spyder-ide/spyder" target="_blank" rel="noopener">Spyder</a> 是一款专门面向 Python科学库（即 <a href="http://www.scipy.org/" target="_blank" rel="noopener">Scipy</a>）的 IDE。它集成了 <a href="http://pypi.python.org/pypi/pyflakes/" target="_blank" rel="noopener">pyflakes</a> 、 <a href="http://www.logilab.org/857" target="_blank" rel="noopener">pylint</a> 和 <a href="https://github.com/python-rope/rope" target="_blank" rel="noopener">rope</a> 。</p><p>Spyder 是免费开源的，功能包括代码补全、语法高亮、类和函数浏览器，以及对象检查等。</p><h3 id="WingIDE"><a href="#WingIDE" class="headerlink" title="WingIDE"></a>WingIDE</h3><p><a href="http://wingware.com/" target="_blank" rel="noopener">WingIDE</a> 是一个专门面向 Python 的 IDE。它能运行在 Linux、Windows 和 Mac 上（作为一款 X11 应用程序，某些 Mac 用户可能会无法使用）。</p><p>WingIDE 提供了代码补全、语法高亮、源代码浏览器、图形化调试器的功能，还支持版本控制系统。</p><h3 id="NINJA-IDE"><a href="#NINJA-IDE" class="headerlink" title="NINJA-IDE"></a>NINJA-IDE</h3><p><a href="http://www.ninja-ide.org/" target="_blank" rel="noopener">NINJA-IDE</a> 的名称来自递归缩写：”Ninja-IDE Is Not Just Another IDE”， 是一款跨平台的IDE，专为构建 Python 应用而打造，并能运行于 Linux/X11、Mac OS X 和 Windows 桌面操作系统上。从网上可以下载到这些平台的安装包。</p><p>NINJA-IDE 是一款开源软件（GPLv3许可），是使用 Python 和 Qt 开发。在 <a href="https://github.com/ninja-ide" target="_blank" rel="noopener">GitHub</a> 能下载到源文件。</p><h3 id="Eric-The-Eric-Python-IDE"><a href="#Eric-The-Eric-Python-IDE" class="headerlink" title="Eric (The Eric Python IDE)"></a>Eric (The Eric Python IDE)</h3><p><a href="http://eric-ide.python-projects.org/" target="_blank" rel="noopener">Eric</a> 是一款功能齐全的Python IDE， 提供源代码自动补全、语法高亮、对版本控制系统的支持、对Python 3 的支持、集成的 Web 浏览器、 Python Shell、集成调试器和灵活的插件系统等功能。它基于 Qt GUI 工具集，使用 Python 编写， 集成了 Scintilla 编辑器控制。Eric 是一款超过 10 年仍活跃开发的开源软件（GPLv3许可）。</p><h2 id="解释器工具"><a href="#解释器工具" class="headerlink" title="解释器工具"></a>解释器工具</h2><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><p>虚拟环境完整隔离项目包依赖，这意味着您无须全局（系统范围内）安装 Python 工程特定的包， 因此就能避免潜在的版本冲突。</p><p>使用时请参阅 <a href="http://github.com/kennethreitz/python-guide/blob/master/docs/dev/virtualenvs.rst" target="_blank" rel="noopener">Virtual Environments</a> 文档。</p><h3 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h3><p><a href="https://github.com/yyuu/pyenv" target="_blank" rel="noopener">pyenv</a> 是一个允许多个 Python 解释器版本同时安装于一台机器的工具。这解决了不同的项目需要不同版本的 Python 的问题。比如，为了兼容性， 可以很容易地为一个项目安装 Python 2.7，而继续使用 Python 3.4 作为默认的解释器。 pyenv 不止限于 CPython 版本——它还能安装 PyPy、anaconda、miniconda、stackless、jython 和 ironpython 解释器。</p><p>pyenv 的工作原理是在一个叫做 <code>shims</code> 目录中创建 Python 解释器（以及其他工具像 <code>pip</code> 和 <code>2to3</code> 等）的伪造应用。当系统寻找名为 <code>python</code> 的应用时，它会先在 <code>shims</code> 目录中寻找并使用对应假版本的应用，然后会传递命令到 pyenv 中。 pyenv 再根据环境变量、<code>.python-version</code> 文件和全局默认设置的信息来判断该运行哪个版本的 Python。</p><p>pyenv 不是管理虚拟环境的工具，但是有一个叫做 <a href="https://github.com/yyuu/pyenv-virtualenv" target="_blank" rel="noopener">pyenv-virtualenv</a> 的插件可以自动化不同环境的创建，而且也能够直接集成到现有的 pyenv 工具中，基于环境变量或者 <code>.python-version</code> 文件，来切换不同的环境。</p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><h3 id="IDLE"><a href="#IDLE" class="headerlink" title="IDLE"></a>IDLE</h3><p><a href="http://docs.python.org/library/idle.html#idle" target="_blank" rel="noopener">IDLE</a> 是一个集成的开发环境，它是 Python 标准库的一部分。 它完全由 Python 编写，并使用 Tkinter GUI 工具集。尽管 IDLE 不适用于作为成熟的 Python 开发工具，很多时候我们用来尝试运行简单的 Python 代码片段，或者对 Python 不同特性做一些小实验。</p><p>它提供以下特性：</p><ul><li>Python Shell 窗口（解释器）</li><li>多窗口文本编辑器，支持 Python 代码高亮</li><li>最小的调试工具</li></ul><h3 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h3><p><a href="http://ipython.org/" target="_blank" rel="noopener">IPython</a> 提供一个丰富的工具集来帮助您最大限度地和 Python 交互。 它主要的组件有：</p><ul><li>强大的 Python shell（基于终端和 Qt ）。</li><li>一个基于网络的笔记本，拥有相同的核心特性，但是支持富媒体、文本、代码、数学表达式和内联绘图。</li><li>支持交互式的数据可视化和 GUI 工具集的使用。</li><li>灵活、嵌入的解释器载入到您的工程工程中。</li><li>支持高级可交互的并行计算的工具。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install ipython</span><br></pre></td></tr></table></figure><p>使用以下命令下载和安装带有所有可选依赖（notebook、qtconsol、tests 和其他功能）的 IPython：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install ipython[all]</span><br></pre></td></tr></table></figure><h3 id="BPython"><a href="#BPython" class="headerlink" title="BPython"></a>BPython</h3><p><a href="http://bpython-interpreter.org/" target="_blank" rel="noopener">bpython</a> 在类 Unix 操作系统中可替代 Python 解释器的接口。 它有以下特性：</p><ul><li>内建的语法高亮。</li><li>行内输入时的自动补全建议。</li><li>Python 函数预期选项提供。</li><li>“倒带” 功能 —— 从内存中 pop 出代码的最后一行并重新运行。</li><li>将输入的代码发送到 pastebin。</li><li>将输入的代码保存到一个文件中。</li><li>自动缩进。</li><li>支持 Python 3。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install bpython</span><br></pre></td></tr></table></figure><h3 id="ptpython"><a href="#ptpython" class="headerlink" title="ptpython"></a>ptpython</h3><p><a href="https://github.com/jonathanslenders/ptpython/" target="_blank" rel="noopener">ptpython</a> 是一个构建在 <a href="http://github.com/jonathanslenders/python-prompt-toolkit" target="_blank" rel="noopener">prompt_toolkit</a> 库之上的 REPL。它被视作是 <a href="http://bpython-interpreter.org/" target="_blank" rel="noopener">BPython</a> 的替代。特性包括：</p><ul><li>语法高亮</li><li>自动补全</li><li>多行编辑</li><li>Emacs 和 VIM 模式</li><li>代码中嵌入的 REPL</li><li>语法合法性检测</li><li>支持 Tab 页</li><li>通过 <code>pip install ipython</code> 安装后运行 <code>ptipython</code>，即可支持集成 <a href="http://ipython.org/" target="_blank" rel="noopener">IPython</a> 的 shell：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install ptpython</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文本编辑器&quot;&gt;&lt;a href=&quot;#文本编辑器&quot; class=&quot;headerlink&quot; title=&quot;文本编辑器&quot;&gt;&lt;/a&gt;文本编辑器&lt;/h2&gt;&lt;p&gt;任何可以做纯文本编辑的工具都可以用来写Python代码，但是用功能更加强大的文本编辑器可以使你的编程工作更加轻松。&lt;
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python 底层虚拟环境 virtualenv</title>
    <link href="https://yo42.github.io/2018/09/09/python-%E5%BA%95%E5%B1%82%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83-virtualenv/"/>
    <id>https://yo42.github.io/2018/09/09/python-底层虚拟环境-virtualenv/</id>
    <published>2018-09-09T09:41:57.899Z</published>
    <updated>2018-09-09T09:49:38.446Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://pypi.python.org/pypi/virtualenv" target="_blank" rel="noopener">virtualenv</a> 是一个创建独立的 Python 环境。 virtualenv 会创建一个文件夹，其中包含使用 Python 项目所有所需的可执行文件。</p><p>它可以单独使用，用于代替 Pipenv 。</p><p>通过 pip 安装 virtualenv ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install virtualenv</span><br></pre></td></tr></table></figure><p>测试下是否安装完成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv --version</span><br></pre></td></tr></table></figure><ol><li>为项目创建一个虚拟环境：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd my_project_folder</span><br><span class="line">$ virtualenv my_project</span><br></pre></td></tr></table></figure><p><code>virtualenv my_project</code> 将会在当前目录创建一个文件夹来存放 Python 的可执行文件以及拷贝一份 <code>pip</code>库，这样就能安装其他包了。虚拟环境名字（ 这里是 <code>myproject</code> ）可以随意，若省略名字将会把文件均放在当前目录。</p><p>这将在你运行此命令的文件目录下创建一个 Python 的副本，并将其放入名为 <code>my_project</code> 的文件夹中</p><p>你也可以选择 Python 解释器（如 <code>python2.7</code> ） 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv -p /usr/bin/python2<span class="number">.7</span> my_project</span><br></pre></td></tr></table></figure><p>或者改变 <code>~/.bashrc</code> 中的解释器的全局环境变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python2<span class="number">.7</span></span><br></pre></td></tr></table></figure><ol><li>开始使用虚拟环境前，需要先激活：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source my_project/bin/activate</span><br></pre></td></tr></table></figure><p>当前虚拟环境的名称将出现在提示符的左侧 (e.g. <code>(my_project)Your-Computer:your_project UserName$)</code>  ，这样你就能了解当前激活的虚拟环境是什么。 自此，你使用 pip 安装的任何包都会放在 <code>my_project</code> 文件夹，与全局 Python 安装的包相互独立。</p><p>安装包的话就与往常一样，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install requests</span><br></pre></td></tr></table></figure><ol><li>如果你在虚拟环境中暂时完成了工作，可以这样停用它：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ deactivate</span><br></pre></td></tr></table></figure><p>这样你就回到了系统默认的 Python 解释器，包括安装的库页会回到默认的。</p><p>要删除一个虚拟环境，只需要删除对应文件夹。( 以当前示例来说，执行 <code>rm -rfmy_project</code>) 。</p><p>然而 virtualenv 也有些不便之处，因为一段时间后你的系统中可能会有很多虚拟环境散落在各处，这样会让你忘记它们的名字或位置</p><p>运行  <code>virtualenv</code> 带上选项  <code>--no-site-packages</code>  将不会包含已经全局安装的包。这样有助于保持包列表的整洁以防万一之后需要访问它。<br>[ 这在 <code>virtualenv</code> 1.7 是默认的哦。 ]</p><p>为了保持环境的一致性，“冻结”当前环境包的状态是正确的选择。冻结环境可以运行下面的命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>该命令将创建一个 <code>requirements.txt</code> 文件，里面包含有当前环境所有包的简单列表及对应的版本。你可以使用 “pip list” 查看没有安装格式的已安装包列表。之后，对于开发人员（或你需要重新安装环境）来说就可以很容易的安装相同的版本一致的包，这样就能完全搭建出与之前一致的环境了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>这样有助于在跨设备，跨部署，跨人员的情况下保证环境的一致性。</p><p>最后，记得将虚拟环境文件夹从源代码控制中排除，也就是将其添加到 ignore 列表中 ( 详见 <a href="http://docs.python-guide.org/en/latest/writing/gotchas/#version-control-ignores" target="_blank" rel="noopener">Version Control Ignores</a>).</p><h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><p><a href="https://virtualenvwrapper.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">virtualenvwrapper</a> 提供一系列命令让你更加愉快地操作虚拟环境。它还将所有虚拟环境放在一块。</p><p>安装方法如下 ( 请确保 <strong>virtualenv</strong> 已安装 ) ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install virtualenvwrapper</span><br><span class="line">$ export WORKON_HOME=~/Envs</span><br><span class="line">$ source /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><p>(<a href="https://virtualenvwrapper.readthedocs.io/en/latest/install.html" target="_blank" rel="noopener">virtualenvwrapper 安装说明 </a>.)</p><p>对于 Windows 用户，你可以使用 <a href="https://github.com/davidmarble/virtualenvwrapper-win/" target="_blank" rel="noopener">virtualenvwrapper-win</a>.</p><p>安装方式如下 ( 请确保 <strong>virtualenv</strong> 已安装 ) ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p>在 Windows 中，设置环境变量 WORKON_HOME ，内容为 %USERPROFILE%Envs</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ol><li>创建虚拟环境</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkvirtualenv my_project</span><br></pre></td></tr></table></figure><p>该指令将在 <code>~/Envs</code> 创建 <code>my_project</code> 文件夹。</p><ol><li>在虚拟环境下工作：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ workon my_project</span><br></pre></td></tr></table></figure><p>或者，你可以通过创建项目来创建虚拟环境，该项目目录要在 <code>$WORKON_HOME</code> 下，当你在 <code>workon myproject</code> 时可以 <code>cd</code> 进入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkproject myproject</span><br></pre></td></tr></table></figure><p><strong>virtualenvwrapper</strong> 为环境名称提供 tab 键补全功能。当你有很多环境又很难记住它们的名字时，该功能很有帮助。</p><p><code>workon</code> 也会使你当前所在的环境失效，这样你就可以在不同地环境间快速切换。</p><ol><li>停止虚拟环境：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ deactivate</span><br></pre></td></tr></table></figure><ol><li>删除虚拟环境：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rmvirtualenv venv</span><br></pre></td></tr></table></figure><h3 id="其他有用的命令"><a href="#其他有用的命令" class="headerlink" title="其他有用的命令"></a>其他有用的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsvirtualenv</span><br></pre></td></tr></table></figure><p>列出所有虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdvirtualenv</span><br></pre></td></tr></table></figure><p>进入当前的虚拟环境目录，这样你就可以浏览它的 <code>site-packages</code> ，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cdsitepackages</span><br></pre></td></tr></table></figure><p>上述命令将进入虚拟环境的 <code>site-packages</code> 目录.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lssitepackages</span><br></pre></td></tr></table></figure><p>列出 <code>site-packages</code> 目录下所有软件包.</p><p><a href="https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html" target="_blank" rel="noopener">virtualenvwrapper 的全部命令列表 </a>.</p><h2 id="virtualenv-burrito"><a href="#virtualenv-burrito" class="headerlink" title="virtualenv-burrito"></a>virtualenv-burrito</h2><p>使用 <a href="https://github.com/brainsik/virtualenv-burrito" target="_blank" rel="noopener">virtualenv-burrito</a> ，你可以只要使用一条命令就将 virtualenv + virtualenvwrapper 环境搭建起来。</p><h2 id="autoenv"><a href="#autoenv" class="headerlink" title="autoenv"></a>autoenv</h2><p>当你 <code>cd</code> 进一个含有 <code>.env</code> 的目录， <a href="https://github.com/kennethreitz/autoenv" target="_blank" rel="noopener">autoenv</a> 将自动激活虚拟环境。</p><p>Mac OS X 使用 <code>brew</code> 安装 autoenv 的方式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install autoenv</span><br></pre></td></tr></table></figure><p>Linux 安装方式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> git:<span class="comment">//github.com/kennethreitz/autoenv.git ~/.autoenv</span></span><br><span class="line">$ <span class="keyword">echo</span> <span class="string">'source ~/.autoenv/activate.sh'</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python-guide.org/" target="_blank" rel="noopener">python漫游指南</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://pypi.python.org/pypi/virtualenv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;virtualenv&lt;/a&gt; 是一个创建独立的 Python 环境。 virtualenv 会创建一个文件夹，其中
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python next step</title>
    <link href="https://yo42.github.io/2018/09/09/python-next-step/"/>
    <id>https://yo42.github.io/2018/09/09/python-next-step/</id>
    <published>2018-09-09T09:34:05.479Z</published>
    <updated>2018-09-09T09:42:03.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迈出下一步"><a href="#迈出下一步" class="headerlink" title="迈出下一步"></a>迈出下一步</h1><p>如果到现在你已经阅读过本书并且编写了许多程序，那么你一定已经开始熟悉并且习惯 Python 了。或许你已经创建了一些 Python 程序来尝试完成一些工作，同时锻炼你自己的 Python 技能。如果你尚未至此，你也应该作出努力。现在我们面临的问题是“下一步该做什么？”。</p><p>我会建议你试图解决这个问题：</p><blockquote><p>编写一款你自己的命令行<em>地址簿</em>程序，你可以用它浏览、添加、编辑、删除或搜索你的联系人，例如你的朋友、家人、同事，还有他们诸如邮件地址、电话号码等多种信息。这些详细信息必须被妥善储存以备稍后的检索。</p></blockquote><p>如果你回想至今我们学过、讨论过、遇见过的所有东西，你会发现这其实非常简单。如果你仍想要有关如何进行的提示，这儿倒是有一些。</p><p>如果你觉得上面的程序太容易了，这还有另一个：</p><blockquote><p>实现<a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?replace" target="_blank" rel="noopener">替换命令</a>。这个命令能将一串字符串替换为另外提供的文件或列表中的另一串。</p></blockquote><p>只要你想，替换命令可以或简单或复杂地实现，从简单的字符串替换到搜寻搭配的样式（正则表达式）。</p><h2 id="下一个项目"><a href="#下一个项目" class="headerlink" title="下一个项目"></a>下一个项目</h2><p>如果你发现上面的程序都能很容易地编写出来，那么看看下面这个完整的项目列表，并尝试编写你自己的程序：<a href="https://github.com/thekarangoel/Projects#numbers" target="_blank" rel="noopener">https://github.com/thekarangoel/Projects#numbers</a> (这一列表与 <a href="http://www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/" target="_blank" rel="noopener">Martyr2 的超级项目列表</a>相同)。</p><p>你还可以看看：</p><ul><li><a href="https://pragprog.com/book/bhwb/exercises-for-programmers" target="_blank" rel="noopener">Exercises for Programmers: 57 Challenges to Develop Your Coding Skills</a></li><li><a href="https://openhatch.org/wiki/Intermediate_Python_Workshop/Projects" target="_blank" rel="noopener">Intermediate Python Projects</a></li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>学习一门编程语言的最好方式就是编写大量代码，并阅读大量代码：</p><ul><li><a href="http://code.activestate.com/recipes/langs/python/" target="_blank" rel="noopener">Python Cookbook</a> 是一本极具价值的“烹饪法”与提示的集合，它介绍了如何通过 Python 解决某些特定类型的问题。</li><li><a href="http://pymotw.com/2/contents.html" target="_blank" rel="noopener">Python Module of the Week</a> 是另一本优秀的<a href="https://bop.mol.uno/stdlib.md#stdlib" target="_blank" rel="noopener">标准库</a>必读指南。</li></ul><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><ul><li><a href="http://docs.python-guide.org/en/latest/" target="_blank" rel="noopener">The Hitchhiker’s Guide to Python!</a></li><li><a href="https://github.com/amontalenti/elements-of-python-style" target="_blank" rel="noopener">The Elements of Python Style</a></li><li><a href="http://slott-softwarearchitect.blogspot.ca/2013/06/python-big-picture-whats-roadmap.html" target="_blank" rel="noopener">Python Big Picture</a></li><li><a href="http://www.jeffknupp.com/writing-idiomatic-python-ebook/" target="_blank" rel="noopener">“Writing Idiomatic Python” ebook</a> （付费）</li></ul><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul><li><a href="https://github.com/realpython/discover-flask" target="_blank" rel="noopener">Full Stack Web Development with Flask</a></li><li><a href="http://www.pyvideo.org/" target="_blank" rel="noopener">PyVideo</a></li></ul><h2 id="问与答"><a href="#问与答" class="headerlink" title="问与答"></a>问与答</h2><ul><li><a href="http://docs.python.org/3/howto/doanddont.html" target="_blank" rel="noopener">Official Python Dos and Don’ts</a></li><li><a href="http://www.python.org/doc/faq/general/" target="_blank" rel="noopener">Official Python FAQ</a></li><li><a href="http://norvig.com/python-iaq.html" target="_blank" rel="noopener">Norvig’s list of Infrequently Asked Questions</a></li><li><a href="http://dev.fyicenter.com/Interview-Questions/Python/index.html" target="_blank" rel="noopener">Python Interview Q &amp; A</a></li><li><a href="http://stackoverflow.com/questions/tagged/python" target="_blank" rel="noopener">StackOverflow questions tagged with python</a></li></ul><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul><li><a href="http://stackoverflow.com/q/101268/4869" target="_blank" rel="noopener">Hidden features of Python</a></li><li><a href="http://www.reddit.com/r/Python/comments/19dir2/whats_the_one_code_snippetpython_tricketc_did_you/" target="_blank" rel="noopener">What’s the one code snippet/python trick/etc did you wish you knew when you learned python?</a></li><li><a href="http://www.awaretek.com/tutorials.html" target="_blank" rel="noopener">Awaretek’s comprehensive list of Python tutorials</a></li></ul><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>如果你遇到了一个 Python 问题，但不知道该问谁，那么 <a href="http://mail.python.org/mailman/listinfo/tutor" target="_blank" rel="noopener">python-tutor list</a> 是你提问的最佳场所。</p><p>请确保你会自己做你的家庭作业，你会首先尝试自己解决问题，同时，还要会<a href="http://catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">问聪明的问题</a>。</p><h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><p>如果你希望了解 Python 世界的最新动态，那就跟随 <a href="http://planet.python.org/" target="_blank" rel="noopener">Official Python Planet</a> 的脚步吧。</p><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><p><a href="http://pypi.python.org/pypi" target="_blank" rel="noopener">Python 库索引</a>中包含了大量开源的库，你可以在你自己的程序中使用它们。</p><p>要想了解如何安装并使用这些库，你可以使用 <a href="http://www.pip-installer.org/en/latest/" target="_blank" rel="noopener">pip</a>。</p><h2 id="创建一个网站"><a href="#创建一个网站" class="headerlink" title="创建一个网站"></a>创建一个网站</h2><p>学习使用 <a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a> 来创建你自己的网站。下面这些资源有助于你开始学习：</p><ul><li><a href="http://flask.pocoo.org/docs/quickstart/" target="_blank" rel="noopener">Flask Official Quickstart</a></li><li><a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world" target="_blank" rel="noopener">The Flask Mega-Tutorial</a></li><li><a href="https://github.com/mitsuhiko/flask/tree/master/examples" target="_blank" rel="noopener">Example Flask Projects</a></li></ul><h2 id="图形软件"><a href="#图形软件" class="headerlink" title="图形软件"></a>图形软件</h2><p>假设你希望使用 Python 来创建你自己的图形程序。这可以通过采用一个 GUI（Graphical User Interface，图形用户界面）库和它们的 Python 绑定来实现。绑定是允许你用 Python 编写你自己的程序，然后使用它们在 C 或 C++ 或其它语言写编写的库。</p><p>使用 Python 的 GUI 有许多选择：</p><ul><li>Kivy<ul><li><a href="http://kivy.org/" target="_blank" rel="noopener">http://kivy.org</a></li></ul></li><li>PyGTK<ul><li>这是 GTK+ 工具包的 Python 绑定，它是构建 GNOME 的基础。GTK+ 有许多奇怪的用法，但是你一旦习惯了使用它，就能很快的创建出你的 GUI 应用。Glade 图形界面设计工具是不可或缺的。它的文档至今仍在不断改进。GTK+ 在 GNU/Linux 下能够良好工作，但是它针对 Windows 平台的移植工作尚未完成。你可以使用 GTK+ 创建免费或专有的软件。要想开始使用，请阅读 <a href="http://www.pygtk.org/tutorial.html" target="_blank" rel="noopener">PyGTK 教程</a>。</li></ul></li><li>PyQt<ul><li>这是 Qt 工具包的 Python 绑定，它是构建 KDE 的基础。 受益于 Qt Designer 与令人惊讶的 Qt 文档，Qt 十分容易使用也十分强大。如果你希望创建一款开源（GPL）软件，你可以免费使用 PyQt，不过如果你想创建专有的闭源软件，你需要购买它。从 Qt 4.5 开始你可以使用它来创建不采用 GPL 授权的软件。要想开始使用，请阅读 <a href="http://qt-project.org/wiki/PySide" target="_blank" rel="noopener">PySide</a>。</li></ul></li><li>wxPython<ul><li>这是 wxWidgets 工具包的 Python 绑定。wxPython 有一个与之相关的学习曲线。不过，它非常便携，并且可以运行在 GNU/Linux、Windwos、Mac、甚至是嵌入式平台中。有许多 IDE 可以采用 wxPython，并且包含了 GUI 设计工具，例如 <a href="http://spe.pycs.net/" target="_blank" rel="noopener">SPE (Stani’s Python Editor)</a> 还有 <a href="http://wxglade.sourceforge.net/" target="_blank" rel="noopener">wxGlade</a> GUI 构建工具。你可以使用 wxPython 来创建免费或专有的软件。要想开始使用，请阅读<a href="http://zetcode.com/wxpython/" target="_blank" rel="noopener">wxPython 教程</a>。</li></ul></li></ul><h3 id="GUI-工具总结"><a href="#GUI-工具总结" class="headerlink" title="GUI 工具总结"></a>GUI 工具总结</h3><p>想要了解更多的选择，可以参阅 <a href="http://www.python.org/cgi-bin/moinmoin/GuiProgramming" target="_blank" rel="noopener">GuiProgramming wiki page at the official python website</a>。</p><p>不幸的是，Python 没有一款标准 GUI 工具。我建议你根据你的实际情况从上面列出的工具中进行挑选。第一个因素是你是否愿意为使用任何 GUI 工具付费。第二个因素是你希望你的程序只在 Windwos 上运行，还是在 Mac 和 GNU/Linux 上运行，还是在它们三者之上都能运行。第三个因素，如果 GNU/Linux 是目标平台，那你是要做 KDE 用户还是 GNOME 用户。</p><p>有关更详尽且更全面的分析，请参阅 <a href="http://archive.pythonpapers.org/ThePythonPapersVolume3Issue1.pdf" target="_blank" rel="noopener">‘The Python Papers, Volume 3, Issue 1’ (PDF)</a> 的第 26 页。</p><h2 id="各种实现"><a href="#各种实现" class="headerlink" title="各种实现"></a>各种实现</h2><p>编程语言主要有两部分——语言与软件。语言是你<em>如何</em>编写，软件是你<em>怎样</em>实际运行我们的程序。</p><p>我们一直在使用 <em>CPython</em> 软件来运行我们的程序。它被成为 CPython 是因为它是使用 C 语言编写的，同时它也是<em>经典的（Classical） Python 解释器</em>。</p><p>还有其他软件可以运行你的 Python 程序：</p><ul><li><a href="http://www.jython.org/" target="_blank" rel="noopener">Jython</a><ul><li>在 Java 平台上运行的 Python 实现。这意味着你可以在 Python 语言中使用 Java 的库与类，反之亦然。</li></ul></li><li><a href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython" target="_blank" rel="noopener">IronPython</a><ul><li>在 .NET 平台上运行的 Python 实现。这意味着你可以在 Python 语言中使用 .NET 的库与类，反之亦然</li></ul></li><li><a href="http://codespeak.net/pypy/dist/pypy/doc/home.html" target="_blank" rel="noopener">PyPy</a><ul><li>用 Python 编写的 Python 实现！这是一项研究项目，旨在于使其能快速且方便的改进解释器，因为解释器本身就是用动态语言编写的了（而不是采用上述三种 C、Java、C# 等动态语言来编写）。</li></ul></li></ul><p>还有其它诸如 <a href="http://common-lisp.net/project/clpython/" target="_blank" rel="noopener">CLPython</a>——采用 Common Lisp 编写的 Python 实现，和<a href="http://brython.info/" target="_blank" rel="noopener">Brython</a> ，它在 JavaScript 解释器之上实现，意味着你可以使用 Python（而非 JavaScript）编写你的 Web 浏览器（“Ajax”）程序。</p><p>上述这些实现每一种都有其大有作为的专门领域。</p><h2 id="函数式编程（面向高阶读者）"><a href="#函数式编程（面向高阶读者）" class="headerlink" title="函数式编程（面向高阶读者）"></a>函数式编程（面向高阶读者）</h2><p>当你开始编写更加庞大的程序时，你应该清楚了解更多关于使用函数的方式来进行编程，而不是我们在<a href="https://bop.mol.uno/14.oop.html#oop" target="_blank" rel="noopener">《面向对象编程》章节中</a>所学习的基于类的方式进行编程：</p><ul><li><a href="http://docs.python.org/3/howto/functional.html" target="_blank" rel="noopener">Functional Programming Howto by A.M. Kuchling</a></li><li><a href="http://www.diveintopython.net/functional_programming/index.html" target="_blank" rel="noopener">Functional programming chapter in ‘Dive Into Python’ book</a></li><li><a href="http://ua.pycon.org/static/talks/kachayev/index.html" target="_blank" rel="noopener">Functional Programming with Python presentation</a></li><li><a href="https://github.com/Suor/funcy" target="_blank" rel="noopener">Funcy library</a></li><li><a href="http://toolz.readthedocs.org/en/latest/" target="_blank" rel="noopener">PyToolz library</a></li></ul><p>阅读此教程可以加强你与 Python 的兴趣 — — 也许你更渴望用 Python 去解决你现实中的问题。从哪里去提升呢？</p><p>本教程只是 Python 众多文档中的一页。更多的文档你可以从这里获取：</p><ul><li><p><a href="https://docs.python.org/3/library/index.html#library-index" target="_blank" rel="noopener">Python 的标准库</a>:</p><p>你需要完整地浏览本指南，它（简洁地）阐述了语言中的类型、函数和标准库中的模型。本 Python 基础发行手册包括了 <em>大量</em> 额外的代码。它们是 Unix 的邮箱、通过 HTTP 检索文档、创建随机数、解析命令行选项、创建 CGI 程序、压缩数据等等项目。参考过这些项目可以让你在遇到类似的问题知道什么能用得上。</p></li><li><p><a href="https://docs.python.org/3/installing/index.html#installing-index" target="_blank" rel="noopener">安装 Python 的模块</a> 解释了如何去安装一些其他 Python 用户完成的模块。</p></li><li><p><a href="https://docs.python.org/3/reference/index.html#reference-index" target="_blank" rel="noopener">Python 语言的参考资料</a>: 一些关于 Python 的语法和语义的详细解释。它也许生涩难懂，但对你详细地了解到该语言的本体非常有用。</p></li></ul><p>关于 Python 的更多学习资源:</p><ul><li><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org</a>: Python 主网站，它包含了代码、文档和 Python相关网站的链接。这个网站在全世界各地有很多镜像，比如欧洲、日本和澳大利亚，你可以访问镜像网站来获取更快速的体验，当然这取决于你的地理位置。</li><li><a href="https://docs.python.org/" target="_blank" rel="noopener">https://docs.python.org</a>: 可以快速访问 Python 文档。</li><li><a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org</a>: Python Package Index 也被叫做 Cheese Shop，提供了一个Python模块下载列表，这些模块都是由 Python 用户所创建的。如果你想发布的你代码，并期望别人也能找到，你可以在这里注册。</li><li><a href="https://code.activestate.com/recipes/langs/python/" target="_blank" rel="noopener">https://code.activestate.com/recipes/langs/python/</a>: Python Cookbook 包含了大量的代码示例、模块用法和实用的脚本。特别值得注意的是，有一本书名字也叫 Python Cookbook (O’Reilly &amp; Associates, ISBN 0-596-00797-3.)</li><li><a href="http://www.pyvideo.org/" target="_blank" rel="noopener">http://www.pyvideo.org</a> 收集了来自会议和用户组讨论的 Python 相关的视频。</li><li><a href="https://scipy.org/" target="_blank" rel="noopener">https://scipy.org</a>: Python 的科学项目包括用于快速阵列计算和操作的模块，再加上诸如线性代数、傅立叶变换、非线性解算器、随机数分布、统计分析等诸如此类的软件包。</li></ul><p>对于 Python 的相关问题，你可以发布到新闻组 <em>comp.lang.python</em> ，或者投稿到 <a href="mailto:python-list%40python.org" target="_blank" rel="noopener">python-list@python.org</a>. 新闻组和投稿都是自动转发的，因此你提交到一个那里，就会自动转发给其他人。每天都会有上百个提交，包括问问题（和回答问题）、提出建议的新特性和发布新模块等等。投稿地址在 <a href="https://mail.python.org/pipermail/" target="_blank" rel="noopener">https://mail.python.org/pipermail/</a>.</p><p>在提交问题前，一定要先检查 <a href="https://docs.python.org/3/faq/index.html#faq-index" target="_blank" rel="noopener">Frequently Asked Questions</a> (也被称为FAQ)。FAQ回答了很多问题，而且有的问题会反复出现。所以里面很可能已经包含了你问题的解决方法。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://bop.mol.uno/19.what_next.html#fn_2" target="_blank" rel="noopener">简明python</a></li><li><a href="https://docs.python.org/3/tutorial/whatnow.html" target="_blank" rel="noopener">python官方文档</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;迈出下一步&quot;&gt;&lt;a href=&quot;#迈出下一步&quot; class=&quot;headerlink&quot; title=&quot;迈出下一步&quot;&gt;&lt;/a&gt;迈出下一步&lt;/h1&gt;&lt;p&gt;如果到现在你已经阅读过本书并且编写了许多程序，那么你一定已经开始熟悉并且习惯 Python 了。或许你已经创建了一些
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python面向对象编程 </title>
    <link href="https://yo42.github.io/2018/09/09/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://yo42.github.io/2018/09/09/python面向对象编程/</id>
    <published>2018-09-09T06:09:14.543Z</published>
    <updated>2018-09-09T09:34:16.804Z</updated>
    
    <content type="html"><![CDATA[<p>类就是一组数据和函数的集合。创建了一个新的类意味着创建了一个全新的对象 <em>类型</em>，也就允许我们创建新的此类型的 <em>实例</em>。每个类实例都带有属性以维护其状态。同样也有方法（在它自己的类中定义）来修改这些状态。</p><p>相比其他编程语言，使用 Python 的类机制创建类是最方便简洁的。Python 的类机制结合了 C++ 和 Modua-3 的机制，同时也符合所有面向对象编程的标准：类继承机制允许有多个基类，一个派生的类可以覆盖基类的任意方法，每个方法也可以调用基类的同名方法。每个对象都可以包含任意数量和类型的数据。与模块一样，类也具有 Python 动态的特性：即时创建，创建后仍可修改。</p><p>在 C++ 的概念中，常规的类成员都是 <em>公共（public）</em> 的（例外的情况请看 <a href="https://docs.python.org/3/tutorial/classes.html#tut-private" target="_blank" rel="noopener">Private Variables</a> 这一节）成员函数都是 <em>虚（virtual）</em> 的。 到了 Modula-3 中，我们没有从其自身的方法中引用对象成员的快速写法：方法函数声明时要在第一参数中标明对象，这样就会在调用时隐式的调用。在 Smalltalk 中，类本身就是对象。同时还有导入和重命名语法。但不同于 C++ 和 Modula-3，它的内置类型可以直接作为基类由用户进行扩展。同样，它也有类似 C++ 的地方，大部分有特殊语法的内置操作符（算术运算符，下标等等）都可以被类实例重定义。</p><h2 id="面向对象技术简介"><a href="#面向对象技术简介" class="headerlink" title="面向对象技术简介"></a>面向对象技术简介</h2><ul><li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong>类变量或者实例变量用于处理类及其实例对象的相关的数据。</li><li><strong>方法重载：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重载。</li><li><strong>实例变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li><li><strong>方法：</strong>类中定义的函数。</li><li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li></ul><h3 id="Python-作用域与命名空间"><a href="#Python-作用域与命名空间" class="headerlink" title="Python 作用域与命名空间"></a>Python 作用域与命名空间</h3><p>介绍类之前，我必须先向你介绍一下 Python 的作用域规则。类定义在命名空间中有一些非常聪明的技巧，而且你需要知道作用域和命名空间是如何工作的这样才能完全理解它做了什么。顺便一提，本节的知识对任何高级的 Python 编程都很！有！用！</p><p>让我们先从几个定义开始。</p><p><em>namespace（命名空间）</em> 是一个从名字到对象的映射。大部分命名空间当前都由 Python 字典实现，但一般情况下基本不会去关注它们（除了要面对性能问题时），而且也有可能在将来更改。下面是几个命名空间的例子：存放内置函数的集合（里面含有 <a href="https://docs.python.org/3/library/functions.html#abs" target="_blank" rel="noopener"><code>abs()</code></a> 这样的函数，和其他的内置名称）；模块中的全局名称；函数调用中的本地名称。从某种意义上说，某对象的的属性集合也是一种命名空间的形式；比如，两个不同的模块都可能定义了一个 <code>maximize</code> 的函数，为了不引起混乱用户必须用模块名作为前缀修饰一下。</p><p>顺便一提， 接下来所有跟在 <code>.</code> 后面的单词我都称其为 <em>attribute（属性）</em>，比如， <code>z.real</code> 中的 <code>real</code> 就是对象 <code>z</code> 的一个属性。严格来说，引用模块中的名称就是属性引用： <code>modname.funcname</code> 中的 <code>modname</code> 是一个模块对象，<code>funcname</code> 自然就是它的一个属性了。还有一种在模块的属性与本模块的全局名称之间恰好发生了一个直接的映射的情况：它们共享了同一个命名空间！<a href="https://docs.python.org/3/tutorial/classes.html#id2" target="_blank" rel="noopener">[1]</a>。</p><p>属性可以是只读的，也可以是可写的。在后一种情况中，可以指定某个属性某些内容。如果模块属性可写：你可以用 <code>modname.the_answer = 42</code> 来指定。可写的属性也同样可以被 <a href="https://docs.python.org/3/reference/simple_stmts.html#del" target="_blank" rel="noopener"><code>del</code></a> 语句删除。 例如， <code>del modname.the_answer</code> 将会删除掉 <code>modname</code> 的 <code>the_answer</code> 属性。</p><p>命名空间会在不同时刻被创建，也会拥有不同的命名空间。命名空间中包含着在 Python 解释器启动之初创建的内置名称，并且永远不会被删除。模块中的全局命名空间也会在模块被读入时创建，一般情况下也会持续到解释器退出。声明的执行由上层解释器调用，不管是从文件中读入还是交互式的，模块中包含最多的是一个叫 <a href="https://docs.python.org/3/library/__main__.html#module-__main__" target="_blank" rel="noopener"><code>__main__</code></a> 的东西，每个模块都有自己的全局命名空间（实际上内置名称也在模块中存在，它们被称为 <a href="https://docs.python.org/3/library/builtins.html#module-builtins" target="_blank" rel="noopener"><code>builtins</code></a>.) ）。</p><p>函数的本地命名空间在函数被调用时创建，函数返回或抛出异常时但没在函数内处理时删除。（实际上，忘记处理可能是描述实际所发生的了什么的更好的方式..）当然，递归调用每一次都有自己的本地命名空间。</p><p><em>scope (作用域)</em> 是一段 Python 程序的文本区域，处于其中的命名空间是可直接访问的。「可直接访问」在这里的意思是非限定性引用的某名称会尝试在此命名空间中查找。</p><p>尽管作用域一般都是静态的，不过也常常被动态的用。在任何执行的时候，每段代码都至少有3个嵌套的作用域可直接访问。</p><ul><li>最内层的作用域，会被首先搜索，里面放的是本地名称。</li><li>任何处于函数内的作用域，会从在最接近它的作用域中开始寻找，这层的命名空间中放的是非本地但也非全局的名称。</li><li>倒数第二层作用域是包含着当前模块的全局名称。</li><li>最外层作用域（最后搜索的一层）是包含内置名称的命名空间。</li></ul><p>如果某名称是在全局进行的声明，那么所有的引用和分配都会直接导向中间的这层包含模块的全局名称的作用域中。要想让最内层的作用域重新绑定一个在外层出现过的变量，我们可以用 <a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" target="_blank" rel="noopener"><code>nonlocal</code></a> 声明来完成；如果不声明 nonlocal (非本地)，这些变量则都是只读的（任何尝试写入这种变量的行为都将会创建一个 <em>全新</em> 的本地变量，不会对最外层的那个有丝毫影响。）</p><p>通常情况下，本地作用域引用着当前函数的本地名称。外层的函数引用的是和全局作用域一样的命名空间：模块的命名空间。类定义放置在本地作用域的另一个命名空间中。</p><p>意识到作用域取决于文本是很重要的：某个模块中所定义的函数的全局作用域是它所在的模块的命名空间，不管这函数来自什么地方或以什么别名被调用。换句话说，实际的名称搜索是在动态的情况下完成的，也就是运行时 — 但，语言定义的发展是朝着静态命名去的，在 「编译」阶段完成，所以不要试图依赖任何动态的命名！（实际上，本地变量已经是静态定义的了。）</p><p>Python 中也有皮一下的地方 – 如果不用 <a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 声明，那么所分配的变量总是在它所处位置的最内层。分配不会复制数据 – 它们只是把名字绑定到对象上。对删除来讲也是一样： <code>del x</code> 声明会把 <code>x</code> 从本地作用域所引用的命名空间中移除绑定。实际上，所有引入新名称的操作都会使用本地作用域：尤其是 <a href="https://docs.python.org/3/reference/simple_stmts.html#import" target="_blank" rel="noopener"><code>import</code></a> 声明和绑定在模块中的函数定义或者在本地作用域的函数名称。</p><p><a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 声明被用在要指定某个特殊的变量要在全局作用域中存活且应该在这重新被绑定的情况下；<a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" target="_blank" rel="noopener"><code>nonlocal</code></a>声明则是用在指示某变量存在于某封闭的作用域且应该在这被重新绑定的情况下。</p><h3 id="作用域和命名空间例子"><a href="#作用域和命名空间例子" class="headerlink" title="作用域和命名空间例子"></a>作用域和命名空间例子</h3><p>用个小例子来演示下如何引用不同的作用域和命名空间，以及 <a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 和 <a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" target="_blank" rel="noopener"><code>nonlocal</code></a> 是如何影响变量绑定的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_local</span><span class="params">()</span>:</span></span><br><span class="line">        spam = <span class="string">"local spam"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_nonlocal</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> spam</span><br><span class="line">        spam = <span class="string">"nonlocal spam"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_global</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">global</span> spam</span><br><span class="line">        spam = <span class="string">"global spam"</span></span><br><span class="line"></span><br><span class="line">    spam = <span class="string">"test spam"</span></span><br><span class="line">    do_local()</span><br><span class="line">    print(<span class="string">"After local assignment:"</span>, spam)</span><br><span class="line">    do_nonlocal()</span><br><span class="line">    print(<span class="string">"After nonlocal assignment:"</span>, spam)</span><br><span class="line">    do_global()</span><br><span class="line">    print(<span class="string">"After global assignment:"</span>, spam)</span><br><span class="line"></span><br><span class="line">scope_test()</span><br><span class="line">print(<span class="string">"In global scope:"</span>, spam)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">After local assignment: test spam</span><br><span class="line">After <span class="keyword">nonlocal</span> assignment: <span class="keyword">nonlocal</span> spam</span><br><span class="line">After <span class="keyword">global</span> assignment: <span class="keyword">nonlocal</span> spam</span><br><span class="line">In <span class="keyword">global</span> scope: <span class="keyword">global</span> spam</span><br></pre></td></tr></table></figure><p>注意 <em>本地</em> 的分配并未改变 <em>scope_test</em> 中绑定的 <em>spam</em>，而 <a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" target="_blank" rel="noopener"><code>nonlocal</code></a> 标明过的分配则改变了 <em>scope_test</em> 绑定的 <em>spam</em>，<a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 则更改的是模块层面的绑定。</p><p>不知道你有没有注意到，我们在 <a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 之前是没有绑定 <em>spam</em> 的。</p><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><h4 id="类定义语法"><a href="#类定义语法" class="headerlink" title="类定义语法"></a>类定义语法</h4><p>类定义的形式很简单像这样既可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>类的定义与函数定义（<a href="https://docs.python.org/3/reference/compound_stmts.html#def" target="_blank" rel="noopener"><code>def</code></a> statements）差不多，在它们生效前我们需要预先执行这些定义（你也可以在  <a href="https://docs.python.org/3/reference/compound_stmts.html#if" target="_blank" rel="noopener"><code>if</code></a>分支或函数内部声明类）。</p><p>在实践中，类定义内的声明通常是函数定义，不过也有其他的声明，而且还挺有用 – 我们之后再谈这个。在类中定义的函数通常有一个特有的参数列表，指代是作为方法调用的 — 同样我们稍后再解释。</p><p>进入到类定义后，会创建一个新的命名空间作为本地作用域 — 也因此，所有的本地变量的指定都会进到这个新的作用域里。尤其是定义函数所绑定的是此函数的名字。</p><p>类定义正常结束时，一个新的 <em>类对象</em> 就被创建出来了。这是类定义在命名空间中最基本的一层包装；我们在下一节中详细讨论这个。原始的本地作用域（在进入类定义前生效的那个）会被重新安装，然后将类名字（就是上例中的 <code>ClassName</code>）绑定到这个类对象上。</p><h4 id="类编码风格"><a href="#类编码风格" class="headerlink" title="类编码风格"></a>类编码风格</h4><p>类名应采用驼峰命名法，即类名中的每个单词首字母都大写，而不使用下划线。实例名和模块名都采用小写的格式，并且在单词之间加上下划线。</p><h4 id="类对象-1"><a href="#类对象-1" class="headerlink" title="类对象"></a>类对象</h4><p>类对象支持两种操作：属性引用和实例化。</p><p><em>Attribute references （属性引用）</em> 使用的是 Python 中标准的属性引用语法： <code>obj.name</code>。有效的属性名都会在此类创建时被塞入的命名空间中。所以，如果一个类定义看起来像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    <span class="string">"""简单的例子"""</span></span><br><span class="line">    i = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><p><code>MyClass.i</code> 和 <code>MyClass.f</code> 都是有效的属性引用，分别返回的是一个整数和一个函数对象。类属性同样是可分配的，所以你可以更改 <code>MyClass.i</code> 的值。<code>__doc__</code> 同样也是一个有效属性，返回的是此类的文档字符串： <code>&quot;简单的例子&quot;</code>。</p><p>类的 <em>实例化</em> 类似函数的形式。把它假装成一个无参数且返回的是此类实例的函数就行。看代码（用的上面那个类）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = MyClass()</span><br></pre></td></tr></table></figure><p>这样就创建一个新的类 <em>实例</em> 并把它分配给了本地变量 <code>x</code>。</p><p>实例化操作（「调用」类对象）创建的是一个空对象。大多数类都想在创建时自定义初始化状态。所以类通常也会定义一个名为 <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.data = []</span><br></pre></td></tr></table></figure><p>当某类定义了 <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a>  方法，类实例化时就会为新的类实例自动调用 <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 方法。所以，我们不需要做任何改变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = MyClass()</span><br></pre></td></tr></table></figure><p>当然，<a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 方法也可以有参数变得更加易用。需要参数时，在参数实例化时给定的参数会传递到 <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, realpart, imagpart)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.r = realpart</span><br><span class="line"><span class="meta">... </span>        self.i = imagpart</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = Complex(<span class="number">3.0</span>, <span class="number">-4.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.r, x.i</span><br><span class="line">(<span class="number">3.0</span>, <span class="number">-4.5</span>)</span><br></pre></td></tr></table></figure><h4 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h4><p>那么..我们要用这个实例对象干什么呢？最基本的操作时属性引用。我们现在有两种有效的属性名：数据属性和方法。</p><p><em>data attributes（数据属性）</em> 等同于 Smalltalk 中的「实例变量」，以及 C++ 中的 「数据成员」。数据属性不需要提前声明；就像本地变量一样，它们会在第一次分配时传播到已有的命名空间中。举个例子，假设我们已经创建了 <code>MyClass</code> 的实例 <code>x</code>，下面的代码会打印出 <code>16</code>且不留下痕迹：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x.counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> x.counter &lt; <span class="number">10</span>:</span><br><span class="line">    x.counter = x.counter * <span class="number">2</span></span><br><span class="line">print(x.counter)</span><br><span class="line"><span class="keyword">del</span> x.counter</span><br></pre></td></tr></table></figure><p>另一种实例属性引用是 <em>method (方法)</em>。一个方法也就是一个 「属于」某个对象的函数。（在 Python 中，方法一词并不被类实例独占：其他对象属性也同样具有方法。比如，列表对象也有如 <code>append</code>, <code>insert</code>, <code>remove</code>, <code>sort</code> 的方法。不过，接下来的讨论中我们所说的方法只指代类实例对象中的方法，除非特别指明。）</p><p>实例对象的有效方法名依赖于它的类。基于定义，所有是函数对象的类属性定义都会等同于它所实例化后的方法。所以在我们的例子中，<code>x.f</code> 是一个有效的方法引用，因为 <code>MyClass.f</code> 就是一个函数，但 <code>x.i</code> 则不是，因为 <code>MyClass.i</code> 就不是。但 <code>x.f</code> 并不是 <code>MyClass.f</code> – 在这里它变成了 <em>方法对象</em> 而不是函数对象。</p><h4 id="方法对象"><a href="#方法对象" class="headerlink" title="方法对象"></a>方法对象</h4><p>通常，绑定后可以立即调用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.f()</span><br></pre></td></tr></table></figure><p>在 <code>MyClass</code> 例子中，会返回一个字符串 <code>&quot;hello world&quot;</code>。不过，我们并不需要立即调用：<code>x.f</code> 是一个方法对象，可以被存储下来并且在任何其他时间调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xf = x.f</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(xf())</span><br></pre></td></tr></table></figure><p>将会一直打印 <code>hello world</code>。</p><p>调用方法时到底发生了什么？你可能注意到了，上面的 <code>x.f()</code> 调用并没有写参数，即使我们定义 <code>f()</code> 时指定了一个参数。那个函数呢？没错，如果没有足够的函数所需的参数 Python 会抛出一个异常 – 即使这参数可能实际并没有用到。</p><p>聪明的你，可能已经猜到了答案：关于方法最特殊的一件事就是实例对象会传递第一个参数到函数中。在我们的例子中， <code>x.f()</code> 实际上等同于 <code>MyClass.f(x)</code>。通俗点讲，调用一个有 <em>n</em> 个参数的方法等同于调用在这些参数前插入了一个方法的实例作为第一个参数的函数。</p><p>如果仍然不明白方法是怎么工作的，我们了解下实现过程可能会有些帮助。当一个引用一个实例的非数据属性时，实例对象类会首先被搜索。如果这个名字指代的是一个有些的类属性而且还是一个函数对象，那方法对象就会被创建用于包装（指针指向）实例对象和函数对象在同一个抽象对象中：这就是方法对象的形成。当带着参数调用方法对象时，会结合实例对象和参数列表创建一个新的参数列表，方法对象所调用的就是这个新的参数列表。</p><h4 id="类和实例变量"><a href="#类和实例变量" class="headerlink" title="类和实例变量"></a>类和实例变量</h4><p>通俗来讲，实例变量是每个实例独有的数据，而类变量则是会让所有此类的实例所共享的方法和属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line"></span><br><span class="line">    kind = <span class="string">'canine'</span>         <span class="comment"># 类变量会在所有实例里共享</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name    <span class="comment"># 每个实例都有独立的实例变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog(<span class="string">'Fido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Dog(<span class="string">'Buddy'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.kind                  <span class="comment"># 所有 dog 都会共享</span></span><br><span class="line"><span class="string">'canine'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.kind                  <span class="comment"># 同上</span></span><br><span class="line"><span class="string">'canine'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.name                  <span class="comment"># d 所独有的</span></span><br><span class="line"><span class="string">'Fido'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.name                  <span class="comment"># e 所独有的</span></span><br><span class="line"><span class="string">'Buddy'</span></span><br></pre></td></tr></table></figure><p>在 <a href="https://docs.python.org/3/tutorial/classes.html#tut-object" target="_blank" rel="noopener">A Word About Names and Objects</a> 的讨论中，共享的数据可能在调用 <a href="https://docs.python.org/3/glossary.html#term-mutable" target="_blank" rel="noopener">mutable</a> 可变对象（比如列表和字典）时有意料之外的效果。举个例子， 下面写的 <em>tricks</em> 列表就不应该作为一个类变量存在，因为同一个列表会在所有的 <em>Dog</em>实例中共享：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line"></span><br><span class="line">    tricks = []             <span class="comment"># 不要作为类变量误用。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span><span class="params">(self, trick)</span>:</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog(<span class="string">'Fido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Dog(<span class="string">'Buddy'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.add_trick(<span class="string">'roll over'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.add_trick(<span class="string">'play dead'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.tricks                <span class="comment"># 我们不希望它在所有 dog 中共享。</span></span><br><span class="line">[<span class="string">'roll over'</span>, <span class="string">'play dead'</span>]</span><br></pre></td></tr></table></figure><p>正确的设计应该是用实例变量代替：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.tricks = []    <span class="comment"># 每只 dog 都有一个全新的列表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span><span class="params">(self, trick)</span>:</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Dog(<span class="string">'Fido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Dog(<span class="string">'Buddy'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.add_trick(<span class="string">'roll over'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.add_trick(<span class="string">'play dead'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.tricks</span><br><span class="line">[<span class="string">'roll over'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.tricks</span><br><span class="line">[<span class="string">'play dead'</span>]</span><br></pre></td></tr></table></figure><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>数据属性会覆盖同名的方法属性；为了避免命名冲突（冲突的话在大型程序中往往会引起很难查找的 bug），用一些大家都遵守的约定来最小化冲突的机会是非常明智的。一般有大写方法名字，使用独特的短字符串来给数据属性加上前缀（也可以是仅仅一个下划线），或者使用动词命名方法，而使用名词命名数据属性。</p><p>数据属性不光可以被此对象的用户（「客户」）一方使用，我们在方法内同样可以使用。换句话说，类不能用于实现纯粹的抽象数据类型。实际上，在 Python 中强制数据隐藏起来也是不可能的 — 它们只是在约定。（换..换句话说， Python 中实现于 C 的部分可以做到完全的隐藏实现细节，也可以控制一个对象的访问；这一点可以用在用 C 写 Python 的扩展上）。</p><p>客户一方（就是创建了实例后再用）也应该小心地使用数据属性 — 因为有可能弄乱方法们维护的数据属性一致性。不过客户一方也可以添加自己的数据属性进去，只要避免影响到方法的有效性就行，也就是说避免命名冲突 — 再说一遍！避免命名冲突很！重！要！</p><p>Python 中并无在方法内快捷访问数据熟悉的途径（方法的也没有！）。因为这样可以提高可读性：这样就可以快速弄清楚本地变量和实例变量。</p><p>通常我们把方法的第一个参数命名为 <code>self</code>. 这只是一个约定： <code>self</code> 这个名字对 Python 来讲并无特殊含义。不过要注意，如果不遵守的话~，其他的 Python 程序猿可能会不知道你写的啥呦~，而且还可依据此来写一个 <em>class browser</em> 的程序</p><p>任何作为类属性定义的函数对象都会作为实例或类的方法。把相关的函数定义在类的文本域内并不是必须的：指定一个函数对象到类的本地变量中同样是 Ok 的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义在类外了...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> min(x, x+y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    f = f1</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">    h = g</span><br></pre></td></tr></table></figure><p><code>f</code>，<code>g</code>， <code>h</code> 都是类 <code>C</code> 的属性，全都是属性对象，同时也都是 <code>C</code> 实例的方法 — <code>h</code> 等同于 <code>g</code>。要注意，这里这种写法一般是为了让程序变得混乱。</p><p>使用 <code>self</code> 参数可以在方法内调用其他的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.data.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addtwice</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.add(x)</span><br><span class="line">        self.add(x)</span><br></pre></td></tr></table></figure><p>方法也可以像引用普通函数一样引用全局名称。与方法关联的全局作用域是包含着它的模块。（类永远不能作为全局作用域使用）若是有一个在方法中必须要用到全局数据的理由，那要遵守以下几点：其实只有一件事，全局作用域中引入的函数和模块可以使用，在全局作用域中的函数和类也可以使用。通常，全局作用域中的类所包含的方法都是它自己定义的，我们将在下一节找到几个合理的理由来解释为什么一个方法需要引用它自己的类。</p><p>每个值都是一个对象，也因此都有 <em>class</em> (也被称为 <em>type</em>)。这些东西都被放在了 <code>object.__class__</code> 中。</p><h3 id="使用-property"><a href="#使用-property" class="headerlink" title="使用 @property"></a>使用 @property</h3><p>在使用 <code>@property</code> 之前，让我们先来看一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exam</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        self._score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> val &lt; <span class="number">0</span>:</span><br><span class="line">            self._score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> val &gt; <span class="number">100</span>:</span><br><span class="line">            self._score = <span class="number">100</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._score = val</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Exam(<span class="number">60</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.get_score()</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.set_score(<span class="number">70</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.get_score()</span><br><span class="line"><span class="number">70</span></span><br></pre></td></tr></table></figure><p>在上面，我们定义了一个 Exam 类，为了避免直接对 <code>_score</code> 属性操作，我们提供了 get_score 和 set_score 方法，这样起到了封装的作用，把一些不想对外公开的属性隐蔽起来，而只是提供方法给用户操作，在方法里面，我们可以检查参数的合理性等。</p><p>这样做没什么问题，但是我们有更简单的方式来做这件事，Python 提供了 <code>property</code> 装饰器，被装饰的方法，我们可以将其『当作』属性来用，看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exam</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        self._score = score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> val &lt; <span class="number">0</span>:</span><br><span class="line">            self._score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> val &gt; <span class="number">100</span>:</span><br><span class="line">            self._score = <span class="number">100</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._score = val</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Exam(<span class="number">60</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score = <span class="number">90</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score</span><br><span class="line"><span class="number">90</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score = <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>在上面，我们给方法 score 加上了 <code>@property</code>，于是我们可以把 score 当成一个属性来用，此时，又会创建一个新的装饰器 <code>score.setter</code>，它可以把被装饰的方法变成属性来赋值。</p><p>另外，我们也不一定要使用 <code>score.setter</code> 这个装饰器，这时 score 就变成一个只读属性了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exam</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        self._score = score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Exam(<span class="number">60</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.score = <span class="number">200</span>  <span class="comment"># score 是只读属性，不能设置值</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-676</span>-b0515304f6e0&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 e.score = 200</span><br><span class="line"></span><br><span class="line">AttributeError: can<span class="string">'t set attribute</span></span><br></pre></td></tr></table></figure><p><code>@property</code> 把方法『变成』了属性。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在面向对象编程中，当我们已经创建了一个类，而又想再创建一个与之相似的类，比如添加几个方法，或者修改原来的方法，这时我们不必从头开始，可以从原来的类<strong>派生</strong>出一个新的类，我们把原来的类称为<strong>父类</strong>或<strong>基类</strong>，而派生出的类称为<strong>子类</strong>，<strong>子类</strong>继承了<strong>父类</strong>的所有数据和方法。</p><ul><li>继承可以拿到父类的所有数据和方法，子类可以重写父类的方法，也可以新增自己特有的方法。</li><li>有了继承，才有了多态，不同类的对象对同一消息会作出不同的相应。</li></ul><p>当然，一个不支持继承的「类」不足以被称为类。在类的定义中，继承的语法是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(BaseClassName)</span>:</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>类名 <code>BaseClassName</code> 必须被定义在一个包含派生类 <code>DerivedClassName</code> 定义的作用域下。相较于直接使用基类名，任何其它表达式也是可以被填入的。这个特性经常被用到，比如，当基类被定义在其它模块中时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(modname.BaseClassName)</span>:</span></span><br></pre></td></tr></table></figure><p>派生类定义时的执行流程和基类相同。当一个类对象被创建，它会记录它的基类。这将被用于解析对象的属性：如果一个需要的属性不存在于当前类中，紧接着就会去基类中寻找。如果该基类也是从其他类派生出来的，那么相同的过程也会递归地被应用到这些类中。</p><p>实例化派生类也没有什么特别的： <code>DerivedClassName()</code> 就会创建类的一个新的实例。方法引用则按如下的方式被解析：首先在当前类中搜索对应的属性，然后沿着继承链往下搜索，如果找到了一个函数对象，那么这个方法引用就是可用的。</p><p>派生类可以重写基类的方法。因为方法在调用同一对象其它方法的时候没有什么特权，所以当派生类的实例调用某个基类的方法后，该基类的方法可能会再次调用派生类覆写的另一个基类方法。（对于 C++ 程序员而言， Python 中所有的方法都是 <code>virtual</code> 函数。）</p><p>派生类中重写的方法一般用于扩展同名的基类方法，而非简单的替换。 Python 中有一种简单的直接调用基类方法的方案：调用 <code>BaseClassName.methodname(self, arguments)</code> 即可。这在某些情景下也是有用的。（注意这个方法只有在基类 <code>BaseClassName</code> 在全局作用域下可以访问才能使用。）</p><p>Python 提供了两个判断继承关系的内建函数：</p><ul><li>使用 <a href="https://docs.python.org/3/library/functions.html#isinstance" target="_blank" rel="noopener"><code>isinstance()</code></a> 检查一个实例的类型：当且仅当 <code>obj.__class__</code> 是 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 或其它从 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 派生的类时， <code>isinstance(obj, int)</code> 才会返回 <code>True</code> 。</li><li>使用 <a href="https://docs.python.org/3/library/functions.html#issubclass" target="_blank" rel="noopener"><code>issubclass()</code></a> 检查类之间的继承关系：因为 <a href="https://docs.python.org/3/library/functions.html#issubclass" target="_blank" rel="noopener"><code>bool</code></a> 是 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的一个子类，所以 <code>issubclass(bool, int)</code> 返回 <code>True</code> 。然而，因为 <a href="https://docs.python.org/3/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> 不是 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的派生类，所以 <code>issubclass(float, int)</code> 返回 <code>False</code> 。</li></ul><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>Python 也支持多重继承。一个具有多个基类的类定义如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(Base1, Base2, Base3)</span>:</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure><p>对于多数目的，在最简单的情况下，你可以认为搜索父类中继承的属性是深度优先，从左到右，而不是在继承结构中重叠的同一个类中搜索两次。因此，如果一个属性在 <code>DerivedClassName</code> 中没有找到，则在 <code>Base1</code> 中查找，再在 <code>Base1</code> 的基类中（递归地）查找，如果未能找到，则在 <code>Base2</code> 中查找，以此类推。</p><p>事实上，这个过程要稍稍更复杂一些；方法解析顺序是动态变化的，以支持合作调用 <a href="https://docs.python.org/3/library/functions.html#super" target="_blank" rel="noopener"><code>super()</code></a> 。这种方法在其他多继承语言中被称为调用下一方法，比单继承语言中的 super 调用更加强大。</p><p>动态排序是必要的，因为所有多重继承的情况都表现出一个或多个菱形关系（其中至少有一个父类可以通过最底层的多个路径访问）。例如，所有的类都继承自 <a href="https://docs.python.org/3/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> ，所以任何情况的多重继承都提供了不止一条的路径到达 <a href="https://docs.python.org/3/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> 。 为了避免基类被多次访问，动态算法保证在每个类中进行从左到右特定顺序的线性搜索，因此每个父类只被调用一次，并且这个方法是单调的（意味着类可以被子类化而不影响其的优先顺序）。 总之，这些特性使得设计具有多重继承的可靠的且可扩展的类成为可能。 更多细节请参考 <a href="https://www.python.org/download/releases/2.3/mro/" target="_blank" rel="noopener">https://www.python.org/download/releases/2.3/mro/</a>.</p><h4 id="你不知道的-super"><a href="#你不知道的-super" class="headerlink" title="你不知道的 super"></a>你不知道的 super</h4><p>在类的继承中，如果重定义某个方法，该方法会覆盖父类的同名方法，但有时，我们希望能同时实现父类的功能，这时，我们就需要调用父类的方法了，可通过使用 <code>super</code> 来实现，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Hello, I am %s.'</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Dog, self).greet()   <span class="comment"># Python3 可使用 super().greet()</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'WangWang...'</span></span><br></pre></td></tr></table></figure><p>在上面，Animal 是父类，Dog 是子类，我们在 Dog 类重定义了 <code>greet</code> 方法，为了能同时实现父类的功能，我们又调用了父类的方法，看下面的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog = Dog(<span class="string">'dog'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog.greet()</span><br><span class="line">Hello, I am dog.</span><br><span class="line">WangWang..</span><br></pre></td></tr></table></figure><p><code>super</code> 的一个最常见用法可以说是在子类中调用父类的初始化方法了，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b, c)</span>:</span></span><br><span class="line">        super(A, self).__init__(a, b)  <span class="comment"># Python3 可使用 super().__init__(a, b)</span></span><br><span class="line">        self.c = c</span><br></pre></td></tr></table></figure><h4 id="深入-super"><a href="#深入-super" class="headerlink" title="深入 super()"></a>深入 super()</h4><p>看了上面的使用，你可能会觉得 <code>super</code> 的使用很简单，无非就是获取了父类，并调用父类的方法。其实，在上面的情况下，super 获得的类刚好是父类，但在其他情况就不一定了，<strong>super 其实和父类没有实质性的关联</strong>。</p><p>让我们看一个稍微复杂的例子，涉及到多重继承，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter Base"</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave Base"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter A"</span></span><br><span class="line">        super(A, self).__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave A"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter B"</span></span><br><span class="line">        super(B, self).__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave B"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"enter C"</span></span><br><span class="line">        super(C, self).__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"leave C"</span></span><br></pre></td></tr></table></figure><p>其中，Base 是父类，A, B 继承自 Base, C 继承自 A, B，它们的继承关系是一个典型的『菱形继承』，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  Base</span><br><span class="line">  /  \</span><br><span class="line"> /    \</span><br><span class="line">A      B</span><br><span class="line"> \    /</span><br><span class="line">  \  /</span><br><span class="line">   C</span><br></pre></td></tr></table></figure><p>现在，让我们看一下使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = C()</span><br><span class="line">enter C</span><br><span class="line">enter A</span><br><span class="line">enter B</span><br><span class="line">enter Base</span><br><span class="line">leave Base</span><br><span class="line">leave B</span><br><span class="line">leave A</span><br><span class="line">leave C</span><br></pre></td></tr></table></figure><p>如果你认为 <code>super</code> 代表『调用父类的方法』，那你很可能会疑惑为什么 enter A 的下一句不是 enter Base 而是 enter B。原因是，<strong>super 和父类没有实质性的关联</strong>，现在让我们搞清 <code>super</code> 是怎么运作的。</p><h4 id="MRO-列表"><a href="#MRO-列表" class="headerlink" title="MRO 列表"></a>MRO 列表</h4><p>事实上，对于你定义的每一个类，Python 会计算出一个<strong>方法解析顺序（Method Resolution Order, MRO）列表</strong>，<strong>它代表了类继承的顺序</strong>，我们可以使用下面的方式获得某个类的 MRO 列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.mro()   <span class="comment"># or C.__mro__ or C().__class__.mro()</span></span><br><span class="line">[__main__.C, __main__.A, __main__.B, __main__.Base, object]</span><br></pre></td></tr></table></figure><p>那这个 MRO 列表的顺序是怎么定的呢，它是通过一个 <a href="https://www.python.org/download/releases/2.3/mro/" target="_blank" rel="noopener">C3 线性化算法</a>来实现的，这里我们就不去深究这个算法了，感兴趣的读者可以自己去了解一下，总的来说，一个类的 MRO 列表就是合并所有父类的 MRO 列表，并遵循以下三条原则：</p><ul><li>子类永远在父类前面</li><li>如果有多个父类，会根据它们在列表中的顺序被检查</li><li>如果对下一个类存在两个合法的选择，选择第一个父类</li></ul><h4 id="super-原理"><a href="#super-原理" class="headerlink" title="super 原理"></a>super 原理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">super</span><span class="params">(cls, inst)</span>:</span></span><br><span class="line">    mro = inst.__class__.mro()</span><br><span class="line">    <span class="keyword">return</span> mro[mro.index(cls) + <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>其中，cls 代表类，inst 代表实例，上面的代码做了两件事：</p><ul><li>获取 inst 的 MRO 列表</li><li>查找 cls 在当前 MRO 列表中的 index, 并返回它的下一个类，即 mro[index + 1]</li></ul><p>当你使用 <code>super(cls, inst)</code> 时，Python 会在 inst 的 MRO 列表上搜索 cls 的下一个类。</p><p>现在，让我们回到前面的例子。</p><p>首先看类 C 的 <code>__init__</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(C, self).__init__()</span><br></pre></td></tr></table></figure><p>这里的 self 是当前 C 的实例，self.<strong>class</strong>.mro() 结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[__main__.C, __main__.A, __main__.B, __main__.Base, object]</span><br></pre></td></tr></table></figure><p>可以看到，C 的下一个类是 A，于是，跳到了 A 的 <code>__init__</code>，这时会打印出 enter A，并执行下面一行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(A, self).__init__()</span><br></pre></td></tr></table></figure><p>注意，这里的 self 也是当前 C 的实例，MRO 列表跟上面是一样的，搜索 A 在 MRO 中的下一个类，发现是 B，于是，跳到了 B 的 <code>__init__</code>，这时会打印出 enter B，而不是 enter Base。</p><p>整个过程还是比较清晰的，关键是要理解 super 的工作方式，而不是想当然地认为 super 调用了父类的方法。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>事实上，<code>super</code> 和父类没有实质性的关联。</li><li><code>super(cls, inst)</code> 获得的是 cls 在 inst 的 MRO 列表中的下一个类。</li></ul><h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><p>只能从对像内部访问的『私有』实例变量，在 Python 中不存在。然而，在大多数 Python 代码中存在一个这样的约定：以一个下划线开头的命名（例如 <code>_spam</code> ）会被处理为 API 的非公开部分（无论它是一个函数、方法或数据成员）。它会被视为一个实现细节，无需公开。</p><p>因为有一个正当的类私有成员用途（即避免子类里定义的命名与之冲突），Python 提供了对这种结构的有限支持，称为 <em>name mangling</em> （命名编码） 。任何形如 <code>__spam</code> 的标识（前面至少两个下划线，后面至多一个下划线），被替代为 <code>_classname__spam</code> ，去掉前导下划线的 <code>classname</code> 即当前的类名。此语法不关注标识的位置，只要求在类定义内。</p><p>名称重整是有助于子类重写方法，而不会打破组内的方法调用。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mapping</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable)</span>:</span></span><br><span class="line">        self.items_list = []</span><br><span class="line">        self.__update(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, iterable)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">            self.items_list.append(item)</span><br><span class="line"></span><br><span class="line">    __update = update   <span class="comment"># private copy of original update() method</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MappingSubclass</span><span class="params">(Mapping)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, keys, values)</span>:</span></span><br><span class="line">        <span class="comment"># provides new signature for update()</span></span><br><span class="line">        <span class="comment"># but does not break __init__()</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> zip(keys, values):</span><br><span class="line">            self.items_list.append(item)</span><br></pre></td></tr></table></figure><p>需要注意的是编码规则设计为尽可能的避免冲突，被认作为私有的变量仍然有可能被访问或修改。在特定的场合它也是有用的，比如调试的时候。</p><p>要注意的是代码传入 <code>exec()</code>， <code>eval()</code> 时不考虑所调用的类的类名，视其为当前类，这类似于 <code>global</code> 语句的效应，已经按字节编译的部分也有同样的限制。这也同样作用于 <code>getattr()</code>， <code>setattr()</code> 和 <code>delattr()</code>，像直接引用 <code>__dict__</code> 一样。</p><h3 id="零碎知识点"><a href="#零碎知识点" class="headerlink" title="零碎知识点"></a>零碎知识点</h3><p>有时候，有一个类似于 Pascal 「记录」或者 C 「结构体」的数据类型是非常有用的，它能够将一些命名数据项捆绑在一起：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">john = Employee()  <span class="comment"># 创建一个新的 employee 记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给记录的各个字段赋值</span></span><br><span class="line">john.name = <span class="string">'John Doe'</span></span><br><span class="line">john.dept = <span class="string">'computer lab'</span></span><br><span class="line">john.salary = <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>一块 Python 代码通常希望能够传递特定抽象数据类型 ，而一个类则会模拟该数据类型的方法。例如，如果你有一个函数，可以格式化文件对象当中的一些数据；那么，你就可以定义一个带有 <code>read()</code> 方法和 <code>readline()</code> 方法的类，这两个方法可以从数据缓冲区中读取数据没并且将其作为参数传递出去。</p><p>实例方法对象也有属性： <code>m.__self__</code> 是带有方法 <code>m()</code> 的实例对象，并且 <code>m.__func__</code> 是和方法相对应的函数对象。</p><ul><li>类是具有相同<strong>属性</strong>和<strong>方法</strong>的一组对象的集合，实例是一个个具体的对象。</li><li>方法是与实例绑定的函数。</li><li><p>获取对象信息可使用下面方法：</p><ul><li><code>type(obj)</code>：来获取对象的相应类型；</li><li><code>isinstance(obj, type)</code>：判断对象是否为指定的 type 类型的实例；</li><li><code>hasattr(obj, attr)</code>：判断对象是否具有指定属性/方法；</li><li><code>getattr(obj, attr[, default])</code> 获取属性/方法的值, 要是没有对应的属性则返回 default 值（前提是设置了 default），否则会抛出 AttributeError 异常；</li><li><code>setattr(obj, attr, value)</code>：设定该属性/方法的值，类似于 obj.attr=value；</li><li><code>dir(obj)</code>：可以获取相应对象的<strong>所有</strong>属性和方法名的列表：</li></ul></li><li><p><code>__new__</code> 在 <code>__init__</code> 之前被调用，用来创建实例。</p></li><li><code>__str__</code> 是用 print 和 str 显示的结果，<code>__repr__</code> 是直接显示的结果。</li><li><code>__getitem__</code> 用类似 <code>obj[key]</code> 的方式对对象进行取值</li><li><code>__getattr__</code> 用于获取不存在的属性 obj.attr</li><li><code>__call__</code> 使得可以对实例进行调用</li></ul><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>目前为止，你可能发现了，大部分容器对象都能被 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 所循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    print(element)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line">    print(element)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> &#123;<span class="string">'one'</span>:<span class="number">1</span>, <span class="string">'two'</span>:<span class="number">2</span>&#125;:</span><br><span class="line">    print(key)</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">"123"</span>:</span><br><span class="line">    print(char)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"myfile.txt"</span>):</span><br><span class="line">    print(line, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>这种形式的访问很清晰，简洁，方便。其背后是迭代器在起作用，<a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a><br>声明会调用容器对象的 <a href="https://docs.python.org/3/library/functions.html#iter" target="_blank" rel="noopener"><code>iter()</code></a> 函数，这个函数则返回一个迭代器对象，迭代器对象有 <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 方法，它会让容器中的元素一次返回一个。 <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a>  会抛出 <a href="https://docs.python.org/3/library/exceptions.html#StopIteration" target="_blank" rel="noopener"><code>StopIteration</code></a> 异常来让 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 结束。你也可以用 <a href="https://docs.python.org/3/library/functions.html#next" target="_blank" rel="noopener"><code>next()</code></a> 函数来调用它的 <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 方法；下面的例子显示了迭代器是如何工作的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = iter(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it</span><br><span class="line">&lt;iterator object at <span class="number">0x00A1DB50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    next(it)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>了解了迭代器协议背后的机制，我们就可以很容易得在我们自己的类中添加迭代器行为。<a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener"><code>__iter__()</code></a> 方法需要返回一个带有 <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 方法的对象。如果类仅仅定义了<code>__next__()</code>， <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener"><code>__iter__()</code></a> 那么返回的对象就是它自己 <code>self</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Reverse:</span><br><span class="line">    &quot;&quot;&quot;从后向前的迭代器&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, data):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.index = len(data)</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.index == 0:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        self.index = self.index - 1</span><br><span class="line">        return self.data[self.index]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rev = Reverse(<span class="string">'spam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iter(rev)</span><br><span class="line">&lt;__main__.Reverse object at <span class="number">0x00A1DB50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> char <span class="keyword">in</span> rev:</span><br><span class="line"><span class="meta">... </span>    print(char)</span><br><span class="line">...</span><br><span class="line">m</span><br><span class="line">a</span><br><span class="line">p</span><br><span class="line">s</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p><a href="https://docs.python.org/3/glossary.html#term-generator" target="_blank" rel="noopener">Generator</a> 是一个简单又强大的创建迭代器的工具。写它们只要像常规函数一样就可以，只不过用的是 <a href="https://docs.python.org/3/reference/simple_stmts.html#yield" target="_blank" rel="noopener"><code>yield</code></a> 代替 <code>return</code> 返回数据。 每次 <a href="https://docs.python.org/3/library/functions.html#next" target="_blank" rel="noopener"><code>next()</code></a> 调用生成器时，生成器就会从它断开的地方恢复（它会记录所有的数据和最后执行的声明）。下面写个例子来展示下生成器并不神秘难写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(data)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">yield</span> data[index]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> char <span class="keyword">in</span> reverse(<span class="string">'golf'</span>):</span><br><span class="line"><span class="meta">... </span>    print(char)</span><br><span class="line">...</span><br><span class="line">f</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line">g</span><br></pre></td></tr></table></figure><p>所以生成器能做的事情，我们之前介绍过的以类为基础的迭代器也可以做。生成器之所以显得更加紧凑，是因为 <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener"><code>__iter__()</code></a> 和 <a href="https://docs.python.org/3/reference/expressions.html#generator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 方法都被自动隐式的创建了。</p><p>生成器的另一个特色是本地变量和执行条件都会被自动保存。这就让我们很容易写出生成器函数，同时也比使用实例属性像是 <code>self.index</code>，<code>self.data</code> 来的简洁。</p><p>除了自动创建的方法和保存的程序状态，当生成器结束时，还会自动抛出 <a href="https://docs.python.org/3/library/exceptions.html#StopIteration" target="_blank" rel="noopener"><code>StopIteration</code></a>. 这些东西组合起来，就变成了一个让我们非常容易书写的迭代器形式。</p><h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><p>一些简单的生成器我们可以用类似列表表达式的代码做出来，只要把方括号换成圆括号就行了。生成器表达式用来一般用在在函数内需要写即用即删的数据的时候。生成器表达式比起完整的生成器要更加紧凑但并不如它功能强大，不过比起列表表达式来内存占用更少。</p><p>例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))                 <span class="comment"># 平方之和</span></span><br><span class="line"><span class="number">285</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xvec = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yvec = [<span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(x*y <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(xvec, yvec))         <span class="comment"># 乘积</span></span><br><span class="line"><span class="number">260</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pi, sin</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sine_table = &#123;x: sin(x*pi/<span class="number">180</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">91</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unique_words = set(word  <span class="keyword">for</span> line <span class="keyword">in</span> page  <span class="keyword">for</span> word <span class="keyword">in</span> line.split())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>valedictorian = max((student.gpa, student.name) <span class="keyword">for</span> student <span class="keyword">in</span> graduates)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = <span class="string">'golf'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(data[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>))</span><br><span class="line">[<span class="string">'f'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/tutorial/classes.html" target="_blank" rel="noopener">python官方文档</a></li><li><a href="http://funhacks.net/explore-python/Class/class_and_object.html" target="_blank" rel="noopener">python之旅</a></li><li><a href="https://bop.mol.uno/14.oop.html" target="_blank" rel="noopener">简明python</a></li><li><a href="https://wizardforcel.gitbooks.io/w3school-python/content/24.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/w3school-python/content/24.html</a></li><li><a href="http://yangcongchufang.com/%E9%AB%98%E7%BA%A7python%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/python-object-class.html" target="_blank" rel="noopener">http://yangcongchufang.com/%E9%AB%98%E7%BA%A7python%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/python-object-class.html</a></li><li><a href="https://mrlongx.com/index.php/2017/09/27/core-python-ch13/" target="_blank" rel="noopener">https://mrlongx.com/index.php/2017/09/27/core-python-ch13/</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类就是一组数据和函数的集合。创建了一个新的类意味着创建了一个全新的对象 &lt;em&gt;类型&lt;/em&gt;，也就允许我们创建新的此类型的 &lt;em&gt;实例&lt;/em&gt;。每个类实例都带有属性以维护其状态。同样也有方法（在它自己的类中定义）来修改这些状态。&lt;/p&gt;
&lt;p&gt;相比其他编程语言，使用 
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python错误和异常</title>
    <link href="https://yo42.github.io/2018/09/08/python%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    <id>https://yo42.github.io/2018/09/08/python错误和异常/</id>
    <published>2018-09-08T13:51:01.289Z</published>
    <updated>2018-09-09T06:09:35.601Z</updated>
    
    <content type="html"><![CDATA[<p>Python使用名为”异常”的特殊对象来管理程序执行期间发生的错误。</p><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>语法错误，也叫作解析错误，这可能是你在学习Python的过程中，最容易碰到的错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="keyword">True</span> print(<span class="string">'Hello world'</span>)</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span> print(<span class="string">'Hello world'</span>)</span><br><span class="line">                   ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>解析结果显示出错的行代码，并用小箭头指明解析到错误的具体位置。<br>这个错误是在箭头所指向的位置：在本例中，错误是在这个函数中检测到的 <a href="https://docs.python.org/3/library/functions.html#print" target="_blank" rel="noopener"><code>print()</code></a>，因为print函数之前应该存在的冒号缺失。文件名称和行号都被打印出来，这样你就可以知道这行有错误的代码是在哪个位置了。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>一条语句或表达式即便是语法正确也有可能在运行的时候报错。程序执行过程中遇到的错误被称为<em>异常</em>。这种错误并不一定是致命错误，我们一会儿来看如何在程序中处理异常。大多数的异常并非由程序自身处理，而是会显示类似下面列举的错误信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> * (<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> + spam*<span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'spam'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'2'</span> + <span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: Can<span class="string">'t convert '</span>int<span class="string">' object to str implicitly</span></span><br></pre></td></tr></table></figure><p>错误信息的最后一行告诉我们程序遇到了什么类型的错误。异常有不同的类型，而其类型名称将会在错误信息中输出出来。上述样例中的异常类型依次是： <a href="https://docs.python.org/3/library/exceptions.html#ZeroDivisionError" target="_blank" rel="noopener"><code>ZeroDivisionError</code></a> 、 <a href="https://docs.python.org/3/library/exceptions.html#NameError" target="_blank" rel="noopener"><code>NameError</code></a> 以及 <a href="https://docs.python.org/3/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 。错误信息中的异常类型是执行时抛出的内建异常类型。所有的内建类型都会如此，而虽然这是一个有用的惯例，但是用户自定义的异常并非一定如此。标准的异常类型是内建的标识符而非预留关键词。</p><p>这一行剩下的部分能告诉我们此处抛出异常的具体信息及触发的原因。</p><p>错误信息的前面部分能够通过栈调用信息告诉我们抛出异常时的上下文。一般情况下栈调用信息会包含函数调用所在的源代码行，但是不会包含从标准输入读入的信息。</p><p><a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions" target="_blank" rel="noopener">Built-in Exceptions</a> 列举了内建异常类型以及各自的含义。</p><h3 id="捕捉异常"><a href="#捕捉异常" class="headerlink" title="捕捉异常"></a>捕捉异常</h3><p>Python 允许编程处理特定的异常。在下面这个例子中，程序要求用户进行输入，直到接收到一个合法的整数，同时也允许用户中断程序 （使用 <code>Control-C</code> 或操作系统支持的其他方式）；注意，由用户引起的中断通过抛出 <a href="https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt" target="_blank" rel="noopener"><code>KeyboardInterrupt</code></a> 异常来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>        x = int(input(<span class="string">"Please enter a number: "</span>))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ValueError:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"Oops!  That was no valid number.  Try again..."</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a>声明的工作原理如下：</p><ul><li>程序首先执行 <em>try</em> 子句 （位于 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 和 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 关键字之间的内容)。</li><li>如果没有异常产生，则 <em>except</em> 子句被跳过，并且 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 声明的部分运行结束</li><li>如果在执行 <em>try</em> 子句的过程中产生了一个异常，那么这个子句范围内产生异常位置之后的代码不会被执行，如果产生的异常位于 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 关键字后提到的若干异常之中，那么<em>except</em> 子句的内容将会接着 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 中刚被中止的位置继续执行。</li><li>如果产生的异常并不在 <em>exception</em> 后面包含的若干异常中，该异常将会被抛给上一层的 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句；如果一个异常没有被任何一层 <em>try-exception</em> 语句捕捉，它就成为一个 <em>未处理异常</em> ，程序执行将因此停止并显示如上所示的消息。<br>一个 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 声明可以包含多个 <em>except</em> 子句来针对不同的异常做出不同的处理，但最多只有一个 <em>except</em> 子句（即错误处理器）会被执行。错误处理器只处理出现在对应 <em>try</em> 子句中产生的异常，而不会处理同一  <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a>  语句中其他错误处理器中的异常。一个 <em>except</em> 子句可以指定多个异常，这些异常用一个元组包含起来，例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">... </span><span class="keyword">except</span> (RuntimeError, TypeError, NameError):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果两个异常是同一类或者具有同一个父类，那它们可以在一个 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 子句中同时存在（但是另一种情况并不成立——如果一个类是另一个类的派生类，那么这两个类不能在一个 <em>except</em> 子句中同时存在）。例如，下面的这段代码中，将按照顺序输出 <code>B, C, D</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cls <span class="keyword">in</span> [B, C, D]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> cls()</span><br><span class="line">    <span class="keyword">except</span> D:</span><br><span class="line">        print(<span class="string">"D"</span>)</span><br><span class="line">    <span class="keyword">except</span> C:</span><br><span class="line">        print(<span class="string">"C"</span>)</span><br><span class="line">    <span class="keyword">except</span> B:</span><br><span class="line">        print(<span class="string">"B"</span>)</span><br></pre></td></tr></table></figure><p>注意：如果这些 <em>except</em> 子句按照相反的顺序排列（<code>except B</code>在最前面），则输出会变成 B，B，B。——和异常匹配的第一个 <em>except</em> 子句会被触发。</p><p>最后一个 except 子句可以省略异常名用作通配符。使用这个方法要特别谨慎，因为这个方法可能掩盖一个真正的编程错误！它还可以用于打印错误后，重新引发异常（也允许调用者处理异常）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'myfile.txt'</span>)</span><br><span class="line">    s = f.readline()</span><br><span class="line">    i = int(s.strip())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">"OS error: &#123;0&#125;"</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"Could not convert data to an integer."</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"Unexpected error:"</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> … <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 语句有一个可选的 <em>else 子句</em>， 当它出现时，必须在所有l except 子句之后。在执行 try 子句之后没有引发异常因此时，它可以用于必须执行的代码。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(arg, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        print(<span class="string">'cannot open'</span>, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(arg, <span class="string">'has'</span>, len(f.readlines()), <span class="string">'lines'</span>)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/3/reference/compound_stmts.html#else" target="_blank" rel="noopener"><code>else</code></a> 子句的使用比在 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 子句中增加而外的代码更好，因为他可以避免意外地捕获不被 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> …<a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 语句包含的异常。</p><p>当一个异常发生时，它可能有相关的值，或者是异常的 <em>参数</em>。尝试的有无和参数的类型取决于异常的类型。</p><p>except 子句可以在异常名之后指定变量。这些变量被绑定到一个异常实例中，实例中的参数储存在 <code>instance.args</code> 中。为了方便，异常实例定义了 <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" target="_blank" rel="noopener"><code>__str__()</code></a> ，所以参数可以被直接打印出来，而不需要引用 <code>.args</code> 。还可以在引发异常之前先实例化异常并根据需要添加任何属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> Exception(<span class="string">'spam'</span>, <span class="string">'eggs'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> Exception <span class="keyword">as</span> inst:</span><br><span class="line"><span class="meta">... </span>    print(type(inst))    <span class="comment"># 异常实例</span></span><br><span class="line"><span class="meta">... </span>    print(inst.args)     <span class="comment"># 储存在 .args 中的参数</span></span><br><span class="line"><span class="meta">... </span>    print(inst)          <span class="comment"># __str__ 允许参数被直接打印，</span></span><br><span class="line"><span class="meta">... </span>                         <span class="comment"># 但是方法可能会被异常子类复写</span></span><br><span class="line"><span class="meta">... </span>    x, y = inst.args     <span class="comment"># 提取参数</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'x ='</span>, x)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'y ='</span>, y)</span><br><span class="line">...</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">Exception</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'spam'</span>, <span class="string">'eggs'</span>)</span></span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'spam'</span>, <span class="string">'eggs'</span>)</span></span></span><br><span class="line">x = spam</span><br><span class="line">y = eggs</span><br></pre></td></tr></table></figure><p>如果异常带有参数，他们会作为未处理异常的信息中的最后一部分（’detail’）被打印出来。</p><p>异常处理程序不仅仅立刻处理 try 子句中的产生的异常，同时也包括 try 子句中调用函数（即使是间接地）中产生的异常。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">this_fails</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    x = <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    this_fails()</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> err:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Handling run-time error:'</span>, err)</span><br><span class="line">...</span><br><span class="line">Handling run-time error: division by zero</span><br></pre></td></tr></table></figure><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p><a href="https://docs.python.org/3/reference/simple_stmts.html#raise" target="_blank" rel="noopener"><code>raise</code></a> 语句允许开发者显式地引发异常。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> NameError(<span class="string">'HiThere'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: HiThere</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/3/reference/simple_stmts.html#raise" target="_blank" rel="noopener"><code>raise</code></a> 关键字后跟随表示被抛出异常的单一变量，该变量可以是一个异常实例，或者一个异常类（继承自 <a href="https://docs.python.org/3/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a>）。如果被传递的变量是一个异常类，它会隐式地无参数调用其构造方法进行实例化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">raise</span> ValueError  <span class="comment"># 'raise ValueError()' 的简写</span></span><br></pre></td></tr></table></figure><p>如果你只需要知道一个异常被抛出了，但并需要处理它，可以通过一个简单的 <a href="https://docs.python.org/3/reference/simple_stmts.html#raise" target="_blank" rel="noopener"><code>raise</code></a> 语句重新抛出这个异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> NameError(<span class="string">'HiThere'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> NameError:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'An exception flew by!'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span></span><br><span class="line">...</span><br><span class="line">An exception flew by!</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: HiThere</span><br></pre></td></tr></table></figure><h3 id="用户定义的异常"><a href="#用户定义的异常" class="headerlink" title="用户定义的异常"></a>用户定义的异常</h3><p>程序可以通过创建一个新的异常类来命名其专属的异常 (参考 <a href="https://docs.python.org/3/tutorial/classes.html#tut-classes" target="_blank" rel="noopener">Classes</a> 以获得更多有关Python类的信息)。 异常通常应该派生自 <a href="https://docs.python.org/3/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a> 类，无论是直接地还是间接地。</p><p>异常类可以以如通常类一样进行定义，但是通常会保持简洁，一般仅仅提供数个用于异常处理时可以解析异常信息的属性。在创建一个可以能引起多个不同异常的模块时，通常的做法是创建一个由模块定义的异常基类，并为不同的异常条件创建特定的异常子类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"""本模块的异常基类"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputError</span><span class="params">(Error)</span>:</span></span><br><span class="line">    <span class="string">"""输入中错误引发的异常</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    属性：</span></span><br><span class="line"><span class="string">        expression -- 产生错误输入表达</span></span><br><span class="line"><span class="string">        message -- 错误解释</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, expression, message)</span>:</span></span><br><span class="line">        self.expression = expression</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitionError</span><span class="params">(Error)</span>:</span></span><br><span class="line">    <span class="string">"""尝试不允许状态转换的操作时引发的异常</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    属性：</span></span><br><span class="line"><span class="string">        previous -- 转换前的状态</span></span><br><span class="line"><span class="string">        next -- 尝试转换的状态</span></span><br><span class="line"><span class="string">        message -- 解释为什么特定的转换操作不允许</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, previous, next, message)</span>:</span></span><br><span class="line">        self.previous = previous</span><br><span class="line">        self.next = next</span><br><span class="line">        self.message = message</span><br></pre></td></tr></table></figure><p>大多数的异常定义都以「错误（Error）」结尾，和标准异常的命名类似。</p><p>很多标准模块定义了它们自己的异常，用于报告它们定义的函数中可能产生的错误。有关类的更多信息在章节 <a href="https://docs.python.org/3/tutorial/classes.html#tut-classes" target="_blank" rel="noopener">Classes</a> 中有介绍.</p><h3 id="定义清理操作"><a href="#定义清理操作" class="headerlink" title="定义清理操作"></a>定义清理操作</h3><p> <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句有另一个可选的子语句，用于定义必须在所有情况下都执行的清理操作。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> KeyboardInterrupt</span><br><span class="line"><span class="meta">... </span><span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Goodbye, world!'</span>)</span><br><span class="line">...</span><br><span class="line">Goodbye, world!</span><br><span class="line">KeyboardInterrupt</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br></pre></td></tr></table></figure><p><em>finally 子句</em> 总是在结束 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句之前执行，无论是否有异常产生。当异常产生在When an exception  <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 子句中产生并未被 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 子句捕获（或异常在 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 或 <a href="https://docs.python.org/3/reference/compound_stmts.html#else" target="_blank" rel="noopener"><code>else</code></a> 子句中产生）时，异常将在 <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a>子句被执行后再引发。 <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句也在「离开的路上」被执行，即当其他子句通过 <a href="https://docs.python.org/3/reference/simple_stmts.html#break" target="_blank" rel="noopener"><code>break</code></a>, <a href="https://docs.python.org/3/reference/simple_stmts.html#continue" target="_blank" rel="noopener"><code>continue</code></a> or <a href="https://docs.python.org/3/reference/simple_stmts.html#return" target="_blank" rel="noopener"><code>return</code></a> 等语句离开 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句时。以下为一个更加复杂的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>        result = x / y</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"division by zero!"</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"result is"</span>, result)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"executing finally clause"</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divide(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">result <span class="keyword">is</span> <span class="number">2.0</span></span><br><span class="line">executing <span class="keyword">finally</span> clause</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divide(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">division by zero!</span><br><span class="line">executing <span class="keyword">finally</span> clause</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divide(<span class="string">"2"</span>, <span class="string">"1"</span>)</span><br><span class="line">executing <span class="keyword">finally</span> clause</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> divide</span><br><span class="line">TypeError: unsupported operand type(s) <span class="keyword">for</span> /: <span class="string">'str'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br></pre></td></tr></table></figure><p>如你所见， <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句在任一事件中都被执行。 <a href="https://docs.python.org/3/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 异常因进行字符串除法引发，而且未被 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 子句捕获，并因此在 <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句被执行后之后才产生。</p><p>在实际的应用中， <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句在释放外部资源（如文件或者网络连接）时非常非常有用，无论资源是否被成功使用。</p><h3 id="预定义的清理操作"><a href="#预定义的清理操作" class="headerlink" title="预定义的清理操作"></a>预定义的清理操作</h3><p>某些对象定义了在不再需要该对象时需要执行的标准清理操作，无论在该对象上进行的操作是成功还是失败。 查看以下示例，该示例尝试打开文件并将其内容打印到屏幕上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"myfile.txt"</span>):</span><br><span class="line">    print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>此代码的问题在于，在部分代码执行完毕后，它会使文件保持打开一段不确定的时间。 这在简单脚本中不是问题，但对于较大的应用可能是一个问题。 <a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 语句使用允许文件之类的对象是，以保证始终及时正确的清理的方式进行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"myfile.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>在语句执行后，文件 <em>f</em> 总是被关闭，即使在处理每行时遇到错误。 与文件相同，提供预定义清理操作的对象将在其文档中指出这一点。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/tutorial/errors.html" target="_blank" rel="noopener">https://docs.python.org/3/tutorial/errors.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python使用名为”异常”的特殊对象来管理程序执行期间发生的错误。&lt;/p&gt;
&lt;h3 id=&quot;语法错误&quot;&gt;&lt;a href=&quot;#语法错误&quot; class=&quot;headerlink&quot; title=&quot;语法错误&quot;&gt;&lt;/a&gt;语法错误&lt;/h3&gt;&lt;p&gt;语法错误，也叫作解析错误，这可能是你在学
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python输入和输出</title>
    <link href="https://yo42.github.io/2018/09/08/python%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/"/>
    <id>https://yo42.github.io/2018/09/08/python输入和输出/</id>
    <published>2018-09-08T13:26:51.456Z</published>
    <updated>2018-09-08T13:50:04.711Z</updated>
    
    <content type="html"><![CDATA[<p>程序的输出可以有多种形式：我们可以将数据以人类可读的形式打印到屏幕上，或者将其写入到文件中以供后续使用。本章将讨论其中的几种实现方式。</p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>迄今为止，在 Python 中存在两种输出值的方法：<em>表达式语句</em>以及 <a href="https://docs.python.org/3/library/functions.html#print" target="_blank" rel="noopener"><code>print()</code></a> 函数。（第三种方法是使用文件对象的 <code>write()</code> 方法；标准文件输出可以参考 <code>sys.stdout</code> 方法，其详细内容请查阅库参考手册。）</p><p>通常，相较于简单地打印以空格为分隔符的值，你会想要对程序的输出结果进行更多的格式控制。在 Python 中，存在如下几种格式化输出的方法：</p><ul><li><p>使用 <a href="https://docs.python.org/3/tutorial/inputoutput.html#tut-f-strings" target="_blank" rel="noopener">f-strings</a> 字符串。这类字符串需要在引号标记之前，以 <code>f</code> 或者 <code>F</code> 作为字符串的开头。你可以使用 <code>{</code> 和 <code>}</code> 包裹想要嵌入到字符串中的 Python 表达式。该表达式可以是某个变量或字面值 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>year = <span class="number">2016</span> ; event = <span class="string">'Referendum'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f'Results of the <span class="subst">&#123;year&#125;</span> <span class="subst">&#123;event&#125;</span>'</span></span><br><span class="line"><span class="string">'Results of the 2016 Referendum'</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 是格式化字符串的第二种方法。相较于第一种方法，该方法需要你进行更多的操作。你仍然可以在字符串中使用 <code>{</code> 和 <code>}</code> 来内嵌变量，也可以进行详细的格式化设计。但这要求你提供与之对应的被格式化的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>yes_votes = <span class="number">42</span>_572_654 ; no_votes = <span class="number">43</span>_132_495</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>percentage = yes_votes/(yes_votes+no_votes)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:-9&#125; YES votes  &#123;:2.2%&#125;'</span>.format(yes_votes, percentage)</span><br><span class="line"><span class="string">' 42572654 YES votes  49.67%'</span></span><br></pre></td></tr></table></figure></li><li><p>当然，你也可以通过字符串的切片操作和连接操作来完成字符串的格式化处理。这种方法可以创建任何你想要的格式化形式。在 string 类型中，包含了一些能够将字符串按指定列宽填充的方法。</p></li></ul><p>如果你仅仅想要在调试时打印某些变量，而不进行格式化输出，那么你也可以使用 <a href="https://docs.python.org/3/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 函数或者 <a href="https://docs.python.org/3/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 函数将任意值转化成字符串。</p><p><a href="https://docs.python.org/3/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 函数能够将值以人类可读的形式呈现，而 <a href="https://docs.python.org/3/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 函数则是将值以解释器可读的形式呈现（如果没有与之对应的转换语法，则会产生 <a href="https://docs.python.org/3/library/exceptions.html#SyntaxError" target="_blank" rel="noopener"><code>SyntaxError</code></a> 异常）。若某个对象没有适用于人类可读的形式，则 <a href="https://docs.python.org/3/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 函数的返回值与 <a href="https://docs.python.org/3/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 函数相同。在 Python 中，诸如数值、或者是链表、字典这样的结构，上述两种函数各自有统一的呈现方式。但是对于字符串，上述两种函数各自有独特的呈现方式。</p><p>如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'Hello, world.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(s)</span><br><span class="line"><span class="string">'Hello, world.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>repr(s)</span><br><span class="line"><span class="string">"'Hello, world.'"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1</span>/<span class="number">7</span>)</span><br><span class="line"><span class="string">'0.14285714285714285'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span> * <span class="number">3.25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">200</span> * <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'The value of x is '</span> + repr(x) + <span class="string">', and y is '</span> + repr(y) + <span class="string">'...'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">The value of x <span class="keyword">is</span> <span class="number">32.5</span>, <span class="keyword">and</span> y <span class="keyword">is</span> <span class="number">40000.</span>..</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 对于字符串，repr() 函数会添加引号以及反斜杠：</span></span><br><span class="line"><span class="meta">... </span>hello = <span class="string">'hello, world\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hellos = repr(hello)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(hellos)</span><br><span class="line"><span class="string">'hello, world\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># repr() 函数的参数也可以是某个 Python 对象：</span></span><br><span class="line"><span class="meta">... </span>repr((x, y, (<span class="string">'spam'</span>, <span class="string">'eggs'</span>)))</span><br><span class="line"><span class="string">"(32.5, 40000, ('spam', 'eggs'))"</span></span><br></pre></td></tr></table></figure><h4 id="格式化字符串文字"><a href="#格式化字符串文字" class="headerlink" title="格式化字符串文字"></a>格式化字符串文字</h4><p><a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" target="_blank" rel="noopener">格式化字符串文字</a> （简称 f-strings ）允许你在字符串中包含Python表达式的值，方法是在字符串前面加上 <code>f</code> 或者 <code>F</code> ，并将表达式写成 <code>{expression}</code> 格式。</p><p>在表达式后面可以加上格式说明符。这样能够更好地控制表达式值的输出格式。下面的例子将 PI 舍入到小数位数后三位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">f'The value of pi is approximately <span class="subst">&#123;math.pi:<span class="number">.3</span>f&#125;</span>.'</span>)</span><br></pre></td></tr></table></figure><p>在 <code>&#39;:&#39;</code> 之后加上一个整数表示该字段的最小字符数，这对于列排序很有用。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">'Sjoerd'</span>: <span class="number">4127</span>, <span class="string">'Jack'</span>: <span class="number">4098</span>, <span class="string">'Dcab'</span>: <span class="number">7678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, phone <span class="keyword">in</span> table.items():</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">f'<span class="subst">&#123;name:<span class="number">10</span>&#125;</span> ==&gt; <span class="subst">&#123;phone:<span class="number">10</span>d&#125;</span>'</span>)</span><br><span class="line">...</span><br><span class="line">Sjoerd     ==&gt;       4127</span><br><span class="line">Jack       ==&gt;       4098</span><br><span class="line">Dcab       ==&gt;       7678</span><br></pre></td></tr></table></figure><p>也可用其他修饰符来转换要格式化的值。 <code>&#39;!a&#39;</code> 表示应用 <a href="https://docs.python.org/3/library/functions.html#ascii" target="_blank" rel="noopener"><code>ascii()</code></a>函数 ， <code>&#39;!s&#39;</code> 表示应用 <a href="https://docs.python.org/3/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 函数， 另外 <code>&#39;!r&#39;</code> 表示应用 <a href="https://docs.python.org/3/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>animals = <span class="string">'eels'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">f'My hovercraft is full of <span class="subst">&#123;animals&#125;</span>.'</span>)</span><br><span class="line">My hovercraft <span class="keyword">is</span> full of eels.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'My hovercraft is full of &#123;animals !r&#125;.'</span>)</span><br><span class="line">My hovercraft <span class="keyword">is</span> full of <span class="string">'eels'</span>.</span><br></pre></td></tr></table></figure><p>有关这些格式规范的参考，请参阅参考指南 <a href="https://docs.python.org/3/library/string.html#formatspec" target="_blank" rel="noopener">最小字符串格式化</a>。</p><h4 id="format-字符串格式化方法"><a href="#format-字符串格式化方法" class="headerlink" title="format() 字符串格式化方法"></a>format() 字符串格式化方法</h4><p><a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 的基本使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'We are the &#123;&#125; who say "&#123;&#125;!"'</span>.format(<span class="string">'knights'</span>, <span class="string">'Ni'</span>))</span><br><span class="line">We are the knights who say <span class="string">"Ni!"</span></span><br></pre></td></tr></table></figure><p>其中的括号和字符（称为格式字段）将用传入 <a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 方法中的对象来替换。括号中的数字可用于表示传递给 <a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 方法的对象的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;0&#125; and &#123;1&#125;'</span>.format(<span class="string">'spam'</span>, <span class="string">'eggs'</span>))</span><br><span class="line">spam <span class="keyword">and</span> eggs</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;1&#125; and &#123;0&#125;'</span>.format(<span class="string">'spam'</span>, <span class="string">'eggs'</span>))</span><br><span class="line">eggs <span class="keyword">and</span> spam</span><br></pre></td></tr></table></figure><p>如果在 <a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 方法中使用关键字参数，其值等于参数名称对应的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'This &#123;food&#125; is &#123;adjective&#125;.'</span>.format(</span><br><span class="line"><span class="meta">... </span>      food=<span class="string">'spam'</span>, adjective=<span class="string">'absolutely horrible'</span>))</span><br><span class="line">This spam <span class="keyword">is</span> absolutely horrible.</span><br></pre></td></tr></table></figure><p>位置和关键字参数可以任意组合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'The story of &#123;0&#125;, &#123;1&#125;, and &#123;other&#125;.'</span>.format(<span class="string">'Bill'</span>, <span class="string">'Manfred'</span>,</span><br><span class="line">                                                       other=<span class="string">'Georg'</span>))</span><br><span class="line">The story of Bill, Manfred, <span class="keyword">and</span> Georg.</span><br></pre></td></tr></table></figure><p>如果你有一个不想拆分的长字符，使用名称而不是位置来进行格式化将会是一个更好的方法。这可以简单的使用 <code>&#39;[]&#39;</code> 符号来获取字典中的键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">'Sjoerd'</span>: <span class="number">4127</span>, <span class="string">'Jack'</span>: <span class="number">4098</span>, <span class="string">'Dcab'</span>: <span class="number">8637678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Jack: &#123;0[Jack]:d&#125;; Sjoerd: &#123;0[Sjoerd]:d&#125;; '</span></span><br><span class="line"><span class="meta">... </span>      <span class="string">'Dcab: &#123;0[Dcab]:d&#125;'</span>.format(table))</span><br><span class="line">Jack: <span class="number">4098</span>; Sjoerd: <span class="number">4127</span>; Dcab: <span class="number">8637678</span></span><br></pre></td></tr></table></figure><p>上面的方法也可以使用 ‘**’ 将字典中的信息进行传递。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">'Sjoerd'</span>: <span class="number">4127</span>, <span class="string">'Jack'</span>: <span class="number">4098</span>, <span class="string">'Dcab'</span>: <span class="number">8637678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Jack: &#123;Jack:d&#125;; Sjoerd: &#123;Sjoerd:d&#125;; Dcab: &#123;Dcab:d&#125;'</span>.format(**table))</span><br><span class="line">Jack: <span class="number">4098</span>; Sjoerd: <span class="number">4127</span>; Dcab: <span class="number">8637678</span></span><br></pre></td></tr></table></figure><p>这与内置函数 <a href="https://docs.python.org/3/library/functions.html#vars" target="_blank" rel="noopener"><code>vars()</code></a> 的结合非常有用，这个内置函数能够能够返回包含所有局部变量的字典。</p><p>例如，下面的代码生成了将数字本身与其平方、立方整齐对齐的数列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;0:2d&#125; &#123;1:3d&#125; &#123;2:4d&#125;'</span>.format(x, x*x, x*x*x))</span><br><span class="line">...</span><br><span class="line"> <span class="number">1</span>   <span class="number">1</span>    <span class="number">1</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">4</span>    <span class="number">8</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">9</span>   <span class="number">27</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">16</span>   <span class="number">64</span></span><br><span class="line"> <span class="number">5</span>  <span class="number">25</span>  <span class="number">125</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">36</span>  <span class="number">216</span></span><br><span class="line"> <span class="number">7</span>  <span class="number">49</span>  <span class="number">343</span></span><br><span class="line"> <span class="number">8</span>  <span class="number">64</span>  <span class="number">512</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">81</span>  <span class="number">729</span></span><br><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>有关字符串格式的完整概述 <a href="https://docs.python.org/3/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> ，请参阅 <a href="https://docs.python.org/3/library/string.html#formatstrings" target="_blank" rel="noopener">格式字符串语法</a> 。</p><h4 id="手动格式化字符串"><a href="#手动格式化字符串" class="headerlink" title="手动格式化字符串"></a>手动格式化字符串</h4><p>这是一些相同的平方和立方的表，手动格式化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line"><span class="meta">... </span>    print(repr(x).rjust(<span class="number">2</span>), repr(x*x).rjust(<span class="number">3</span>), end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="comment"># 注意在前一行中使用 'end'</span></span><br><span class="line"><span class="meta">... </span>    print(repr(x*x*x).rjust(<span class="number">4</span>))</span><br><span class="line">...</span><br><span class="line"> <span class="number">1</span>   <span class="number">1</span>    <span class="number">1</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">4</span>    <span class="number">8</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">9</span>   <span class="number">27</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">16</span>   <span class="number">64</span></span><br><span class="line"> <span class="number">5</span>  <span class="number">25</span>  <span class="number">125</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">36</span>  <span class="number">216</span></span><br><span class="line"> <span class="number">7</span>  <span class="number">49</span>  <span class="number">343</span></span><br><span class="line"> <span class="number">8</span>  <span class="number">64</span>  <span class="number">512</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">81</span>  <span class="number">729</span></span><br><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>（注意 <a href="https://docs.python.org/3/library/functions.html#print" target="_blank" rel="noopener"><code>print()</code></a> 函数在每一列中添加了一个空格 <a href="https://docs.python.org/3/library/functions.html#print" target="_blank" rel="noopener"><code>print()</code></a> ：它经常在参数之间添加空格。）</p><p>字符串对象的 <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" target="_blank" rel="noopener"><code>str.rjust()</code></a> 方法在某一栏以给定的宽度会在左边填充空格来对一个字符串进行右对齐。 <a href="https://docs.python.org/3/library/stdtypes.html#str.ljust" target="_blank" rel="noopener"><code>str.ljust()</code></a> 和 <a href="https://docs.python.org/3/library/stdtypes.html#str.center" target="_blank" rel="noopener"><code>str.center()</code></a> 等这些方法相似。 这些方法不写入任何东西，它们只会返回一个新的字符串。如果输入的字符串太长，它们不会截断它，但是会原样返回它。它们会搞乱你的列的排序，但这通常比替代方案更好，它们会通过值来排布。（如果你真的想截断字符串，通常你可以添加一个切片操作，像  <code>x.ljust(n)[:n]</code> 。）</p><p>有另外一个方法， <a href="https://docs.python.org/3/library/stdtypes.html#str.zfill" target="_blank" rel="noopener"><code>str.zfill()</code></a>， 它会在一个数字型的字符串的左边添加0。它了解正负号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'12'</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">'00012'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'-3.14'</span>.zfill(<span class="number">7</span>)</span><br><span class="line"><span class="string">'-003.14'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'3.14159265359'</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">'3.14159265359'</span></span><br></pre></td></tr></table></figure><h4 id="传统字符串格式化方法"><a href="#传统字符串格式化方法" class="headerlink" title="传统字符串格式化方法"></a>传统字符串格式化方法</h4><p>操作符 ‘%’ 同样可以被用来格式化字符串。它将该操作符左侧参数解释为 ‘sprintf()’ 样式的字符串应用到操作符右侧参数，并且返回字符串。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'The value of pi is approximately %5.3f.'</span> % math.pi)</span><br><span class="line">The value of pi <span class="keyword">is</span> approximately <span class="number">3.142</span>.</span><br></pre></td></tr></table></figure><p>更多信息请参考文档  <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" target="_blank" rel="noopener">printf-style String Formatting</a>。</p><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><p><a href="https://docs.python.org/3/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a> 将返回一个文件对象，它使用两个参数作为输入：<code>open(filename,mode)</code>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'workfile'</span>, <span class="string">'w'</span>)</span><br></pre></td></tr></table></figure><p>第一个参数 <em>filename</em> 是一个包含文件名的字符串。第二个参数 <em>mode</em> 是包含几个单独字母的字符串，用于解释该文件将被用何种方式处理。 <em>mode</em> 参数可以使用 <code>&#39;r&#39;</code> 表示只读模式；<code>&#39;w&#39;</code> 表示只写入模式（同时，同名文件的文件内容将会被抹掉）； <code>&#39;a&#39;</code> 表示在文件末尾追加写入，在该模式下，任何数据都会被自动追加到该文件末尾；<code>&#39;r+&#39;</code> 表示读写操作。 <em>mode</em> 是可选的，未指定的情况下将会默认为 <code>&#39;r&#39;</code> 模式进行读文件。</p><p>正常情况下，文件以 <em>text mode</em> 打开， 这就意味着，我们使用字符串数据对文件进行读写操作，这些都是按照某种指定的编码格式进行读写。如果编码格式未被指定，默认编码格式是与平台相关（详情见 <a href="https://docs.python.org/3/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a>）。 <code>&#39;b&#39;</code> 表示以 <em>二进制模式</em> 打开文件并且追加数据， 数据以字节的形式读写到文件中，但是这种模式应该被用来打开不包含文本的文件中。</p><p>在 <em>text mode</em> 中，默认读操作的行尾  <code>\n</code> 同样是依据指定平台进行选择的。（Unix系统中使用<code>\n</code> ， Windows系统中使用 <code>\r\n</code>）。在 <em>text mode</em> 模式下写入文件，默认情况下会将<code>\n</code>转换成对应的平台的行尾字符。这种对文件修改的操作仅适用于文本文件，但是在操作  <code>JPEG</code> 或者  <code>EXE</code> 二进制数据文件过程中，要非常小心的使用二进制模式对他们进行读写操作。</p><p>关键字  <a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 是非常适合用于处理文件对象。它的优势在于，即使发生了 <em>exception</em>，文件操作序列结束后也可以自动关闭。使用关键字 <a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 处理的代码要远少于 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a>-<a href="https://docs.python.org/3/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 块进行处理的代码，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'workfile'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    read_data = f.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.closed</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>如果未使用关键字 <a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 操作文件，那么必须要调用 <code>f.close()</code> 来结束文件和释放系统资源。未结束一个文件时，Python 的垃圾回收机制将会最终关闭并销毁这个文件对象，但是这个文件将在一段时间内仍然处于打开状态。不同的 Python 实现方式将会在不同的时间对文件进行释放，这将会带来其他的风险。</p><p>当文件对象被关闭后，使用 <a href="https://docs.python.org/3/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 或者调用 <code>f.close()</code> 对文件对象的操作都会失效。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: I/O operation on closed file.</span><br></pre></td></tr></table></figure><h4 id="文件对象的方法"><a href="#文件对象的方法" class="headerlink" title="文件对象的方法"></a>文件对象的方法</h4><p>该例子的剩下部分将会继续使用上文所建立的文件 <code>f</code> 进行介绍。</p><p>读取文件内容的方法为 <code>f.read(size)</code> ，可以读取指定大小的文件内容，可以得到一个字符串（文本模式）或者字节对象（二进制模式）。 <em>size</em> 是一个可选的数值参数，如果 <em>size</em> 省略或为负，可以读取并返回整个文件；要注意的是，文件的大小有可能超出设备内存的上限。否则，最多读取并返回 <em>size</em> 的字节内容。当读取到文件的结尾时，<code>f.read()</code> 会返回一个空字符串（<code>&#39;&#39;</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">'This is the entire file.\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure><p><code>f.readline()</code> 可以仅仅从文件里读取一行；读取的字符串中，结尾会有一个换行符（<code>\n</code>），唯一的例外时在最后一行文件不以换行符结束。这个结果是明确的。如果 <code>f.readline()</code> 返回一个空字符串，那么已经读取到文件的结尾，因为空白行只有一个 <code>&#39;\n&#39;</code>，一个仅仅包含换行符的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">'This is the first line of the file.\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">'Second line of the file\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure><p>要读取多行内容，你可以借助循环遍历整个文档类型。这是一种内存复杂度优先，快速而编码简单的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="meta">... </span>    print(line, end=<span class="string">''</span>)</span><br><span class="line">...</span><br><span class="line">This <span class="keyword">is</span> the first line of the file.</span><br><span class="line">Second line of the file</span><br></pre></td></tr></table></figure><p>如果你想一行行读取整个文件，你同样可以使用 <code>list(f)</code> 或<code>f.readlines()</code>，你可以得到一个各行字符串的列表。</p><p><code>f.write(string)</code> 可以写入字符串 <em>string</em> 内容到文件内，返回写入的字符数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'This is a test\n'</span>)</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><p>其他类型需要转换才能写入文件中，或者转成字符串（文本模式）或者字节类型（二进制模式）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = (<span class="string">'the answer'</span>, <span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = str(value)  <span class="comment"># convert the tuple to string</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(s)</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><p><code>f.tell()</code> 返回一个整数，给出当前在文件中的位置；在二进制模式中，用字节数表示，在文本模式中，用不透明数表示。</p><p>要改变当前的位置，可以使用 <code>f.seek(offset, from_what)</code> 。新位置从参考点出发，由参数 <em>offset</em> 值计算得出；参考点位置由 <em>from_what</em> 参数给出。 <em>from_what</em> 为 0 时，从文件开头出发；为 1 时，从当前位置出发；为 2 时从文件结尾出发。 <em>from_what</em> 缺省值为 0 ，采用文件开头作为参考点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'workfile'</span>, <span class="string">'rb+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">b'0123456789abcdef'</span>)</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">5</span>)      <span class="comment"># Go to the 6th byte in the file</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">1</span>)</span><br><span class="line"><span class="string">b'5'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">-3</span>, <span class="number">2</span>)  <span class="comment"># Go to the 3rd byte before the end</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">1</span>)</span><br><span class="line"><span class="string">b'd'</span></span><br></pre></td></tr></table></figure><p>在文本文件（即那些没有使用 <code>b</code> 参数打开的字符串模式文件），只能从文件的开头或是 <code>f.tell()</code> 返回值出发（从文件末尾的定位 <code>seek(0, 2)</code> 为异常）。任何其他的 <em>offset</em> 将产生不可预知的表现。</p><p>文件对象有一些附加的方法，比如 <code>isatty()</code> 和 <code>truncate()</code>，它们的使用频率较低；有关文件对象的完整指南，请参阅「参考文档」。</p><h4 id="利用-json结构保存数据"><a href="#利用-json结构保存数据" class="headerlink" title="利用 json结构保存数据"></a>利用 <a href="https://docs.python.org/3/library/json.html#module-json" target="_blank" rel="noopener"><code>json</code></a>结构保存数据</h4><p>字符串可以轻松地从文件读写。但是数值要花费上更多的功夫，因为 <code>read()</code> 方法可以仅仅返回字符串，这将必须经过一些函数处理，例如 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener"><code>int()</code></a>，将 <code>&#39;123&#39;</code> 字符串转化为数值 123 。 当你希望保存更复杂的数据类型像嵌套列表或字典时，手动解析和序列化复杂程度难以接受。</p><p>Python 提供了被称为 <a href="http://json.org/" target="_blank" rel="noopener">JSON (JavaScript Object Notation)</a> 的流行数据交换格式，而不希望用户不断自行编写和调试代码以储存复杂的数据类型。标准库 <a href="https://docs.python.org/3/library/json.html#module-json" target="_blank" rel="noopener"><code>json</code></a> 可以采用 Python 式的数据层级，并且转换成字符串的形式； 这个进程称为 <em>序列化</em> 。反之，从字符串转化成数据类型被称作 <em>反序列化</em> 。得到的字符串对象可以储存在文件或数据中，也可以通过网络连接发送到某个远程主机。</p><blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>JSON 格式通常被现代应用程序用于数据交换，为许多程序员所熟悉，使其成为交互数据的较优选择。</p></blockquote><p>如果你有一个对象 <code>x</code> ，你能够通过如下的代码访问其 JSON 字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps([<span class="number">1</span>, <span class="string">'simple'</span>, <span class="string">'list'</span>])</span><br><span class="line"><span class="string">'[1, "simple", "list"]'</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/3/library/json.html#json.dumps" target="_blank" rel="noopener"><code>dumps()</code></a> 另一个变体函数，叫作 <a href="https://docs.python.org/3/library/json.html#json.dump" target="_blank" rel="noopener"><code>dump()</code></a> ，只将对象序列化成一个 <a href="https://docs.python.org/3/glossary.html#term-text-file" target="_blank" rel="noopener">文本文件</a> 。 所以，如果 <code>f</code> 是一个 <a href="https://docs.python.org/3/glossary.html#term-text-file" target="_blank" rel="noopener">文本文件</a> 已打开的可写入文件对象，我们能够利用如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dump(x, f)</span><br></pre></td></tr></table></figure><p>要重新解码对象，当 <code>f</code> 是一个 <a href="https://docs.python.org/3/glossary.html#term-text-file" target="_blank" rel="noopener">文本文件</a> 已打开的读取用文件对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = json.load(f)</span><br></pre></td></tr></table></figure><p>这种简单的序列化技术可以处理列表和字典，但是不足以在 JSON 中序列化任意类的实例。 参考文档 <a href="https://docs.python.org/3/library/json.html#module-json" target="_blank" rel="noopener"><code>json</code></a> 包含对此的解释.</p><blockquote><h4 id="也可以看"><a href="#也可以看" class="headerlink" title="也可以看"></a>也可以看</h4><p><a href="https://docs.python.org/3/library/pickle.html#module-pickle" target="_blank" rel="noopener"><code>pickle</code></a> - Pickle 模块</p><p>与 <a href="https://docs.python.org/3/tutorial/inputoutput.html#tut-json" target="_blank" rel="noopener">JSON</a> 相反， <em>pickle</em> 是一个允许对任意复杂的 Python 对象进行序列化的协议。因此，它仅仅适配 Python ，不能用于与其他语言编写的应用程序通信。默认情况下，它也是不安全的：如果有人特地设计用于注入攻击的数据，这些不受信任的 Pickle 数据可能会在序列化中被 Python 运行。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/tutorial/inputoutput.html" target="_blank" rel="noopener">https://docs.python.org/3/tutorial/inputoutput.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;程序的输出可以有多种形式：我们可以将数据以人类可读的形式打印到屏幕上，或者将其写入到文件中以供后续使用。本章将讨论其中的几种实现方式。&lt;/p&gt;
&lt;h3 id=&quot;格式化输出&quot;&gt;&lt;a href=&quot;#格式化输出&quot; class=&quot;headerlink&quot; title=&quot;格式化输出&quot;&gt;
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>python模块</title>
    <link href="https://yo42.github.io/2018/09/06/python%E6%A8%A1%E5%9D%97/"/>
    <id>https://yo42.github.io/2018/09/06/python模块/</id>
    <published>2018-09-06T11:25:23.588Z</published>
    <updated>2018-09-07T01:45:56.966Z</updated>
    
    <content type="html"><![CDATA[<p>如果你从 Python 解释器退出然后再进入它，你所做的定义（函数和变量）都会消失。因此，如果你想写某些更长的程序，你最好使用一个文本编辑器来为解释器准备输入，然后以这个文件作为输入来运行程序。这也被称为创建一个 <em>脚本</em>。当你的程序变得更长，你也许会想将它分成几个文件方便管理。你也许还想在几个程序中直接使用函数而不用在每个程序中拷贝函数定义。</p><p>为了支持这种特性，Python 可以把定义放入一个文件中然后在一个脚本或交互式解释器实例中使用它。这个文件被叫做 <em>模块 （module）</em>，模块中的定义可以通过 <em>导入</em> 进入到其他模块或者 <em>主</em> 模块（你在顶层和计算器模式下执行的脚本中可以访问的变量集合）。</p><p>一个模块是一个包含 Python 定义和声明的文件。文件是模块名加上 <code>.py</code> 后缀。在一个模块中，模块名（字符串类型）可以通过全局变量 <code>__name__</code> 获取。例如，使用你最喜欢的文本编辑器在当前目录下创建一个叫 <code>fibo.py</code> 的文件，这个文件包含以下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那契数模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>    <span class="comment"># 打印斐波那契数直到 n</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        print(a, end=<span class="string">' '</span>)</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span>   <span class="comment"># 返回到 n 的斐波那契数</span></span><br><span class="line">    result = []</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        result.append(a)</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>现在进入 Python解释器然后通过下面的命令导入这个模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo</span><br></pre></td></tr></table></figure><p>这样做不会直接在当前环境中导入 <code>fibo</code> 中定义的函数名，只会导入名为 <code>fibo</code> 的模块。使用模块名可以获取模块中定义的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fibo.fib(<span class="number">1000</span>)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span> <span class="number">610</span> <span class="number">987</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fibo.fib2(<span class="number">100</span>)</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fibo.__name__</span><br><span class="line"><span class="string">'fibo'</span></span><br></pre></td></tr></table></figure><p>如果你打算经常使用一个函数，你可以把它赋值给一个局部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib = fibo.fib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">500</span>)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span></span><br></pre></td></tr></table></figure><h4 id="模块进阶"><a href="#模块进阶" class="headerlink" title="模块进阶"></a>模块进阶</h4><p>一个模块可以包含可执行声明包括函数定义。这些声明被用于初始化模块。它们只在模块被 <em>第一</em> 次导入时执行。 <a href="https://docs.python.org/3/tutorial/modules.html#id2" target="_blank" rel="noopener">[1]</a>（如果文件被作为脚本运行它们也会被执行）</p><p>每个模块都有其私有的符号表，模块中定义的所有函数将这个符号表作为全局符号表。因此，一个模块的作者可以在模块中使用全局变量而无需担心与其他模块的全部变量冲突。另一方面，如果你知道你在干什么，你同样可以使用 <code>模块.变量</code> 的方式来获取一个模块的全局变量。</p><p>模块可以导入其他模块。将所有 <a href="https://docs.python.org/3/reference/simple_stmts.html#import" target="_blank" rel="noopener"><code>import</code></a> 语句放在模块（或者脚本，如果这个问题重要的话）的开头不是必须的，但习惯如此。被导入的模块名被放置于当前模块的全局符号表中。</p><p> <a href="https://docs.python.org/3/reference/simple_stmts.html#import" target="_blank" rel="noopener"><code>import</code></a> 声明的一种变体可以把一个模块中的变量直接导入当前模块的符号表中。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fibo <span class="keyword">import</span> fib, fib2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">500</span>)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span></span><br></pre></td></tr></table></figure><p>这样做不会把模块名引入本地符号表中（因此上面的例子里，<code>fibo</code> 没有被定义）</p><p>还有一种导入声明的变体可以导入一个模块中定义的所有变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fibo <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">500</span>)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span></span><br></pre></td></tr></table></figure><p>这会导入模块中除了以下划线（<code>_</code>）开头的所有名称。大多数情况下 Python 程序员不使用这个机制，因为它会为解释器引入一系列位置未知变量，从而有可能覆盖你已经定义的某些变量。</p><p>请注意，一般来说，使用 <code>import *</code> 导入模块或包是不受欢迎的，因为这通常会降低代码可读性。但在使用交互型解释器为了减少打字而使用它是允许的。</p><p>如果模块名后紧跟 <a href="https://docs.python.org/3/reference/compound_stmts.html#as" target="_blank" rel="noopener"><code>as</code></a>, 那么 <a href="https://docs.python.org/3/reference/compound_stmts.html#as" target="_blank" rel="noopener"><code>as</code></a> 后的变量名会与被导入的模块名绑定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo <span class="keyword">as</span> fib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib.fib(<span class="number">500</span>)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span></span><br></pre></td></tr></table></figure><p>这与 <code>import fibo</code> 的方式导入相同，除了模块现在被命名为 <code>fib</code> 而不是 <code>fibo</code>。</p><p>使用 <a href="https://docs.python.org/3/reference/simple_stmts.html#from" target="_blank" rel="noopener"><code>from</code></a> 时可以使用这个机制达到相同的效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fibo <span class="keyword">import</span> fib <span class="keyword">as</span> fibonacci</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fibonacci(<span class="number">500</span>)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span></span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>由于性能原因，每个模块在每个解释器会话中只会被导入一次。因此，如果你改变了你的模块，你必须重启解释器 – 或者你只想交互式地测试一个模块，你可以使用 <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" target="_blank" rel="noopener"><code>importlib.reload()</code></a>，例如，<code>import importlib;importlib.reload(modulename)</code>。</p><h4 id="将可执行模块当做脚本"><a href="#将可执行模块当做脚本" class="headerlink" title="将可执行模块当做脚本"></a>将可执行模块当做脚本</h4><p>当你这样使用一个 Python 模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python fibo.py &lt;arguments&gt;</span><br></pre></td></tr></table></figure><p>模块中的代码会被执行，就如你导入这个模块一样，除了 <code>__name__</code> 变量被赋值为 <code>&quot;__main__&quot;</code>。这意味着在模块的末尾添加下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    fib(int(sys.argv[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>你可以让一个文件当成脚本来使用同时也可以将其作为一个可导入模块，因为代码会解析命令行，并只在模块作为 “main” 文件时才会执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python fibo.py <span class="number">50</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span></span><br></pre></td></tr></table></figure><p>如果模块被导入，代码不会运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>这经常被用于提供模块的用户接口或测试（以脚本的形式运行模块来执行某个测试集）</p><h4 id="模块搜索路径"><a href="#模块搜索路径" class="headerlink" title="模块搜索路径"></a>模块搜索路径</h4><p> 当一个名为 <code>spam</code> 的模块被导入时，解释器首先寻找同名的内建模块。如果没有发现同名内建模块，解释器会根据 <a href="https://docs.python.org/3/library/sys.html#sys.path" target="_blank" rel="noopener"><code>sys.path</code></a> 提供的一系列路径下寻找名为 <code>spam.py</code> 的文件。<a href="https://docs.python.org/3/library/sys.html#sys.path" target="_blank" rel="noopener"><code>sys.path</code></a> 根据下面这些位置进行初始化：</p><ul><li>包含输入脚本的目录（如果没有指明文件则为当前目录）</li><li><a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" target="_blank" rel="noopener"><code>PYTHONPATH</code></a> 一个目录的列表，语法与 shell 的 <code>PATH</code> 变量相同。</li><li>安装依赖默认路径</li></ul><blockquote><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>在支持符号链接的文件系统上，包含输入脚本的目录在符号链接被跟随之后才被计算。换句话说，包含符号链接的目录 <strong>不会</strong> 被添加到模块搜索路径。</p></blockquote><p>初始化后，Python 程序会修改 <a href="https://docs.python.org/3/library/sys.html#sys.path" target="_blank" rel="noopener"><code>sys.path</code></a>。包含当前运行脚本的目录会被放在搜索路径的首位，位于标准库之前。这意味着该目录中与标准库同名的文件将会被导入，而相应的标准库则不会被导入。这将导致错误，除非你有意替换。参考 <a href="https://docs.python.org/3/tutorial/modules.html#tut-standardmodules" target="_blank" rel="noopener">Standard Modules</a> 获取更多信息。</p><h3 id="“编译的”-Python-文件"><a href="#“编译的”-Python-文件" class="headerlink" title="“编译的” Python 文件"></a>“编译的” Python 文件</h3><p>为了加快模块载入速度，Python 将每个模块的编译版本以 <code>module.*version*.pyc</code> 的名称缓存在 <code>__pycache__</code> 目录下，”version” 编码编译文件的格式，它通常包含 Python 版本号。例如，在 CPython 3.3 编译的 spam.py 文件缓存在 <code>__pycache__/spam.cpython-33.py</code> 中。这种命名方式允许不同发行版本和不同版本的 Python 编译文件共存。</p><p>Python 检查源文件修改日期并与编译的文件进行比较以确认编译文件是否过时，需要重新编译。这是一个全自动过程。同样的，编译的模块不依赖于操作系统，所以相同的库可以在不同架构的系统之间分享。</p><p>Python 在两种情况下不检查缓存。首先，Python 总会重新编译且不会缓存从命令行直接导入模块。其次，如果没有源模块，Python 也不会检查缓存。为了支持无源文件（只有编译文件）发布，编译的模块必须位于源目录，且不能有一个源模块。</p><p>对于高阶玩家的提醒：</p><ul><li>你可以使用 <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-o" target="_blank" rel="noopener"><code>-O</code></a> 或 <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-oo" target="_blank" rel="noopener"><code>-OO</code></a> Python 命令开关来减少一个编译模块的大小. <code>-O</code> 选项会去除断言声明，<code>-OO</code> 选项会去除断言声明和 <code>__doc__</code> 字符串。由于一些程序依赖于这些变量，请只有在你明确知道自己在干嘛时使用这两个选项。“优化” 过的模块有一个 <code>opt-</code> 标签通常会更小。以后的版本也许会改版优化的效果。</li><li>从 <code>.pyc</code> 文件读取的程序不会比从 <code>.py</code> 文件读取的程序快；<code>.pyc</code> 只在载入时更快。</li><li>模块 <a href="https://docs.python.org/3/library/compileall.html#module-compileall" target="_blank" rel="noopener"><code>compileall</code></a> 可以在一个目录下创建所有模块的 .pyc 文件。</li><li>编译过程还有更多细节，包括一个决策流程图，它可以在 <a href="https://www.python.org/dev/peps/pep-3147" target="_blank" rel="noopener"><strong>PEP 3147</strong></a> 找到。</li></ul><h3 id="标准模块"><a href="#标准模块" class="headerlink" title="标准模块"></a>标准模块</h3><p>Python 带有一个标准模块库，并发布有独立的文档，名为 Python 库参考手册（此后称其为”库参考手册”）。有一些模块内置于解释器之中，这些操作的访问接口不是语言内核的一部分，但是已经内置于解释器了。这既是为了提高效率，也是为了给系统调用等操作系统原生访问提供接口。这类模块集合是一个依赖于底层平台的配置选项。例如，<a href="https://docs.python.org/3/library/winreg.html#module-winreg" target="_blank" rel="noopener">winreg</a> 模块只提供在 Windows 系统上才有。有一个具体的模块值得注意： <a href="https://docs.python.org/3/library/sys.html#module-sys" target="_blank" rel="noopener">sys</a> ，这个模块内置于所有的 Python 解释器。变量 <code>sys.ps1</code> 和 <code>sys.ps2</code>定义了主提示符和辅助提示符字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.ps1</span><br><span class="line"><span class="string">'&gt;&gt;&gt; '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.ps2</span><br><span class="line"><span class="string">'... '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.ps1 = <span class="string">'C&gt; '</span></span><br><span class="line">C&gt; print(<span class="string">'Yuck!'</span>)</span><br><span class="line">Yuck!</span><br><span class="line">C&gt;</span><br></pre></td></tr></table></figure><p>这两个变量只在解释器的交互模式下有意义。</p><p>变量 <code>sys.path</code> 是解释器模块搜索路径的字符串列表。它由环境变量 <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" target="_blank" rel="noopener">PYTHONPATH</a> 初始化，如果没有设定 <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" target="_blank" rel="noopener">PYTHONPATH</a> ，就由内置的默认值初始化。你可以用标准的字符串操作修改它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path.append(<span class="string">'/ufs/guido/lib/python'</span>)</span><br></pre></td></tr></table></figure><h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir() 函数"></a><a href="https://docs.python.org/3/library/functions.html#dir" target="_blank" rel="noopener"><code>dir()</code></a> 函数</h3><p>内置函数 <a href="https://docs.python.org/3/library/functions.html#dir" target="_blank" rel="noopener">dir()</a> 用于按模块名搜索模块定义，它返回一个字符串类型的存储列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo, sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(fibo)</span><br><span class="line">[<span class="string">'__name__'</span>, <span class="string">'fib'</span>, <span class="string">'fib2'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(sys)</span><br><span class="line">[<span class="string">'__displayhook__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__excepthook__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>,</span><br><span class="line"> <span class="string">'__package__'</span>, <span class="string">'__stderr__'</span>, <span class="string">'__stdin__'</span>, <span class="string">'__stdout__'</span>,</span><br><span class="line"> <span class="string">'_clear_type_cache'</span>, <span class="string">'_current_frames'</span>, <span class="string">'_debugmallocstats'</span>, <span class="string">'_getframe'</span>,</span><br><span class="line"> <span class="string">'_home'</span>, <span class="string">'_mercurial'</span>, <span class="string">'_xoptions'</span>, <span class="string">'abiflags'</span>, <span class="string">'api_version'</span>, <span class="string">'argv'</span>,</span><br><span class="line"> <span class="string">'base_exec_prefix'</span>, <span class="string">'base_prefix'</span>, <span class="string">'builtin_module_names'</span>, <span class="string">'byteorder'</span>,</span><br><span class="line"> <span class="string">'call_tracing'</span>, <span class="string">'callstats'</span>, <span class="string">'copyright'</span>, <span class="string">'displayhook'</span>,</span><br><span class="line"> <span class="string">'dont_write_bytecode'</span>, <span class="string">'exc_info'</span>, <span class="string">'excepthook'</span>, <span class="string">'exec_prefix'</span>,</span><br><span class="line"> <span class="string">'executable'</span>, <span class="string">'exit'</span>, <span class="string">'flags'</span>, <span class="string">'float_info'</span>, <span class="string">'float_repr_style'</span>,</span><br><span class="line"> <span class="string">'getcheckinterval'</span>, <span class="string">'getdefaultencoding'</span>, <span class="string">'getdlopenflags'</span>,</span><br><span class="line"> <span class="string">'getfilesystemencoding'</span>, <span class="string">'getobjects'</span>, <span class="string">'getprofile'</span>, <span class="string">'getrecursionlimit'</span>,</span><br><span class="line"> <span class="string">'getrefcount'</span>, <span class="string">'getsizeof'</span>, <span class="string">'getswitchinterval'</span>, <span class="string">'gettotalrefcount'</span>,</span><br><span class="line"> <span class="string">'gettrace'</span>, <span class="string">'hash_info'</span>, <span class="string">'hexversion'</span>, <span class="string">'implementation'</span>, <span class="string">'int_info'</span>,</span><br><span class="line"> <span class="string">'intern'</span>, <span class="string">'maxsize'</span>, <span class="string">'maxunicode'</span>, <span class="string">'meta_path'</span>, <span class="string">'modules'</span>, <span class="string">'path'</span>,</span><br><span class="line"> <span class="string">'path_hooks'</span>, <span class="string">'path_importer_cache'</span>, <span class="string">'platform'</span>, <span class="string">'prefix'</span>, <span class="string">'ps1'</span>,</span><br><span class="line"> <span class="string">'setcheckinterval'</span>, <span class="string">'setdlopenflags'</span>, <span class="string">'setprofile'</span>, <span class="string">'setrecursionlimit'</span>,</span><br><span class="line"> <span class="string">'setswitchinterval'</span>, <span class="string">'settrace'</span>, <span class="string">'stderr'</span>, <span class="string">'stdin'</span>, <span class="string">'stdout'</span>,</span><br><span class="line"> <span class="string">'thread_info'</span>, <span class="string">'version'</span>, <span class="string">'version_info'</span>, <span class="string">'warnoptions'</span>]</span><br></pre></td></tr></table></figure><p>无参数调用时，<a href="https://docs.python.org/3/library/functions.html#dir" target="_blank" rel="noopener">dir()</a> 函数返回当前定义的命名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib = fibo.fib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</span><br><span class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__name__'</span>, <span class="string">'a'</span>, <span class="string">'fib'</span>, <span class="string">'fibo'</span>, <span class="string">'sys'</span>]</span><br></pre></td></tr></table></figure><p>注意该列表列出了所有类型的名称：变量，模块，函数，等等。</p><p><a href="https://docs.python.org/3/library/functions.html#dir" target="_blank" rel="noopener">dir()</a> 不会列出内置函数和变量名。如果你想列出这些内容，它们在标准模块 <a href="https://docs.python.org/3/library/builtins.html#module-builtins" target="_blank" rel="noopener">builtins</a> 中定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> builtins</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(builtins)</span><br><span class="line">[<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>,</span><br><span class="line"> <span class="string">'BlockingIOError'</span>, <span class="string">'BrokenPipeError'</span>, <span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>,</span><br><span class="line"> <span class="string">'ChildProcessError'</span>, <span class="string">'ConnectionAbortedError'</span>, <span class="string">'ConnectionError'</span>,</span><br><span class="line"> <span class="string">'ConnectionRefusedError'</span>, <span class="string">'ConnectionResetError'</span>, <span class="string">'DeprecationWarning'</span>,</span><br><span class="line"> <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>,</span><br><span class="line"> <span class="string">'FileExistsError'</span>, <span class="string">'FileNotFoundError'</span>, <span class="string">'FloatingPointError'</span>,</span><br><span class="line"> <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>,</span><br><span class="line"> <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'InterruptedError'</span>,</span><br><span class="line"> <span class="string">'IsADirectoryError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>,</span><br><span class="line"> <span class="string">'MemoryError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotADirectoryError'</span>, <span class="string">'NotImplemented'</span>,</span><br><span class="line"> <span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>,</span><br><span class="line"> <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'PermissionError'</span>, <span class="string">'ProcessLookupError'</span>,</span><br><span class="line"> <span class="string">'ReferenceError'</span>, <span class="string">'ResourceWarning'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>,</span><br><span class="line"> <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>,</span><br><span class="line"> <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>, <span class="string">'TimeoutError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>,</span><br><span class="line"> <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>,</span><br><span class="line"> <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>,</span><br><span class="line"> <span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'_'</span>, <span class="string">'__build_class__'</span>,</span><br><span class="line"> <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'abs'</span>,</span><br><span class="line"> <span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'ascii'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>,</span><br><span class="line"> <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>,</span><br><span class="line"> <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'divmod'</span>, <span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'exit'</span>,</span><br><span class="line"> <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>,</span><br><span class="line"> <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>,</span><br><span class="line"> <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>, <span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>,</span><br><span class="line"> <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>,</span><br><span class="line"> <span class="string">'quit'</span>, <span class="string">'range'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>,</span><br><span class="line"> <span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'vars'</span>,</span><br><span class="line"> <span class="string">'zip'</span>]</span><br></pre></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包通常是使用『圆点模块名』的结构化模块命名空间。例如，名为 <code>A.B</code> 的模块表示了名为 <code>A</code> 的包中名为 <code>B</code> 的子模块。正如同用模块来保存不同的模块架构可以避免全局变量之间的相互冲突，使用圆点模块名保存像 NumPy 或 Python Imaging Library 之类的不同类库架构可以避免模块之间的命名冲突。</p><p>现在，你必须开始遵守用以组织你的程序的层次结构。变量通常位于函数内部，函数与全局变量通常位于模块内部。如果你希望组织起这些模块的话，应该怎么办？这便是包（Packages）应当登场的时刻。</p><p>包是指一个包含模块与一个特殊的 <code>__init__.py</code> 文件的文件夹，后者向 Python 表明这一文件夹是特别的，因为其包含了 Python 模块。</p><p>让我们这样设想：你想创建一个名为“world”的包，其中还包含着 “asia”、“africa”等其它子包，同时这些子包都包含了诸如“india”、 “madagascar”等模块。</p><p>假设你现在想要设计一个模块集（一个”包”）来统一处理声音文件和声音数据。存在几种不同的声音格式（通常由它们的扩展名来标识，例如：<code>.wav</code>， <code>.aiff</code>，<code>.au</code> ），于是，为了在不同类型的文件格式之间转换，你需要维护一个不断增长的包集合。可能你还想要对声音数据做很多不同的操作（例如混音，添加回声，应用平衡 功能，创建一个人造效果），所以你要加入一个无限流模块来执行这些操作。你的包可能会是这个样子（通过分级的文件体系来进行分组）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sound/                          Top-level package</span><br><span class="line">      __init__.py               Initialize the sound package</span><br><span class="line">      formats/                  Subpackage <span class="keyword">for</span> file format conversions</span><br><span class="line">              __init__.py</span><br><span class="line">              wavread.py</span><br><span class="line">              wavwrite.py</span><br><span class="line">              aiffread.py</span><br><span class="line">              aiffwrite.py</span><br><span class="line">              auread.py</span><br><span class="line">              auwrite.py</span><br><span class="line">              ...</span><br><span class="line">      effects/                  Subpackage <span class="keyword">for</span> sound effects</span><br><span class="line">              __init__.py</span><br><span class="line">              echo.py</span><br><span class="line">              surround.py</span><br><span class="line">              reverse.py</span><br><span class="line">              ...</span><br><span class="line">      filters/                  Subpackage <span class="keyword">for</span> filters</span><br><span class="line">              __init__.py</span><br><span class="line">              equalizer.py</span><br><span class="line">              vocoder.py</span><br><span class="line">              karaoke.py</span><br><span class="line">              ...</span><br></pre></td></tr></table></figure><p>当导入这个包时，Python 通过 <code>sys.path</code> 搜索路径查找包含这个包的子目录。</p><p>为了让 Python 将目录当做内容包，目录中必须包含 <code>__init__.py</code> 文件。这是为了避免一个含有烂俗名字的目录无意中隐藏了稍后在模块搜索路径中出现的有效模块，比如 string。最简单的情况下，只需要一个空的 <code>__init__.py</code> 文件即可。当然它也可以执行包的初始化代码，或者定义稍后介绍的 <code>__all__</code> 变量。</p><p>用户可以每次只导入包里的特定模块，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sound.effects.echo</span><br></pre></td></tr></table></figure><p>这样就导入了 <code>sound.effects.echo</code> 子模块。它必需通过完整的名称来引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sound.effects.echo.echofilter(input, output, delay=<span class="number">0.7</span>, atten=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>导入包时有一个可以选择的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo</span><br></pre></td></tr></table></figure><p>这样就加载了 <code>echo</code> 子模块，并且使得它在没有包前缀的情况下也可以使用，所以它可以如下方式调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo.echofilter(input, output, delay=<span class="number">0.7</span>, atten=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>还有另一种变体用于直接导入函数或变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sound.effects.echo <span class="keyword">import</span> echofilter</span><br></pre></td></tr></table></figure><p>这样就又一次加载了 <code>echo</code> 子模块，但这样就可以直接调用它的 <code>echofilter()</code> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echofilter(input, output, delay=<span class="number">0.7</span>, atten=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是使用 <code>from package import item</code> 方式导入包时，这个子项（item）既可以是包中的一个子模块（或一个子包），也可以是包中定义的其它命名，像函数、类或变量。<code>import</code> 语句首先核对是否包中有这个子项，如果没有，它假定这是一个模块，并尝试加载它。如果没有找到它，会引发一个 <a href="https://docs.python.org/3/library/exceptions.html#ImportError" target="_blank" rel="noopener">ImportError</a> 异常。</p><p>相反，使用类似 <code>import item.subitem.subsubitem</code> 这样的语法时，这些子项必须是包，最后的子项可以是包或模块，但不能是前面子项中定义的类、函数或变量。</p><h4 id="核心风格：import语句的模块顺序"><a href="#核心风格：import语句的模块顺序" class="headerlink" title="核心风格：import语句的模块顺序"></a>核心风格：import语句的模块顺序</h4><p>我们推荐所有的模块在Python模块的开头部分导入。而且最好按照这样的顺序：</p><ul><li>Python标准库模块</li><li>Python第三方模块</li><li>应用程序自定义模块</li></ul><p>然后使用一个空行分割这三类模块的导入语句。这将确保模块使用固定的习惯导入，有助于减少每个模块需要的import语句数目。其他的提示请参考“Python’s Style Guide”, PEP8。</p><p>解释器执行到这条语句，如果在搜索路径中找到了指定的模块，就会加载它。该过程遵循作用域原则，如果在一个模块的顶层导入，那么它的作用域就是全局的；如果在函数中导入，那么它的作用域是局部的。</p><p>如果模块是被第一次导入，它将被加载并执行。</p><h4 id="使用-导入包"><a href="#使用-导入包" class="headerlink" title="使用 * 导入包"></a>使用 * 导入包</h4><p>那么当用户写下 <code>from sound.effects import *</code> 时会发生什么事？理想中，总是希望在文件系统中找出包中所有的子模块，然后导入它们。这可能会花掉很长时间，并且出现期待之外的边界效应，导出了希望只能显式导入的包。</p><p>对于包的作者来说唯一的解决方案就是给提供一个明确的包索引。<a href="https://docs.python.org/3/reference/simple_stmts.html#import" target="_blank" rel="noopener">import</a> 语句按如下条件进行转换：执行 <code>from package import *</code> 时，如果包中的 <code>__init__.py</code> 代码定义了一个名为 <code>__all__</code> 的列表，就会按照列表中给出的模块名进行导入。新版本的包发布时作者可以任意更新这个列表。如果包作者不想 <code>import *</code>的时候导入他们的包中所有模块，那么也可能会决定不支持它（ <code>import *</code> ）。例如， <code>sound/effects/__init__.py</code> 这个文件可能包括如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">"echo"</span>, <span class="string">"surround"</span>, <span class="string">"reverse"</span>]</span><br></pre></td></tr></table></figure><p>这意味着 <code>from sound.effects import *</code> 语句会从 <code>sound</code> 包中导入以上三个已命名的子模块。</p><p>如果没有定义 <code>__all__</code> ， <code>from sound.effects import *</code> 语句 <em>不会</em> 从 <code>sound.effects</code> 包中导入所有的子模块。无论包中定义多少命名，只能确定的是导入了 <code>sound.effects</code> 包（可能会运行 <code>__init__.py</code> 中的初始化代码）以及包中定义的所有命名会随之导入。这样就从 <code>__init__.py</code> 中导入了每一个命名（以及明确导入的子模块）。同样也包括了前述的 <a href="https://docs.python.org/3/reference/simple_stmts.html#import" target="_blank" rel="noopener">import</a> 语句从包中明确导入的子模块，考虑以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sound.effects.echo</span><br><span class="line"><span class="keyword">import</span> sound.effects.surround</span><br><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>echo</code> 和 <code>surround</code> 模块导入了当前的命名空间，这是因为执行 <code>from...import</code> 语句时它们已经定义在 <code>sound.effects</code> 包中了（定义了 <code>__all__</code> 时也会同样工作）。</p><p>尽管某些模块设计为使用 <code>import *</code> 时它只导出符合某种规范/模式的命名，仍然不建议在生产代码中使用这种写法。</p><p>记住，<code>from Package import specific_submodule</code> 没有错误！事实上，除非导入的模块需要使用其它包中的同名子模块，否则这是推荐的写法。</p><h4 id="包内引用"><a href="#包内引用" class="headerlink" title="包内引用"></a>包内引用</h4><p>如果包中使用了子包结构（就像示例中的 <code>sound</code> 包），可以按绝对位置从相邻的包中引入子模块。例如，如果 <code>sound.filters.vocoder</code> 包需要使用 <code>sound.effects</code> 包中的 <code>echo</code> 模块，它可以 <code>from sound.Effects import echo</code>。</p><p>你可以用这样的形式 <code>from module import name</code> 来写显式的相对位置导入。那些显式相对导入用点号标明关联导入当前和上级包。以 <code>surround</code> 模块为例，你可以这样用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> echo</span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> formats</span><br><span class="line"><span class="keyword">from</span> ..filters <span class="keyword">import</span> equalizer</span><br></pre></td></tr></table></figure><p>需要注意的是显式或隐式相对位置导入都基于当前模块的命名。因为主模块的名字总是 <code>&quot;__main__&quot;</code>，Python 应用程序的主模块应该总是用绝对导入。</p><h4 id="多重目录中的包"><a href="#多重目录中的包" class="headerlink" title="多重目录中的包"></a>多重目录中的包</h4><p>包支持一个更为特殊的特性， <a href="https://docs.python.org/3/reference/import.html#__path__" target="_blank" rel="noopener"><strong>path</strong></a>。 在包的 <code>__init__.py</code> 文件代码执行之前，该变量初始化一个目录名列表。该变量可以修改，它作用于包中的子包和模块的搜索功能。</p><p>这个功能可以用于扩展包中的模块集，不过它不常用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/tutorial/modules.html" target="_blank" rel="noopener">https://docs.python.org/3/tutorial/modules.html</a></li><li><a href="https://wizardforcel.gitbooks.io/core-python-2e/content/14.html" target="_blank" rel="noopener">python核心编程</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果你从 Python 解释器退出然后再进入它，你所做的定义（函数和变量）都会消失。因此，如果你想写某些更长的程序，你最好使用一个文本编辑器来为解释器准备输入，然后以这个文件作为输入来运行程序。这也被称为创建一个 &lt;em&gt;脚本&lt;/em&gt;。当你的程序变得更长，你也许会想将它分
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>深入Python 流程控制</title>
    <link href="https://yo42.github.io/2018/09/04/%E6%B7%B1%E5%85%A5Python-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://yo42.github.io/2018/09/04/深入Python-流程控制/</id>
    <published>2018-09-04T11:54:15.449Z</published>
    <updated>2018-09-08T13:27:07.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a><a href="https://docs.python.org/3/reference/compound_stmts.html#if" target="_blank" rel="noopener"><code>if</code></a> 语句</h3><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = int(input(<span class="string">"Please enter an integer: "</span>))</span><br><span class="line">Please enter an integer: <span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>    x = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Negative changed to zero'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Zero'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Single'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'More'</span>)</span><br><span class="line">...</span><br><span class="line">More</span><br></pre></td></tr></table></figure><p>这边可以v 有 0 个或者多个 <a href="https://docs.python.org/3/reference/compound_stmts.html#elif" target="_blank" rel="noopener"><code>elif</code></a> 部分，并且 <a href="https://docs.python.org/3/reference/compound_stmts.html#else" target="_blank" rel="noopener"><code>else</code></a> 部分是可选的。关键字 <a href="https://docs.python.org/3/reference/compound_stmts.html#elif" target="_blank" rel="noopener"><code>elif</code></a> 是 ‘else if’ 的缩写，它有助于避免过度缩进。 一个 <a href="https://docs.python.org/3/reference/compound_stmts.html#if" target="_blank" rel="noopener"><code>if</code></a>… <a href="https://docs.python.org/3/reference/compound_stmts.html#elif" target="_blank" rel="noopener"><code>elif</code></a> … <a href="https://docs.python.org/3/reference/compound_stmts.html#elif" target="_blank" rel="noopener"><code>elif</code></a> … 序列可以替代其他语言中的 <code>switch</code> 或 <code>case</code> 语句。</p><h3 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a><a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 语句</h3><p>Python 中<a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 语句有点不同于 C 和 Pascal 中的 for 语句。Python 的 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 语句按照项目在序列中出现的顺序迭代任何序列（列表或字符串），而不是总是迭代数学的算术级数（如 Pascal 中），或者让用户能够定义迭代步骤和停止条件（如 C），例如（没有双关语）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 测量字符串：</span></span><br><span class="line"><span class="meta">... </span>words = [<span class="string">'cat'</span>, <span class="string">'window'</span>, <span class="string">'defenestrate'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line"><span class="meta">... </span>    print(w, len(w))</span><br><span class="line">...</span><br><span class="line">cat <span class="number">3</span></span><br><span class="line">window <span class="number">6</span></span><br><span class="line">defenestrate <span class="number">12</span></span><br></pre></td></tr></table></figure><p>如果你需要修改序列在循环内的迭代（例如复制所选项目），建议你先复制。迭代序列操作并不会隐式地复制。切片方法使这一操作特别方便：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> w <span class="keyword">in</span> words[:]:  <span class="comment"># 循环遍历整个列表的切片副本。</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> len(w) &gt; <span class="number">6</span>:</span><br><span class="line"><span class="meta">... </span>        words.insert(<span class="number">0</span>, w)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>words</span><br><span class="line">[<span class="string">'defenestrate'</span>, <span class="string">'cat'</span>, <span class="string">'window'</span>, <span class="string">'defenestrate'</span>]</span><br></pre></td></tr></table></figure><p>使用 <code>for w in words:</code>，该示例将尝试创建一个无穷列表，反复的插入 <code>defenestrate</code> 。</p><h3 id="range-函数"><a href="#range-函数" class="headerlink" title="range() 函数"></a><a href="https://docs.python.org/3/library/stdtypes.html#range" target="_blank" rel="noopener"><code>range()</code></a> 函数</h3><p>如果你需要迭代一系列的数字，内建的函数 <a href="https://docs.python.org/3/library/stdtypes.html#range" target="_blank" rel="noopener"><code>range()</code></a> 会非常有用。如，生成等差数列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>给定的停止位是不会出现在生成的序列中的； <code>range(10)</code> 生成 10 个值，是长度为 10 的序列的项的合法指数。可以让区间开始于其他的数字，或者指定不同的增量（甚至是负数；有时候这被叫做 ‘步长’）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">range(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">   <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></span><br><span class="line"></span><br><span class="line">range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>)</span><br><span class="line">   <span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span></span><br><span class="line"></span><br><span class="line">range(<span class="number">-10</span>, <span class="number">-100</span>, <span class="number">-30</span>)</span><br><span class="line">  <span class="number">-10</span>, <span class="number">-40</span>, <span class="number">-70</span></span><br></pre></td></tr></table></figure><p>要遍历一个序列的索引，你可以像下面这样组合 <a href="https://docs.python.org/3/library/stdtypes.html#range" target="_blank" rel="noopener"><code>range()</code></a> 和 <a href="https://docs.python.org/3/library/functions.html#len" target="_blank" rel="noopener"><code>len()</code></a> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">'Mary'</span>, <span class="string">'had'</span>, <span class="string">'a'</span>, <span class="string">'little'</span>, <span class="string">'lamb'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line"><span class="meta">... </span>    print(i, a[i])</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> Mary</span><br><span class="line"><span class="number">1</span> had</span><br><span class="line"><span class="number">2</span> a</span><br><span class="line"><span class="number">3</span> little</span><br><span class="line"><span class="number">4</span> lamb</span><br></pre></td></tr></table></figure><p>然而，在大多数情况下，使用 <a href="https://docs.python.org/3/library/functions.html#enumerate" target="_blank" rel="noopener"><code>enumerate()</code></a> 函数更方便，可以看 <a href="https://docs.python.org/3/tutorial/datastructures.html#tut-loopidioms" target="_blank" rel="noopener">循环技术</a>.</p><p>如果你直接打印一个区间的话，会发生奇怪的事情：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(range(<span class="number">10</span>))</span><br><span class="line">range(<span class="number">0</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>在很多方面， <a href="https://docs.python.org/3/library/stdtypes.html#range" target="_blank" rel="noopener"><code>range()</code></a> 返回的对象的行为像列表，但实际上它不是。它是一个对象，当你迭代它的时候，会连续的返回整个序列的项目，但不会真的创建列表，从而节省空间。</p><p>我们称这样的对象为 <em>可迭代的</em> ，也就是说，它很适合于当作函数或者构造函数的目标，它们期望从这里可以获得连续的项目直到耗尽。我们已经看到 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 语句是一个 <em>迭代器</em> 。<a href="https://docs.python.org/3/library/stdtypes.html#list" target="_blank" rel="noopener"><code>list()</code></a> 函数是另一个；它可从可迭代对象中创建列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>稍后，我们会看到更多返回可迭代对象和将可迭代对象当作参数的函数。</p><h3 id="break-和-continue-语句，以及循环上的-else-子句"><a href="#break-和-continue-语句，以及循环上的-else-子句" class="headerlink" title="break 和 continue 语句，以及循环上的 else 子句"></a><a href="https://docs.python.org/3/reference/simple_stmts.html#break" target="_blank" rel="noopener"><code>break</code></a> 和 <a href="https://docs.python.org/3/reference/simple_stmts.html#continue" target="_blank" rel="noopener"><code>continue</code></a> 语句，以及循环上的 <a href="https://docs.python.org/3/reference/compound_stmts.html#else" target="_blank" rel="noopener"><code>else</code></a> 子句</h3><p><a href="https://docs.python.org/3/reference/simple_stmts.html#break" target="_blank" rel="noopener"><code>break</code></a> 语句，类似于 C ，会打破 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 或 <a href="https://docs.python.org/3/reference/compound_stmts.html#while" target="_blank" rel="noopener"><code>while</code></a> 循环的最内层。</p><p>循环语句可能有 <code>else</code> 子句；它会在列表耗尽（用  <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> ）从而终止循环或者条件为假（用  <a href="https://docs.python.org/3/reference/compound_stmts.html#while" target="_blank" rel="noopener"><code>while</code></a> ）的时候被执行，而不是循环被 <a href="https://docs.python.org/3/reference/simple_stmts.html#break" target="_blank" rel="noopener"><code>break</code></a> 语句终止的时候；这被下面的这个查找素数的循环例证了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            print(n, <span class="string">'equals'</span>, x, <span class="string">'*'</span>, n//x)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="comment"># 没有找到一个因数导致的循环失败</span></span><br><span class="line"><span class="meta">... </span>        print(n, <span class="string">'is a prime number'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="number">2</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">3</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">4</span> equals <span class="number">2</span> * <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">6</span> equals <span class="number">2</span> * <span class="number">3</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">8</span> equals <span class="number">2</span> * <span class="number">4</span></span><br><span class="line"><span class="number">9</span> equals <span class="number">3</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure><p>（是的，这是正确的代码。密切关注： <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 循环的 <code>else</code> 子句，<strong>不是</strong> <a href="https://docs.python.org/3/reference/compound_stmts.html#if" target="_blank" rel="noopener"><code>if</code></a> 语句。）</p><p>当在循环使中使用 <code>else</code> 子句时，与其说很类似于<a href="https://docs.python.org/3/reference/compound_stmts.html#if" target="_blank" rel="noopener"><code>if</code></a> 语句，不如说更类似于 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句中的 <code>else</code> 子句：一个 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句的 <code>else</code> 子句会在没有异常发生的时候执行，而一个循环的 <code>else</code> 子句会在没有 <code>break</code> 发生的时候执行。要了解更多 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句和异常，请看 <a href="https://docs.python.org/3/tutorial/errors.html#tut-handling" target="_blank" rel="noopener">异常处理</a>.</p><p><a href="https://docs.python.org/3/reference/simple_stmts.html#continue" target="_blank" rel="noopener"><code>continue</code></a> 语句，也是从 C 借来的，用于继续循环的下一次迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"Found an even number"</span>, num)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"Found a number"</span>, num)</span><br><span class="line">Found an even number <span class="number">2</span></span><br><span class="line">Found a number <span class="number">3</span></span><br><span class="line">Found an even number <span class="number">4</span></span><br><span class="line">Found a number <span class="number">5</span></span><br><span class="line">Found an even number <span class="number">6</span></span><br><span class="line">Found a number <span class="number">7</span></span><br><span class="line">Found an even number <span class="number">8</span></span><br><span class="line">Found a number <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a><a href="https://docs.python.org/3/reference/simple_stmts.html#pass" target="_blank" rel="noopener"><code>pass</code></a> 语句</h3><p><a href="https://docs.python.org/3/reference/simple_stmts.html#pass" target="_blank" rel="noopener"><code>pass</code></a> 语句什么也不做。它可以用于语法上需要，但程序不需要做什么的时候。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span>  <span class="comment"># 等待键盘中断（Ctrl+C）</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通常也用于创建小类的时候：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyEmptyClass</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其他地方， <a href="https://docs.python.org/3/reference/simple_stmts.html#pass" target="_blank" rel="noopener"><code>pass</code></a> 可以在你处理新代码的时候，用作函数或者条件体的占位符，从而让你继续思考更抽象层级的事情。 <a href="https://docs.python.org/3/reference/simple_stmts.html#pass" target="_blank" rel="noopener"><code>pass</code></a> 被默默地忽略了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">initlog</span><span class="params">(*args)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span>   <span class="comment"># 记住实现它！</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>我们可以创建一个能打印出任意项的斐波那契数列的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span>    <span class="comment"># 将斐波那契数列打印到第 n 项</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""将斐波那契数列打印到第 n 项"""</span></span><br><span class="line"><span class="meta">... </span>    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> a &lt; n:</span><br><span class="line"><span class="meta">... </span>        print(a, end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span>        a, b = b, a+b</span><br><span class="line"><span class="meta">... </span>    print()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 调用上面定义的函数</span></span><br><span class="line"><span class="meta">... </span>fib(<span class="number">2000</span>)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span> <span class="number">610</span> <span class="number">987</span> <span class="number">1597</span></span><br></pre></td></tr></table></figure><p>关键字 <a href="https://docs.python.org/3/reference/compound_stmts.html#def" target="_blank" rel="noopener"><code>def</code></a> 引入了一个函数 <em>定义</em> 。其后面必须跟随有函数的名称以及用括号包起来的一系列参数。构成函数体的语句从下一行开始，并且必须缩进。</p><p>函数体的第一个语句可以是一个字符串常量，这个字符串常量就是这个函数的文档字符串，或者说是 <code>docstring</code>。（更多关于文档字符串的内容可参考章节 <a href="https://docs.python.org/3/tutorial/controlflow.html#tut-docstrings" target="_blank" rel="noopener">Documentation Strings</a> 。）有很多工具可以用于在线或者可打印文档的自动化生成，或者可以让用户交互地在代码中浏览文档；在代码中写文档字符串是比较好的实践，所以请养成写文档字符串的习惯。</p><p>函数的 <em>执行</em> 引入了一个新的符号表用于存储函数的局部变量。更准确地说，在函数内的所有变量赋值都会被存储到这张局部符号表中；所以在查找一个变量的引用时，会先查找局部符号表，然后查找闭包函数的局部符号表，接着是全局符号表，最后才是内置名称表。因此，尽管可能在函数中引用全局变量，但在函数中无法对全局变量直接进行赋值（除非用 <a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener"><code>global</code></a> 语句来定义一个变量）</p><p>当一个函数被调用时，函数参数被引入到局部符号表中；因此，参数是通过 <em>按值传递</em> 的方式来传递的（这个值表示一个对象的 <em>引用</em> ，而不是该对象的值）。<a href="https://docs.python.org/3/tutorial/controlflow.html#id2" target="_blank" rel="noopener">[1]</a> 当在一个函数中调用另外一个函数时，将会为这次调用创建一个新的局部符号表。</p><p>一个函数定义将会在当前符号表中引入函数的名称。这个函数的名称对应的值的类型会被解释器解释为用户定义的函数。这个值可以被赋值给另外一个名称，并且将这名称可以当作一个函数来使用。这是一种常用的重命名机制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib</span><br><span class="line">&lt;function fib at <span class="number">10042</span>ed0&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = fib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">100</span>)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span></span><br></pre></td></tr></table></figure><p>如果你学习了别的编程语言，你可能认为 <code>fib</code> 不是一个函数而是一个过程，因为它没有返回值。事实上，一个不包含 <a href="https://docs.python.org/3/reference/simple_stmts.html#return" target="_blank" rel="noopener"><code>return</code></a> 语句的函数也是会返回一个值的。这个值是 <code>None</code> （这是一个内置名称）。 一般来说解释器不会打印出单独的返回值 <code>None</code> ，如果你真的想打印出 <code>None</code> ，你可以使用 <a href="https://docs.python.org/3/library/functions.html#print" target="_blank" rel="noopener"><code>print()</code></a> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(fib(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>写一个返回包含斐波那契数列的列表的函数比写一个打印斐波那契数列的函数要简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span>  <span class="comment"># 返回斐波那契数列的前 n 项</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""返回包含斐波那契数列前 n 项的列表的函数"""</span></span><br><span class="line"><span class="meta">... </span>    result = []</span><br><span class="line"><span class="meta">... </span>    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> a &lt; n:</span><br><span class="line"><span class="meta">... </span>        result.append(a)    <span class="comment"># 看上面的解释</span></span><br><span class="line"><span class="meta">... </span>        a, b = b, a+b</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> result</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f100 = fib2(<span class="number">100</span>)    <span class="comment"># 调用函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f100                      <span class="comment"># 输出结果</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br></pre></td></tr></table></figure><p>这个例子和之前一样阐述了一些 Python 的新特性：</p><ul><li>函数通过 <a href="https://docs.python.org/3/reference/simple_stmts.html#return" target="_blank" rel="noopener"><code>return</code></a>  语句来返回结果值。不包含参数表达式的 <a href="https://docs.python.org/3/reference/simple_stmts.html#return" target="_blank" rel="noopener"><code>return</code></a>  语句返回表示函数返回 <code>None</code>。函数执行到末端的时候也返回 <code>None</code></li><li><code>result.append(a)</code> 语句调用了列表 <code>result</code> 的 <em>方法</em>。方法是 “属于” 一个对象的函数，被命名为 <code>obj.methodname</code>, <code>obj</code> 表示这个对象（也可以是一个表达式），<code>methodname</code> 表示该对象类型定义中方法的名字。不同的类型定义了不同的方法。不同类型的方法的名字可以是相同的且不会产生歧义。（你可以使用 <em>classes</em> 来定一个你自己的对象类型和方法，参见 <a href="https://docs.python.org/3/tutorial/classes.html#tut-classes" target="_blank" rel="noopener">Classes</a>）例子中的 <code>append()</code> 方法是列表对象定义的。它添加了一个新的元素到列表的末端，相当于 <code>result =result + [a]</code>，但是更高效。</li></ul><h3 id="更多关于定义函数的内容"><a href="#更多关于定义函数的内容" class="headerlink" title="更多关于定义函数的内容"></a>更多关于定义函数的内容</h3><p>也可以使用可变数量的参数定义函数。 一共有三种方式，并且它们可以组合使用。</p><h4 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h4><p>最常用的形式是为一个或多个参数指定默认值。这样，函数可以以少于其定义的参数被调用。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ask_ok</span><span class="params">(prompt, retries=<span class="number">4</span>, reminder=<span class="string">'Please try again!'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        ok = input(prompt)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">'y'</span>, <span class="string">'ye'</span>, <span class="string">'yes'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">'n'</span>, <span class="string">'no'</span>, <span class="string">'nop'</span>, <span class="string">'nope'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        retries = retries - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> retries &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid user response'</span>)</span><br><span class="line">        print(reminder)</span><br></pre></td></tr></table></figure><p>该函数可以有几种不同的调用方式：</p><ul><li>只指定强制的参数<br>参数: <code>ask_ok(&#39;Do you really want to quit?&#39;)</code></li><li>提供一个可选参数<br>参数: <code>ask_ok(&#39;OK to overwrite the file?&#39;, 2)</code></li><li>或者给定全部的参数<br>参数: <code>ask_ok(&#39;OK to overwrite the file?&#39;, 2, &#39;Come on, onlyyes or no!&#39;)</code></li></ul><p>上述例子顺便也提及了 <a href="https://docs.python.org/3/reference/expressions.html#in" target="_blank" rel="noopener"><code>in</code></a> 关键字。它是用来测试某个特定值是否在一个序列中。</p><p>默认值是在定义函数时的“定义过程中” （<em>defining</em> ）的范围内评估的， 所以，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(arg=i)</span>:</span></span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line">i = <span class="number">6</span></span><br><span class="line">f()</span><br></pre></td></tr></table></figure><p>会打印 <code>5</code>.</p><p><strong>重要提示：</strong> 默认值只被评估一次。 这个特性会导致当默认值是列表，字典，或者大多数类的实例时，默认值会是一个可变对象。比如，以下函数会累积在一系列的调用过程中所提供的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, L=[])</span>:</span></span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line">print(f(<span class="number">1</span>))</span><br><span class="line">print(f(<span class="number">2</span>))</span><br><span class="line">print(f(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>会打印出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>你可以把上面的函数写成以下的形式，以避免默认值被不同的函数调用所共享：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, L=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>函数 <a href="https://docs.python.org/3/glossary.html#term-keyword-argument" target="_blank" rel="noopener">关键字参数</a> 同样可以使用 <code>kwarg=value</code> 的形式。例如，以下函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parrot</span><span class="params">(voltage, state=<span class="string">'a stiff'</span>, action=<span class="string">'voom'</span>, type=<span class="string">'Norwegian Blue'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"-- This parrot wouldn't"</span>, action, end=<span class="string">' '</span>)</span><br><span class="line">    print(<span class="string">"if you put"</span>, voltage, <span class="string">"volts through it."</span>)</span><br><span class="line">    print(<span class="string">"-- Lovely plumage, the"</span>, type)</span><br><span class="line">    print(<span class="string">"-- It's"</span>, state, <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>接收一个必选参数 （<code>voltage</code> ） 和三个可选参数（ <code>state</code>，<code>action</code>， 和 <code>type</code> ）。这个函数下方式调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parrot(<span class="number">1000</span>)                                          <span class="comment"># 一个位置参数</span></span><br><span class="line">parrot(voltage=<span class="number">1000</span>)                                  <span class="comment"># 一个关键字参数</span></span><br><span class="line">parrot(voltage=<span class="number">1000000</span>, action=<span class="string">'VOOOOOM'</span>)             <span class="comment"># 2个关键字参数</span></span><br><span class="line">parrot(action=<span class="string">'VOOOOOM'</span>, voltage=<span class="number">1000000</span>)             <span class="comment"># 2个关键字参数</span></span><br><span class="line">parrot(<span class="string">'a million'</span>, <span class="string">'bereft of life'</span>, <span class="string">'jump'</span>)         <span class="comment"># 3个位置参数</span></span><br><span class="line">parrot(<span class="string">'a thousand'</span>, state=<span class="string">'pushing up the daisies'</span>)  <span class="comment"># 一个位置参数，一个关键字参数</span></span><br></pre></td></tr></table></figure><p>但是下列的所有调用方式是无效的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parrot()                     <span class="comment"># 必选参数缺失</span></span><br><span class="line">parrot(voltage=<span class="number">5.0</span>, <span class="string">'dead'</span>)  <span class="comment"># 非关键字参数在关键字参数后面</span></span><br><span class="line">parrot(<span class="number">110</span>, voltage=<span class="number">220</span>)     <span class="comment"># 同一参数重复赋值</span></span><br><span class="line">parrot(actor=<span class="string">'John Cleese'</span>)  <span class="comment"># 未知关键字参数</span></span><br></pre></td></tr></table></figure><p>在函数调用中，关键字参数必须遵循参数位置。传递的所有关键字参数必须跟函数接受的其中一个参数匹配。（例如： <code>actor</code> 在函数 <code>parrot</code> 中不是一个有效的参数），并且它们的顺序并不重要。这同样也包括那些非必选参数 （例如 <code>parrot(voltage=1000)</code> 同样有效）。没有参数可能多次获取一个值。下例就是因此而失败的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>function(<span class="number">0</span>, a=<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: function() got multiple values <span class="keyword">for</span> keyword argument <span class="string">'a'</span></span><br></pre></td></tr></table></figure><p>当最后存在 <code>**name</code> 形式的参数时，它最后会接收一个字典, (参见 <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" target="_blank" rel="noopener">Mapping Types — dict</a>) 包含所有除了和形式参数相对应的关键字参数。这可以与 <code>* name</code> 形式的形式参数（在下一小节中描述）结合，该参数接收包含正式参数列表之外的位置参数的元组。 (<code>*name</code> 必须出现在 <code>**name</code> 之前。) 例如，我们如果定义一个如下函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheeseshop</span><span class="params">(kind, *arguments, **keywords)</span>:</span></span><br><span class="line">    print(<span class="string">"-- Do you have any"</span>, kind, <span class="string">"?"</span>)</span><br><span class="line">    print(<span class="string">"-- I'm sorry, we're all out of"</span>, kind)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> arguments:</span><br><span class="line">        print(arg)</span><br><span class="line">    print(<span class="string">"-"</span> * <span class="number">40</span>)</span><br><span class="line">    <span class="keyword">for</span> kw <span class="keyword">in</span> keywords:</span><br><span class="line">        print(kw, <span class="string">":"</span>, keywords[kw])</span><br></pre></td></tr></table></figure><p>它可以像这样调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cheeseshop(<span class="string">"Limburger"</span>, <span class="string">"It's very runny, sir."</span>,</span><br><span class="line">           <span class="string">"It's really very, VERY runny, sir."</span>,</span><br><span class="line">           shopkeeper=<span class="string">"Michael Palin"</span>,</span><br><span class="line">           client=<span class="string">"John Cleese"</span>,</span><br><span class="line">           sketch=<span class="string">"Cheese Shop Sketch"</span>)</span><br></pre></td></tr></table></figure><p>最终它会打印如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- Do you have any Limburger ?</span><br><span class="line">-- I<span class="string">'m sorry, we'</span>re all out of Limburger</span><br><span class="line">It<span class="string">'s very runny, sir.</span></span><br><span class="line"><span class="string">It'</span>s really very, VERY runny, sir.</span><br><span class="line">----------------------------------------</span><br><span class="line">shopkeeper : Michael Palin</span><br><span class="line">client : John Cleese</span><br><span class="line">sketch : Cheese Shop Sketch</span><br></pre></td></tr></table></figure><p>请注意，保证打印函数关键字参数的顺序，和函数中调用中提供它们的顺序相一致。</p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>最后，最不常用的指定参数的选项是可变数量的参数。这些参数将被组装成一个元组(参见  <a href="https://docs.python.org/3/tutorial/datastructures.html#tut-tuples" target="_blank" rel="noopener">元组和序列</a>) 。在可变参数之前，可能会出现零个或多个正常参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_multiple_items</span><span class="params">(file, separator, *args)</span>:</span></span><br><span class="line">    file.write(separator.join(args))</span><br></pre></td></tr></table></figure><p>通常，这些可变参数将在形式参数列表中排在最后，因为它们会对传递给函数的所有剩余输入参数进行辨识。 在 <code>* args</code> 参数之后出现的任何参数都是关键字参数，这意味着它们只能用作关键字参数而不是位置参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">concat</span><span class="params">(*args, sep=<span class="string">"/"</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> sep.join(args)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>concat(<span class="string">"earth"</span>, <span class="string">"mars"</span>, <span class="string">"venus"</span>)</span><br><span class="line"><span class="string">'earth/mars/venus'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>concat(<span class="string">"earth"</span>, <span class="string">"mars"</span>, <span class="string">"venus"</span>, sep=<span class="string">"."</span>)</span><br><span class="line"><span class="string">'earth.mars.venus'</span></span><br></pre></td></tr></table></figure><h4 id="分离参数列表"><a href="#分离参数列表" class="headerlink" title="分离参数列表"></a>分离参数列表</h4><p>当输入的参数已经是列表或元组形式而为了调用其中单独的位置参数时，将会出现与上面相反的情况。例如内置函数 <a href="https://docs.python.org/3/library/stdtypes.html#range" target="_blank" rel="noopener"><code>range()</code></a> 需要有独立的 <em>start</em> 和 <em>stop</em> 参数。如果输入的时候不是独立的参数，则需要用 <code>*</code> 操作符来将参数从列表或者元组里面提取出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">3</span>, <span class="number">6</span>))            <span class="comment"># 正常利用参数调用函数</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = [<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(*args))            <span class="comment"># 从列表中提取参数来调用函数</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>以同样的方式，可以用 <code>**</code> 操作符来将关键字参数从字典中提取出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">parrot</span><span class="params">(voltage, state=<span class="string">'a stiff'</span>, action=<span class="string">'voom'</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"-- This parrot wouldn't"</span>, action, end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"if you put"</span>, voltage, <span class="string">"volts through it."</span>, end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"E's"</span>, state, <span class="string">"!"</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">"voltage"</span>: <span class="string">"four million"</span>, <span class="string">"state"</span>: <span class="string">"bleedin' demised"</span>, <span class="string">"action"</span>: <span class="string">"VOOM"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parrot(**d)</span><br><span class="line">-- This parrot wouldn<span class="string">'t VOOM if you put four million volts through it. E'</span>s bleedin<span class="string">' demised !</span></span><br></pre></td></tr></table></figure><h4 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h4><p>我们可以使用<a href="https://docs.python.org/3/reference/expressions.html#lambda" target="_blank" rel="noopener"><code>lambda</code></a>关键字来创建小型匿名函数。此函数会返回其两个参数的和：<code>lambda a，b：a + b</code>。可以在任何需要函数对象的场合使用 Lambda 函数。它们在语法上仅限于单个表达式。从语义上讲，它们只是普通函数定义的语法糖。与嵌套函数定义类似，lambda 函数可以从包含它的上下文中引用变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_incrementor</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = make_incrementor(<span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">0</span>)</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>)</span><br><span class="line"><span class="number">43</span></span><br></pre></td></tr></table></figure><p>上面的例子使用 lambda 表达式返回了一个函数。另一个用途是传递一个小函数作为参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs = [(<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">2</span>, <span class="string">'two'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">4</span>, <span class="string">'four'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs.sort(key=<span class="keyword">lambda</span> pair: pair[<span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs</span><br><span class="line">[(<span class="number">4</span>, <span class="string">'four'</span>), (<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">2</span>, <span class="string">'two'</span>)]</span><br></pre></td></tr></table></figure><h4 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h4><p>对于文档字符串的内容和格式，是有一定的约定的。</p><p>第一行应该始终是一个对对象目的的精简的总结。为简洁起见，它不该显式地声明对象的名称或类型，因为它们可以通过其他方式获得（除非函数名恰好是描述函数作用的动词）。这一行应该以大写字母开头并以句号结尾。</p><p>如果文档字符串不止一行，则第二行应为空白，从而能在视觉上将总结与其余的描述分开。接下来的几行应该是一个或多个段落，负责描述对象的调用约定以及其副作用等。</p><p>在 Python 中，Python 解析器并不会删除多行字符串文字的缩进，因此处理文档的工具必须在有必要之时删除缩进。这点是使用以下的约定完成的。在第一行<em>之后</em>的首个非空行决定了整个文档字符串的缩进数。（我们不能用第一行来决定，因为它通常与字符串开头的引号相邻，因此它的缩进在字符串中并不明显。）之后，我们把「等同于」这段缩进的空格从字符串的所有行的开头全部去除。不应出现少缩进的行，但如果出现了就把它们前面的空格全部去除。展开制表符后我们应当测试空格的等效性（通常为8个空格）。</p><p>以下是个多行文档字符串的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""只要写文档，其他啥都别做。</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    确实，它也啥都不做。</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    """</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(my_function.__doc__)</span><br><span class="line">只要写文档，其他啥都别做。</span><br><span class="line"></span><br><span class="line">    确实，它也啥都不做。</span><br></pre></td></tr></table></figure><h4 id="函数注解"><a href="#函数注解" class="headerlink" title="函数注解"></a>函数注解</h4><p><a href="https://docs.python.org/3/reference/compound_stmts.html#function" target="_blank" rel="noopener">函数注解 (Function annotations)</a>应用于用户自定义的函数，可使用的类型是完全可选的元数据 (参考 <a href="https://www.python.org/dev/peps/pep-3107" target="_blank" rel="noopener"><strong>PEP 3107</strong></a>和 <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener"><strong>PEP 484</strong></a> 获取更多信息)。</p><p>注解（Annotations）是以字典的形式存放在函数的  <code>__annotations__</code>  属性中，并且不对函数有任何影响。参数注解 (Parameter annotations) 是由参数名称后面加上冒号来定义的，后面紧跟一个描述，来表示注解的值。 返回注解 (Return annotations) 的定义方式是：由 <code>-&gt;</code> 符号开始，在参数列表和表示函数<a href="https://docs.python.org/3/reference/compound_stmts.html#def" target="_blank" rel="noopener"><code>def</code></a>结束的冒号之间，加上你的描述。 接下来的例子，表示了位置参数、关键字参数和返回值的注解方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(ham: str, eggs: str = <span class="string">'eggs'</span>)</span> -&gt; str:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"Annotations:"</span>, f.__annotations__)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"Arguments:"</span>, ham, eggs)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> ham + <span class="string">' and '</span> + eggs</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="string">'spam'</span>)</span><br><span class="line">Annotations: &#123;'ham': &lt;class 'str'&gt;, 'return': &lt;class 'str'&gt;, 'eggs': &lt;class 'str'&gt;&#125;</span><br><span class="line">Arguments: spam eggs</span><br><span class="line"><span class="string">'spam and eggs'</span></span><br></pre></td></tr></table></figure><h4 id="插曲-代码风格"><a href="#插曲-代码风格" class="headerlink" title="插曲: 代码风格"></a>插曲: 代码风格</h4><p>现在你能够写更长更复杂的 Python 代码了。 是时候可以谈谈<em>代码风格</em>了。大多数编程语言可以使用不同的代码风格编写（就是<em>格式化</em>）； 有的可读性比其他的强。使用一种不错的代码风格可以帮助别人更好的阅读你的代码。</p><p> <a href="https://www.python.org/dev/peps/pep-0008" target="_blank" rel="noopener"><strong>PEP 8</strong></a> 是大多数 Python 项目使用的代码风格指南。它提供了高可读性和养眼的代码风格。每一个 Python 开发者都应该阅读它，这里列出了其中的一些重点：</p><ul><li><p>缩减使用四个空格而不是制表符</p><p>四个空格缩进比更少空格（运行跟多的嵌套深度）或者更多空格（更容易阅读）的缩进要好。 制表符会带来歧义，所以最好不要用它</p></li><li><p>每行不好超过79个字符</p><p>这可以帮助显示器较小的用户与帮助显示器较大的用户同屏显示多个文件。</p></li><li><p>使用空行分隔函数、类或者函数内较大的代码段。</p></li><li><p>尽量讲注释和代码放在一起。</p></li><li><p>用 docstrings。</p></li><li><p>用在操作符前后和逗号之后加空格，但是括号之内不需要： <code>a= f(1, 2) + g(3, 4)</code>.</p></li><li><p>一致性的命名你的类与函数；惯例是用 <code>CamelCase</code> 命名类 ，用 <code>lower_case_with_underscores</code> 命名函数和方法。必须使用 <code>self</code> 作为方法的第一个参数（想了解更多请阅读 <a href="https://docs.python.org/3/tutorial/classes.html#tut-firstclasses" target="_blank" rel="noopener">A First Look at Classes</a>）。</p></li><li><p>如果你的代码将用于国际化的环境中，请不要使用任何花哨的编码。 Python 默认使用 UTF-8，甚至纯 ASCII 在任何情况下都能最好地工作。</p></li><li><p>即使说其他语言的人阅读或者维护你的代码的几率很小，也不要使用非 ASCII 字符。</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/tutorial/controlflow.html" target="_blank" rel="noopener">https://docs.python.org/3/tutorial/controlflow.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;if-语句&quot;&gt;&lt;a href=&quot;#if-语句&quot; class=&quot;headerlink&quot; title=&quot;if 语句&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#if&quot; ta
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Python CookBook(Data Structures)</title>
    <link href="https://yo42.github.io/2018/09/02/Python-NoteBook/"/>
    <id>https://yo42.github.io/2018/09/02/Python-NoteBook/</id>
    <published>2018-09-02T12:27:45.272Z</published>
    <updated>2018-09-07T01:48:37.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Data-Structures"><a href="#Python-Data-Structures" class="headerlink" title="Python Data Structures"></a>Python Data Structures</h1><ul><li style="list-style: none"><input type="checkbox"> 数据结构:<ul><li style="list-style: none"><input type="checkbox"> 列表、字典、元组、集合。</li></ul></li></ul><p>数据结构（Data Structures）基本上人如其名——它们只是一种<em>结构</em>，能够将一些<em>数据</em>聚合在一起。换句话说，它们是用来存储一系列相关数据的集合。</p><p>Python 中有四种内置的数据结构——<em>列表（List）、元组（Tuple）、字典（Dictionary）和集合（Set）</em></p><h3 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List):"></a>列表(List):</h3><p>List 数据类型包含更多的方法，下面是 List 对象包含的所有方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.append(*x*)</span><br></pre></td></tr></table></figure><p>将一个元素添加到列表的末端。相当于 <code>a[len(a):] = [x]</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.extend(*iterable*)</span><br></pre></td></tr></table></figure><p>将一个 <code>iterable</code> 的对象中的所有元素添加到列表末端来拓展这个列表。相当于 <code>a[len(a):] =iterable</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.insert(*i*, *x*)</span><br></pre></td></tr></table></figure><p>在列表中给定的位置插入一个元素。第一个是要插入的元素的位置。所以 <code>a.insert(0, x)</code> 将元素插入列表最前面，<code>a.insert(len(a), x)</code> 相当于 <code>a.append(x)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.remove(*x*)</span><br></pre></td></tr></table></figure><p>移除列表中第一个值为 <em>x</em> 的元素。如果没有找到这样的元素，抛出 <code>ValueError</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.pop([*<span class="number">1</span>*])</span><br></pre></td></tr></table></figure><p>移除并返回列表中给定位置的元素。如果没有指定索引，<code>a.pop()</code> 移除并返回列表的最后一个元素。（<em>i</em> 外的方括号表示这个参数是可选的，而不是要求你在这个位置输入方括号。你会经常在 Python Library Reference 中看到这种标记方式）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.clear()</span><br></pre></td></tr></table></figure><p>移除列表中所有的元素。相当于 <code>del a[:]</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.index(*x*[, *start*[, *end*]])</span><br></pre></td></tr></table></figure><p>返回值为 x 的元素在列表中的索引，索引从 0 开始。如果不存在这样的元素，抛出  ValueError。</p><p>可选参数 start 和 end 被解释为切片表示法，用于将搜索范围限制在该列表的一个子序列内。返回的索引是该元素在相对于原列表的开端的位置而不是相对于 start 参数的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.count(*x*)</span><br></pre></td></tr></table></figure><p>返回列表中值为 x 的元素的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.sort(*key=<span class="keyword">None</span>*, *reverse=<span class="keyword">False</span>*)</span><br></pre></td></tr></table></figure><p>对列表中的元素进行原地排序（参数可以被用于自定义排序，参见sorted()）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.reverse()</span><br></pre></td></tr></table></figure><p>原地翻转列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.copy()</span><br></pre></td></tr></table></figure><p>返回该列表的一个浅拷贝。相当于 <code>a[:]</code>。</p><p>Go! Let‘s We Play!动手练习:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">classmate = [<span class="string">'tom'</span>,<span class="number">13</span>,<span class="string">'boy'</span>,<span class="string">'student'</span>] <span class="comment">#以一个列表形式</span></span><br><span class="line">classmate <span class="comment">#调用list</span></span><br><span class="line">使用len函数调用list元素个数</span><br><span class="line">len(classmate)</span><br><span class="line">用索引列出位置元素 注意索引是从<span class="number">0</span>开始的<span class="number">0</span>-n</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">0</span>]</span><br><span class="line"><span class="string">'Michael'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">1</span>]</span><br><span class="line"><span class="string">'Bob'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">2</span>]</span><br><span class="line"><span class="string">'Tracy'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">3</span>]</span><br><span class="line">当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界，记得最后一个元素的索引是len(classmates) - <span class="number">1</span>。</span><br><span class="line"> 如果要取最后一个元素，除了计算索引位置外，还可以用<span class="number">-1</span>做索引，直接获取最后一个元素：</span><br><span class="line">也可以把元素插入到指定的位置，比如索引号为<span class="number">1</span>的位置：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.insert(<span class="number">1</span>, <span class="string">'Jack'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Adam'</span>]</span><br><span class="line">要删除list末尾的元素，用pop()方法：默认pop删除最后一个元素，使用pop(i)数字删除指定的索引位置</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.pop()</span><br><span class="line"><span class="string">'Adam'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"></span><br><span class="line">要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">1</span>] = <span class="string">'Sarah'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits = [<span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'banana'</span>, <span class="string">'kiwi'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits.count(<span class="string">'apple'</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits.count(<span class="string">'tangerine'</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits.index(<span class="string">'banana'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits.index(<span class="string">'banana'</span>, <span class="number">4</span>)  <span class="comment"># 从索引 4 开始找 banana</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits</span><br><span class="line">[<span class="string">'banana'</span>, <span class="string">'apple'</span>, <span class="string">'kiwi'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits.append(<span class="string">'grape'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits</span><br><span class="line">[<span class="string">'banana'</span>, <span class="string">'apple'</span>, <span class="string">'kiwi'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'grape'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits</span><br><span class="line">[<span class="string">'apple'</span>, <span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'banana'</span>, <span class="string">'grape'</span>, <span class="string">'kiwi'</span>, <span class="string">'orange'</span>, <span class="string">'pear'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits.pop()</span><br><span class="line"><span class="string">'pear'</span></span><br></pre></td></tr></table></figure><h4 id="使用列表作为堆栈"><a href="#使用列表作为堆栈" class="headerlink" title="使用列表作为堆栈:"></a>使用列表作为堆栈:</h4><p>列表的方法使得可以把列表当成元素后进先出的堆栈来用。使用 <code>append()</code> 来把一个元素加到堆栈的顶部。使用不显示携带索引参数的 <code>pop()</code> 方法来把一个元素从堆栈顶部移除。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.append(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.append(<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop()</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop()</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="使用列表作为队列"><a href="#使用列表作为队列" class="headerlink" title="使用列表作为队列:"></a>使用列表作为队列:</h4><p>也可以使用列表作为队列，其中添加的第一个元素是检索的第一个元素（“先入，先出”）；然而，列表对于这一目的并不高效。虽然从列表末尾追加和弹出是高效的，但是从列表的开头开始插入或弹出就低效了（因为所有其他元素都必须移动一个位置）。</p><p>实现一个队列，使用 <a href="https://docs.python.org/3/library/collections.html#collections.deque" target="_blank" rel="noopener"><code>collections.deque</code></a> 它被设计为从两端都具有快速追加和弹出的能力。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue = deque([<span class="string">"Eric"</span>, <span class="string">"John"</span>, <span class="string">"Michael"</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="string">"Terry"</span>)           <span class="comment"># Terry 进入</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="string">"Graham"</span>)          <span class="comment"># Graham 进入</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.popleft()                 <span class="comment"># 现在弹出第一个进入的元素</span></span><br><span class="line"><span class="string">'Eric'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.popleft()                 <span class="comment"># 现在弹出第二个进入的元素</span></span><br><span class="line"><span class="string">'John'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue                           <span class="comment"># 按进入顺序维护队列</span></span><br><span class="line">deque([<span class="string">'Michael'</span>, <span class="string">'Terry'</span>, <span class="string">'Graham'</span>])</span><br></pre></td></tr></table></figure><h4 id="列表表达式-列表解析"><a href="#列表表达式-列表解析" class="headerlink" title="列表表达式/列表解析:"></a>列表表达式/列表解析:</h4><p>列表推导式（又称列表解析式）提供了一种简明扼要的方法来创建列表。<br>它的结构是在一个中括号里包含一个表达式，然后是一个<code>for</code>语句，然后是0个或多个<code>for</code>或者<code>if</code>语句。那个表达式可以是任意的，意思是你可以在列表中放入任意类型的对象。返回结果将是一个新的列表，在这个以<code>if</code>和<code>for</code>语句为上下文的表达式运行完成之后产生。</p><p>例如，我们可以通过以下方式产生一组平方数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>    squares.append(x**<span class="number">2</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><p>注意到在整个过程中，我们创建并修改了一个 <code>x</code> 变量，并且在循环完成之后依然存在。使用以下方式，我们同样可以生成这个序列，且没有额外的变量生成。</p><p>更优的写法，意思更明确，也更具可读性。等价形式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><p>列表初始化表达式由方括号 <code>[]</code> 包含，括号内以 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 语句起始，后接任意个 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 语句或 <a href="https://docs.python.org/3/reference/compound_stmts.html#if" target="_blank" rel="noopener"><code>if</code></a> 语句。其结果是产生一个新的列表，列表内的元素为其中的 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 语句或 <a href="https://docs.python.org/3/reference/compound_stmts.html#if" target="_blank" rel="noopener"><code>if</code></a> 语句的执行结果。例如，以下表达式创建了一个列表，列表内的每个元素形如 <code>(x, y)</code>，其中 <code>x</code> 和 <code>y</code> 分别来自两个列表，且 <code>x</code> 与 <code>y</code> 不相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">if</span> x != y]</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure><p>这种写法等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>combs = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> x != y:</span><br><span class="line"><span class="meta">... </span>            combs.append((x, y))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>combs</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure><p>在这两段代码中，<a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 语句和 <a href="https://docs.python.org/3/reference/compound_stmts.html#if" target="_blank" rel="noopener"><code>if</code></a> 语句的执行顺序是相同的。</p><p>如果要使生成列表中的每个元素都是一个元组，则必须给表达式加上圆括号 <code>()</code> 。</p><p>Do More Practice:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>vec = [<span class="number">-4</span>, <span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 创建一个新列表，将原列表中的每个元素乘以 2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">[<span class="number">-8</span>, <span class="number">-4</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 去除原列表中的负数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> vec <span class="keyword">if</span> x &gt;= <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 对原列表中的每个元素调用函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[abs(x) <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line">[<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 调用每个元素的成员方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>freshfruit = [<span class="string">'  banana'</span>, <span class="string">'  loganberry '</span>, <span class="string">'passion fruit  '</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[weapon.strip() <span class="keyword">for</span> weapon <span class="keyword">in</span> freshfruit]</span><br><span class="line">[<span class="string">'banana'</span>, <span class="string">'loganberry'</span>, <span class="string">'passion fruit'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 创建一个由二元组构成的列表，元素形如 (number, square)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(x, x**<span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line">[(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>), (<span class="number">4</span>, <span class="number">16</span>), (<span class="number">5</span>, <span class="number">25</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 元组必须以圆括号包含，否则将产生一个错误</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x, x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    [x, x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line">               ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 用一个含有两个 `for` 的列表初始化表达式将一个多维列表降维</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>vec = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[num <span class="keyword">for</span> elem <span class="keyword">in</span> vec <span class="keyword">for</span> num <span class="keyword">in</span> elem]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h4 id="del-语句"><a href="#del-语句" class="headerlink" title="del 语句"></a><a href="https://docs.python.org/3/reference/simple_stmts.html#del" target="_blank" rel="noopener"><code>del</code></a> 语句</h4><p>有一个方法可以根据索引而不是值从列表中删除一个元素： <a href="https://docs.python.org/3/reference/simple_stmts.html#del" target="_blank" rel="noopener"><code>del</code></a> 语句。 这和 <code>pop()</code> 方法不同，后者会返回一个值。 <a href="https://docs.python.org/3/reference/simple_stmts.html#del" target="_blank" rel="noopener"><code>del</code></a> 语句也可用于从列表中删除片段或清除整个列表 （之前我们通过将一个空列表赋值给这个片段来达到此目的）。</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/3/reference/simple_stmts.html#del" target="_blank" rel="noopener"><code>del</code></a> 也可用于删除整个变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a</span><br></pre></td></tr></table></figure><h3 id="字典-Dict"><a href="#字典-Dict" class="headerlink" title="字典(Dict):"></a>字典(Dict):</h3><p>字典是 Python 中另外一种常用的数据类型(参考 <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" target="_blank" rel="noopener">Mapping Types — dict</a>). </p><p>字典就像一本地址簿，如果你知道了他或她的姓名，你就可以在这里找到其地址或是能够联系上对方的更多详细信息，换言之，我们将<em>键值（Keys）</em>（即姓名）与<em>值（Values）</em>（即地址等详细信息）联立到一起。在这里要注意到键值必须是唯一的，正如在现实中面对两个完全同名的人你没办法找出有关他们的正确信息。</p><p>另外要注意的是你只能使用不可变的对象（如字符串）作为字典的键值，但是你可以使用可变或不可变的对象作为字典中的值。基本上这段话也可以翻译为你只能使用简单对象作为键值。</p><p>在字典中，你可以通过使用符号构成 <code>d = {key : value1 , key2 : value2}</code> 这样的形式，来成对地指定键值与值。在这里要注意到成对的键值与值之间使用冒号分隔，而每一对键值与值则使用逗号进行区分，它们全都由一对花括号括起。</p><p>字典主要的操作符就是通过键来存储对应的数据，以及根据键来取出对应的数据。也可以通过 <code>del</code> 来删除一个键值对。如果在存储数据的时候使用了字典中已有的键，则该键对应的值会被更新为当前新赋给值。如果使用字典中不存在的键来获取值，则会产生 error ，提示不存在这样的键。</p><p><code>list(d)</code> 操作会返回字典中所有键组成的列表，列表中的数据顺序按照这些键存入字典的顺序（如果想得到一个经过排序的键的列表，可以使用 <code>sorted(d)</code> ）。检查字典中是否有某个键，可以使用关键字  <a href="https://docs.python.org/3/reference/expressions.html#in" target="_blank" rel="noopener"><code>in</code></a> 。</p><p>另外需要记住，字典中的成对的键值—值配对不会以任何方式进行排序。如果你希望为它们安排一个特别的次序，只能在使用它们之前自行进行排序。</p><p>你将要使用的字典是属于 <code>dict</code> 类下的实例或对象。</p><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel = &#123;<span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel[<span class="string">'guido'</span>] = <span class="number">4127</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel</span><br><span class="line">&#123;<span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'sape'</span>: <span class="number">4139</span>, <span class="string">'guido'</span>: <span class="number">4127</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel[<span class="string">'jack'</span>]</span><br><span class="line"><span class="number">4098</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> tel[<span class="string">'sape'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel[<span class="string">'irv'</span>] = <span class="number">4127</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel</span><br><span class="line">&#123;<span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'irv'</span>: <span class="number">4127</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(tel)</span><br><span class="line">[<span class="string">'jack'</span>, <span class="string">'guido'</span>, <span class="string">'irv'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(tel)</span><br><span class="line">[<span class="string">'guido'</span>, <span class="string">'irv'</span>, <span class="string">'jack'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'guido'</span> <span class="keyword">in</span> tel</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'jack'</span> <span class="keyword">not</span> <span class="keyword">in</span> tel</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/3/library/stdtypes.html#dict" target="_blank" rel="noopener"><code>dict()</code></a> 函数会直接通过一系列的 键值对产生一个字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict([(<span class="string">'sape'</span>, <span class="number">4139</span>), (<span class="string">'guido'</span>, <span class="number">4127</span>), (<span class="string">'jack'</span>, <span class="number">4098</span>)])</span><br><span class="line">&#123;<span class="string">'sape'</span>: <span class="number">4139</span>, <span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>&#125;</span><br></pre></td></tr></table></figure><p>另外，我们可以从任意的键和值得表达式来创建字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br></pre></td></tr></table></figure><p>当键是字符串的时候，使用参数赋值的方式来指定键值对更方便：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(sape=<span class="number">4139</span>, guido=<span class="number">4127</span>, jack=<span class="number">4098</span>)</span><br><span class="line">&#123;<span class="string">'sape'</span>: <span class="number">4139</span>, <span class="string">'guido'</span>: <span class="number">4127</span>, <span class="string">'jack'</span>: <span class="number">4098</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历的技巧"><a href="#遍历的技巧" class="headerlink" title="遍历的技巧:"></a>遍历的技巧:</h4><pre><code>鉴于字典可能包含大量的数据，Python支持对字典的遍历。字典可用于以各种方式存储信息，因此有多种遍历字典的方式:可遍历字典的所有键-值对、键或值(key-value)。</code></pre><p>遍历字典时，键和对应的值可以用 <code>items()</code> 方法一次性全部得到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>knights = &#123;<span class="string">'gallahad'</span>: <span class="string">'the pure'</span>, <span class="string">'robin'</span>: <span class="string">'the brave'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> knights.items():</span><br><span class="line"><span class="meta">... </span>    print(k, v)</span><br><span class="line">...</span><br><span class="line">gallahad the pure</span><br><span class="line">robin the brave</span><br></pre></td></tr></table></figure><p>使用keys()方法可以遍历字典中的所有键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages= &#123;</span><br><span class="line"><span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line"><span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line"><span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line"><span class="string">'phil'</span>: <span class="string">'python'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">print(name.title())</span><br></pre></td></tr></table></figure><p>使用values()方法可以遍历字典中的所有值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages= &#123;</span><br><span class="line"><span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line"><span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line"><span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line"><span class="string">'phil'</span>: <span class="string">'python'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">print(name.title())</span><br></pre></td></tr></table></figure><p>这种做法提取字典中的所有值，而没有考虑是否出现重复的问题。如果数据中含大量的重复项就需要使用集合(set)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> set(favorite_languages.values()):</span><br><span class="line">print(name.title())</span><br></pre></td></tr></table></figure><p>遍历一个序列时，位置索引和对应的值可以用 <a href="https://docs.python.org/3/library/functions.html#enumerate" target="_blank" rel="noopener"><code>enumerate()</code></a> 方法一次性全部得到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate([<span class="string">'tic'</span>, <span class="string">'tac'</span>, <span class="string">'toe'</span>]):</span><br><span class="line"><span class="meta">... </span>    print(i, v)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> tic</span><br><span class="line"><span class="number">1</span> tac</span><br><span class="line"><span class="number">2</span> toe</span><br></pre></td></tr></table></figure><p>当需要同时遍历两个或多个序列时，可以使用 <a href="https://docs.python.org/3/library/functions.html#zip" target="_blank" rel="noopener"><code>zip()</code></a> 方法将他们合并在一起。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>questions = [<span class="string">'name'</span>, <span class="string">'quest'</span>, <span class="string">'favorite color'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>answers = [<span class="string">'lancelot'</span>, <span class="string">'the holy grail'</span>, <span class="string">'blue'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> q, a <span class="keyword">in</span> zip(questions, answers):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'What is your &#123;0&#125;?  It is &#123;1&#125;.'</span>.format(q, a))</span><br><span class="line">...</span><br><span class="line">What is your name?  It is lancelot.</span><br><span class="line">What is your quest?  It is the holy grail.</span><br><span class="line">What is your favorite color?  It is blue.</span><br></pre></td></tr></table></figure><p>当需要反过来遍历一个序列的时候，使用 <a href="https://docs.python.org/3/library/functions.html#reversed" target="_blank" rel="noopener"><code>reversed()</code></a> 方法来将一个正的序列倒序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)):</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>需要按顺序遍历一个序列，可以把未排序的序列传到 <a href="https://docs.python.org/3/library/functions.html#sorted" target="_blank" rel="noopener"><code>sorted()</code></a> 方法中来获得一个新的排好序的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>basket = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> f <span class="keyword">in</span> sorted(set(basket)):</span><br><span class="line"><span class="meta">... </span>    print(f)</span><br><span class="line">...</span><br><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">orange</span><br><span class="line">pear</span><br></pre></td></tr></table></figure><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h3><p>我们发现列表和字符串有许多共同点，例如可以用索引来访问，以及切割的操作。他们属于<em>序列</em>类型的公共特性。(参见 <a href="https://docs.python.org/3/library/stdtypes.html#typesseq" target="_blank" rel="noopener">序列类型 — 列表，元组，区间</a>)。Python 的日益发展，使得其他的序列类型会被逐渐地加入到语言特性中。其中就有另一种序列类型：<em>元组</em>。</p><p>列表非常适用于储存在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网站的用户列表或游戏中的角色列表至关重要。然而，有时候你需要创建一系列不可修改的元素，元组可以满足这种需求。python将不能修改的值称为不可变的，而不可变的列表称为元组。元组通常用于保证某一语句或某一用户定义的函数可以安全地采用一组数值，意即元组内的数值不会改变。</p><p>元组由一系列被逗号分隔开的值组成，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">'hello!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">0</span>]</span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">'hello!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 元组也可以嵌套：</span></span><br><span class="line"><span class="meta">... </span>u = t, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u</span><br><span class="line">((<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">'hello!'</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 元组不可被修改：</span></span><br><span class="line"><span class="meta">... </span>t[<span class="number">0</span>] = <span class="number">88888</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 但是可以包含可以被修改的对象：</span></span><br><span class="line"><span class="meta">... </span>v = ([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v</span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>元组在输出时总是带有两侧的括号，这样一来，嵌套的元组可以被清楚地区分开；但是在输入时，并不一定要带上两侧的括号，尽管有时带上括号非常有必要（例如元组作为一个很长的表达式的一部分）。不能对元组中的项进行赋值，但在创建元组时，可以传入可修改的对象，例如列表。</p><p>虽然元组看起来和列表很像，但它们的使用场合和使用目的往往不同。元组是 <a href="https://docs.python.org/3/glossary.html#term-immutable" target="_blank" rel="noopener">不可修改</a>的, 并且经常包含着不同类型的元素，总是通过解包（本章的后面会介绍）或索引（<a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" target="_blank" rel="noopener"><code>命名元组</code></a>可以通过属性索引的方式）来访问。而列表是 <a href="https://docs.python.org/3/glossary.html#term-mutable" target="_blank" rel="noopener">可修改</a>的，并且往往包含着同样类型的元素，通过遍历的方式来进行访问。</p><p>一个特别的问题是如何创建一个空的或只有一个元素的元组：语法上有一些小窍门。空的元组可以用一对空的括号来创建；只有一个元素的元组可以用一个后面跟着逗号的值来创建（只在括号里放一个元素可不行）。这些方法虽然有点丑陋，但挺好用的。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>singleton = <span class="string">'hello'</span>,    <span class="comment"># &lt;-- 注意后面的逗号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(empty)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(singleton)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>singleton</span><br><span class="line">(<span class="string">'hello'</span>,)</span><br></pre></td></tr></table></figure><p>语句 <code>t = 12345, 54321, &#39;hello!&#39;</code>是一个 <em>元组解包</em>的例子：元素 <code>12345</code>， <code>54321</code> 和 <code>&#39;hello!&#39;</code> 一起组成了一个元组。下面这样的操作也同样可以做到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = t</span><br></pre></td></tr></table></figure><p>这被称为 <em>序列解包</em> ，所有右值的序列都可以使用这种语法。序列解包要求在等号的左边有着和序列内元素数量相同的变量。到这里也许你也发现了，多重赋值就是利用元组和序列解包来实现的。</p><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h3><p>Python 内建<em>集合</em>的数据类型。一个集合是由多个无重复元素构成的无序整体。集合支持的基本功能包括成员检查以及重复元素的去除。集合同时支持求并集、交集、差集以及对称差集等操作。</p><p>集合可以通过大括号符号或者调用 <a href="https://docs.python.org/3/library/stdtypes.html#set" target="_blank" rel="noopener"><code>set()</code></a> 函数创建。注意：如果需要创建一个空的集合实例，需使用 <code>set()</code>而非 <code>{}</code> ，因为后者会创建一个空的字典实例。我们将在下一个章节介绍字典类型。</p><p>下面我们来看一个简单的示范代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>basket = &#123;<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(basket)                      <span class="comment"># 可以看到重复的元素被去除</span></span><br><span class="line">&#123;<span class="string">'orange'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'orange'</span> <span class="keyword">in</span> basket                 <span class="comment"># 快速成员检查</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'crabgrass'</span> <span class="keyword">in</span> basket</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 由两个单词中独特的字母构成的集合进行的集合间操作</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                  <span class="comment"># a 集合中独特的字母</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b                              <span class="comment"># 在 a 中但是不在 b 中的字母</span></span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b                              <span class="comment"># 在 a 中或在 b 中的字母</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b                              <span class="comment"># a 和 b 共有的字母</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b                              <span class="comment"># 在 a 中或在 b 中但两者不共有的字母</span></span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br></pre></td></tr></table></figure><p>Python支持类似于 <a href="https://docs.python.org/3/tutorial/datastructures.html#tut-listcomps" target="_blank" rel="noopener">递推式构造列表</a> 的递推式构造集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'abracadabra'</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'abc'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="判断条件进阶"><a href="#判断条件进阶" class="headerlink" title="判断条件进阶"></a>判断条件进阶</h3><p>被用在 <code>while</code> 和 <code>if</code> 语句中的判断条件不仅仅可以包含比较运算，还可以包含任何的运算符。</p><p>比较运算符 <code>in</code> 和 <code>not in</code> 能够检查某个值是否在一个序列里出现（或不出现）。比较运算符 <code>is</code> 和 <code>is not</code> 比较两个对象是否是同一个对象；这只会影响如列表之类可修改的对象。所有的比较运算符的优先级都相同，比所有的算术运算法的优先级都要低。</p><p>比较运算符可以采用连写的方式。例如， <code>a &lt; b == c</code> 用来检查是否 <code>a</code> 小于 <code>b</code> 并且 <code>b</code> 等于 <code>c</code> 。</p><p>比较运算符可以用布尔运算符 <code>and</code> 和 <code>or</code> 进行组合，然后他们的结果（或者任何其他的布尔表达式）可以被 <code>not</code> 否定。这些布尔运算符的优先级又比比较运算符更低；而在他们之间， <code>not</code> 的优先级最高，而 <code>or</code> 的优先级最低，因此 <code>A and not B or C</code> 就等价于 <code>(A and (not B)) or C</code>。 当然，括号可以用来提升优先级。</p><p>布尔运算符 <code>and</code> 和 <code>or</code> 往往被称为 <em>短路</em> 运算符：它们的参数从左往右一个个被计算，而当最终结果已经能够确定时，就不再计算剩余的参数了。举个例子，如果 <code>A</code> 和 <code>C</code> 是真的，而 <code>B</code> 是假的，那么 <code>A and B and C</code> 不会计算表达式 <code>C</code> 的值。当不作为布尔值使用，而是作为普通的值来使用时，短路运算符的返回值将会是最后一个被计算的参数。</p><p>也可以把比较运算的结果或其他布尔表达式赋值给一个变量。例如，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string1, string2, string3 = <span class="string">''</span>, <span class="string">'Trondheim'</span>, <span class="string">'Hammer Dance'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>non_null = string1 <span class="keyword">or</span> string2 <span class="keyword">or</span> string3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>non_null</span><br><span class="line"><span class="string">'Trondheim'</span></span><br></pre></td></tr></table></figure><p>注意， Python 和 C 不同，赋值不能在表达式内部进行。 C 程序员们可能会抱怨这一点，但这种特性有效地防止了 C 程序中那种常见的错误发生：把 <code>==</code> 不小心写成了 <code>=</code> 。</p><h3 id="序列及其他类型的比较"><a href="#序列及其他类型的比较" class="headerlink" title="序列及其他类型的比较"></a>序列及其他类型的比较</h3><p>拥有相同序列类型的序列对象之间可以进行比较。序列间的比较基于<br>字典排序：首先比较两序列的首项，如果它们不同，那么比较就有了结果；如果它们相同，接下来的两项将继续进行比较，以此类推，直到两者中任何一个序列被遍历完毕。如果比较的项所在的序列是同样的类型，那么可以按照字典排序的方法递归进行下去。如果两序列所有的项比较过后都是相同的，则认为这两个序列相等。如果其中一个序列是另一个序列从头开始的一个子序列，那么更短的一个被认为更小。字符串的字典排序对于单个字符按照 Unicode 的编码大小进行排序。 一些同类型序列的比较示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)              &lt; (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]              &lt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="string">'ABC'</span> &lt; <span class="string">'C'</span> &lt; <span class="string">'Pascal'</span> &lt; <span class="string">'Python'</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)           &lt; (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)                 &lt; (<span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)             == (<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, (<span class="string">'aa'</span>, <span class="string">'ab'</span>))   &lt; (<span class="number">1</span>, <span class="number">2</span>, (<span class="string">'abc'</span>, <span class="string">'a'</span>), <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>需要注意，如果有适当的比较方法，对于不同类型对象间的比较使用 <code>&lt;</code> 或者 <code>&gt;</code> 也是合法的。例如，混合数字类型可以根据它们的数值大小进行比较，如 0 等于 0.0 ，以此类推。否则，Python解释器会抛出一个<a href="https://docs.python.org/3/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>  的异常，而非给出一个随机的排序。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/tutorial/controlflow.html" target="_blank" rel="noopener">https://docs.python.org/3/tutorial/datastructures.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Data-Structures&quot;&gt;&lt;a href=&quot;#Python-Data-Structures&quot; class=&quot;headerlink&quot; title=&quot;Python Data Structures&quot;&gt;&lt;/a&gt;Python Data Structur
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>从容器到容器云</title>
    <link href="https://yo42.github.io/2018/07/22/%E4%BB%8E%E5%AE%B9%E5%99%A8%E5%88%B0%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    <id>https://yo42.github.io/2018/07/22/从容器到容器云/</id>
    <published>2018-07-22T13:09:46.079Z</published>
    <updated>2018-08-03T05:08:42.449Z</updated>
    
    <content type="html"><![CDATA[<p>2013年初，一个名字从云计算领域横空出世，并在整个IT行业激起千层浪。这就是Docker——一个孕育着新思想的“容器”。Docker选择容器作为核心和基础，依靠容器技术支撑的Docker迅速成为国内外各大云计算厂商以及开发者手中的至宝。在一片热火朝天之后，新的革命已经悄然来临。</p><h1 id="云计算平台"><a href="#云计算平台" class="headerlink" title="云计算平台"></a>云计算平台</h1><p>回首历史，云计算时代蕴育出了众多的云计算平台，虽然在服务类型或平台功能上有所差异，但它们的本质上如出一辙，都与NIST1对于云计算平台的定义有着密切的关系。</p><p>云计算是一种按使用量付费的模式，该模式提供可用的、便捷的、按需的网络访问， 纳入可配置的计算资源共享池（资源包括网络、服务器、存储、应用软件、服务），统一管理的资源能够被快速提供，大大减少了资源管理工作开销，你甚至可以再也不用理会那些令人头痛的传统服务供应商了。</p><p>经典云计算架构包括了IaaS（Infrastructure as a Service，基础设施即服务）、PaaS（Platform as a Service，平台即服务）、SaaS（Software as a Service，软件即服务）三层服务，如图1-1所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="云平台_simple.png" alt="图1-1 云平台经典架构" title="">                </div>                <div class="image-caption">图1-1 云平台经典架构</div>            </figure><ul><li>IaaS层为基础设施运维人员服务，提供计算、存储、网络及其他基础资源，云平台使用者可以在上面部署和运行包括操作系统和应用程序在内的任意软件，无需再为基础设施的管理而分心。</li><li>PaaS层为应用开发人员服务，提供支撑应用运行所需的软件运行时环境、相关工具与服务，如数据库服务、日志服务、监控服务等，让应用开发者可以专注于核心业务的开发。</li><li>SaaS层为一般为用户服务，提供了一套完整可用的软件系统，让一般用户无需关注技术细节，只需通过浏览器、应用客户端等方式就能使用部署在云上的应用服务。</li></ul><p>同时，随着计算机技术推陈出新，应用的规模愈发庞大，逻辑愈发复杂，迭代更新愈发频繁，应用开发所需的统一规范和原有开发模式杂乱无章成了追求进步的主要障碍。在尖锐的矛盾中，云时代应用生命周期管理机制（Application Lifecycle Management，ALM）和十二要素应用规范（The Twelve-Factor App）2应运而生。</p><p>所有理论设计和预想一定是美好的，只是对于一个新的理论而言，如何经受住实践的考验，并将美好的愿景转化为生产力才是重中之重。IaaS的发展主要以虚拟机为最小粒度的资源调度单位，出现了资源利用率低、调度分发缓慢、软件栈环境不统一等一堆问题。PaaS在IaaS基础上发展而来，众多PaaS已经意识到可以利用容器技术解决资源利用率问题，但是PaaS通常在应用架构选择、支持的软件环境服务方面有较大的限制，这带来了应用与平台无法解耦、应用运行时环境局限性强、运维人员控制力下降的问题。</p><p>可见，不论IaaS还是PaaS都有各自适用的场景，但依旧存在诸多缺陷，人们亟需一个真正可用的解决方案。</p><h1 id="容器，新的革命"><a href="#容器，新的革命" class="headerlink" title="容器，新的革命"></a>容器，新的革命</h1><p>每一场革命背后都有着深刻的历史背景和矛盾冲突，新陈代谢是历史的必然结果，新生取代陈旧得益于理念的飞跃和对时代发展需求的契合，很显然Docker抓住了这个契机。</p><p>Docker是什么？</p><p>基于官方的定义，Docker是以Docker容器为资源分割和调度的基本单位，封装整个软件运行时环境，为开发者和系统管理员设计的，用于构建、发布和运行分布式应用的平台。它是一个跨平台、可移植并且简单易用的容器解决方案。Docker的源代码托管在GitHub上，基于Go语言开发并遵从Apache 2.0协议。Docker可在容器内部快速自动化地部署应用，并通过内核技术（namespaces、cgroups等）为容器提供资源隔离与安全保障。</p><p>我们应该看看Docker的发展历程。</p><p>每一个传奇都需要一个这样的开头，很久很久以前：Docker项目由Solomon Hykes所带领的团队发起，在Docker公司的前身dotCloud内部启动孕育，代码托管于GitHub。</p><p>2013年11月：REHL 6.5正式版发布，集成了对Docker的支持，拉开了业界各大厂商竞相支持Docker的序幕。</p><p>2014年4月到6月：云技术市场上的三大巨头Amazon、Google及MicroSoft Azure相继宣布支持Docker，并着手开发基于容器的全新产品。</p><p>2014年6月：DockerCon 2014大会召开，会上来自Google、IBM、Amazon、Red Hat、Facebook及Twitter等全球领先企业的演讲嘉宾组成了豪华的阵容。此时， Docker自开源版本后又经历了15个月左右的飞速发展，Docker 1.0版本正式发布。</p><p>2014年8月：VMware宣布与Docker建立合作关系，标志了虚拟化市场形成了新的格局。</p><p>2014年10月：微软宣布将整合Docker进入下一代的Windows Server中。</p><p>2014年10月15日：Azure和Docker共同举办了Docker全球开发者大会，并宣布双方建立战略合作伙伴关系。</p><p>2014年底：Google率先发布容器引擎Google Container Engine（GCE），整合了Docker、Google自有容器技术和在DockerCon 2014大会上发布的Kubernetes，致力于为用户提供完善的基于Docker应用打造的云计算平台；Amazon发布EC2 Container Service（ECS），它是一项高度可扩展、高性能、免费的容器管理服务，并能够在托管的Amazon EC2实例集群上轻松地发布、管理和扩展Docker容器，使得Amazon Web Services（AWS）用户能够使用AWS上的容器轻松地运行和管理分布式应用。</p><p>2015年4月：Docker公司宣布完成了9500万美元的D轮融资。此前，他们已完成三轮融资，包括1500万美元的B轮融资及4000万美元的C轮融资。</p><p>2015年6月：Linux基金会携手AWS、思科、Docker、EMC、富士通、高盛、Google、惠普、华为、IBM、Intel等公司在DockerCon上共同宣布成立容器标准化组织OCP（Open Container Project），旨在实现容器标准化，为Docker生态圈内成员的协作互通打下良好的基础。该组织后更名为OCI（Open Container Initiative）。</p><p>2016年2月：Docker公司发布商业版容器及服务平台DDC（Docker Datacenter），迈出了Docker商业化的重要一步。</p><p>截至2016年6月：GitHub中Docker的贡献者超过千人，被关注和喜爱（star）多达三万两千余次（相比之下，此时Linux源码多年来积累的被关注次数仅为两万两千余次），并有九千多个开发分支（fork），Docker成为了GitHub上排名前20的明星项目。</p><p>Docker官方存储应用镜像的容器仓库也获得了大量开发者支持，其镜像仓库里已有超过12万个不同应用功能的公共镜像。最受欢迎的Ubuntu、MySQL、Nginx、WordPress镜像，下载量已超过千万次。这些数字还在不断地增长！</p><p>在国内一线城市，几乎每一两周就有一场关于Docker的讨论大会，Docker永远不会让你孤独。</p><p>在从此以后的未来，以Docker为代表的容器技术已经给云计算乃至整个IT界带来了深远的影响，这是一次真正的计算机技术革命，来吧，拥抱变化！</p><p>一个软件项目成功与否的标志是看其是否能够带动一个生态系统的发展，以Docker为代表的容器技术显然做到了这一点。容器技术的快速普及促进了围绕容器技术的相关项目日臻丰富和完善，容器本身的功能和易用性也随之增加。反过来，容器技术的迅猛发展也与其强大的生态系统息息相关。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Docker.png" alt="图1-3 容器技术生态系统（不完全统计" title="">                </div>                <div class="image-caption">图1-3 容器技术生态系统（不完全统计</div>            </figure><p>从图1-3可以看出，容器技术的生态系统自下而上分别覆盖了IaaS层和PaaS层所涉及的各类问题，包括资源调度、编排、部署、监控、配置管理、存储网络管理、安全、容器化应用支撑平台等。除了基于容器技术解决构建分布式平台无法回避的经典问题，容器技术主要带来了以下几点好处。</p><ul><li>持续部署与测试。容器消除了线上线下的环境差异，保证了应用生命周期的环境一致性和标准化。开发人员使用镜像实现标准开发环境的构建，开发完成后通过封装着完整环境和应用的镜像进行迁移，由此，测试和运维人员可以直接部署软件镜像来进行测试和发布，大大简化了持续集成、测试和发布的过程。</li><li>跨云平台支持。容器带来的最大好处之一就是其适配性，越来越多的云平台都支持容器，用户再也无需担心受到云平台的捆绑，同时也让应用多平台混合部署成为可能。目前支持容器的IaaS云平台包括但不限于亚马逊云平台（AWS）、Google云平台（GCP）、微软云平台（Azure）、OpenStack等，还包括如Chef、Puppet、Ansible等配置管理工具。</li><li>环境标准化和版本控制。基于容器提供的环境一致性和标准化，你可以使用Git等工具对容器镜像进行版本控制，相比基于代码的版本控制来说，你还能够对整个应用运行环境实现版本控制，一旦出现故障可以快速回滚。相比以前的虚拟机镜像，容器压缩和备份速度更快，镜像启动也像启动一个普通进程一样快速。</li><li>高资源利用率与隔离。容器没有管理程序的额外开销，与底层共享操作系统，性能更加优良，系统负载更低，在同等条件下可以运行更多的应用实例，可以更充分地利用系统资源。同时，容器拥有不错的资源隔离与限制能力，可以精确地对应用分配CPU、内存等资源，保证了应用间不会相互影响。</li><li>容器便携性与镜像。Linux容器虽然早在Linux 2.6版本内核已经存在，但是缺少容器的便携性，难以推广。容器在原有Linux容器的基础上进行大胆革新，为容器设定了一整套标准化的配置方法，将应用及其依赖的运行环境打包成镜像，真正实现了“构建一次，到处运行”的理念，大大提高了容器的便携性。</li><li>易于理解且易用。Docker的英文原意是处理集装箱的码头工人，标志是鲸鱼运送一大堆集装箱，集装箱就是容器，生动好记，易于理解。一个开发者可以在15分钟之内入门Docker并进行安装和部署，这是容器使用史上的一次飞跃。因为它的易用性，有更多的人开始关注容器技术，加速了容器标准化的步伐。</li><li>应用镜像仓库。Docker官方构建了一个镜像仓库，组织和管理形式类似于GitHub，其上已累积了成千上万的镜像。因为Docker的跨平台适配性，相当于为用户提供了一个非常有用的应用商店，所有人都可以自由地下载微服务组件，这为开发者提供了巨大便利。</li></ul><h1 id="进化：从容器到容器云"><a href="#进化：从容器到容器云" class="headerlink" title="进化：从容器到容器云"></a>进化：从容器到容器云</h1><p>容器为用户打开了一扇通往新世界的大门，真正进入这个容器的世界后，却发现新的生态系统如此庞大。在生产使用中，不论是个人还是企业，都会提出更复杂的需求。这时，我们需要众多跨主机的容器协同工作，需要支持各种类型的工作负载，企业级应用开发更是需要基于容器技术，实现支持多人协作的持续集成、持续交付平台。即使Docker只需一条命令便可启动一个容器，一旦试图将其推广到软件开发和生产环境中，麻烦便层出不穷，容器相关的网络、存储、集群、高可用等就是不得不面对的问题。从容器到容器云的进化应运而生。</p><p>什么是容器云？</p><p>容器云以容器为资源分割和调度的基本单位，封装整个软件运行时环境，为开发者和系统管理员提供用于构建、发布和运行分布式应用的平台。当容器云专注于资源共享与隔离、容器编排与部署时，它是一种IaaS；当容器云渗透到应用支撑与运行时环境时，它是一种PaaS。</p><p>容器云并不仅限于Docker，基于rkt容器的CoreOS项目也是容器云。Docker的出现让人们意识到了容器的价值，使得一直以来长期存在但并未被重视的轻量级虚拟化技术得到快速的发展和应用。鉴于Docker的里程碑意义，本书在讨论容器云时，都以分析Docker为支撑技术的容器云为主。</p><p>Docker公司本身的技术发展，亦是从一个容器管理工具一步步向容器云发展的历史过程。Docker最初发布时只是一个单机下的容器管理工具，随后Docker公司发布了Compose、Machine、Swarm等编排部署工具，并收购了Socketplane解决集群化后的网络问题。本书提及Docker时，一般指Docker容器核心，并不包含它向容器云迈进的一系列扩展工具，这些工具则将在本书第二部分进行分析。</p><p>除了Docker公司之外，业界许多云计算厂商也对基于Docker的容器云做了巨大的投入，以Docker容器为核心的第三方Docker容器云正在迎来春天。第6章将要介绍的Fleet、第7章将要介绍的Flynn和Deis以及第8章的Kubernetes，都是基于Docker技术构建的广为人知的容器云。</p><p>从容器到容器云是一种伟大的进化，并依旧在日积月累中不断前行，现在让我们一起进入Docker的世界，感受容器与容器云的魅力。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li>Docker——容器与容器云（第2版）</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2013年初，一个名字从云计算领域横空出世，并在整个IT行业激起千层浪。这就是Docker——一个孕育着新思想的“容器”。Docker选择容器作为核心和基础，依靠容器技术支撑的Docker迅速成为国内外各大云计算厂商以及开发者手中的至宝。在一片热火朝天之后，新的革命已经悄然
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DevOps And AIOps</title>
    <link href="https://yo42.github.io/2018/07/22/DevOps-And-AIOps/"/>
    <id>https://yo42.github.io/2018/07/22/DevOps-And-AIOps/</id>
    <published>2018-07-22T08:38:48.627Z</published>
    <updated>2018-09-07T01:38:33.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先论DevOps"><a href="#先论DevOps" class="headerlink" title="先论DevOps"></a>先论DevOps</h1><p>DevOps 是一天实践方法，在保证高质量的前提下缩短系统变更从提交到部署。</p><h1 id="DevOps-模式定义"><a href="#DevOps-模式定义" class="headerlink" title="DevOps 模式定义"></a>DevOps 模式定义</h1><p>DevOps 集文化理念、实践和工具于一身，可以提高组织高速交付应用程序和服务的能力，与使用传统软件开发和基础设施管理流程相比，能够帮助组织更快地发展和改进产品。这种速度使组织能够更好地服务其客户，并在市场上更高效地参与竞争。</p><h1 id="DevOps-的工作原理"><a href="#DevOps-的工作原理" class="headerlink" title="DevOps 的工作原理"></a>DevOps 的工作原理</h1><p>在 DevOps 模式下，开发团队和运营团队都不再是“孤立”的团队。有时，这两个团队会合为一个团队，他们的工程师会在应用程序的整个生命周期（从开发测试到部署再到运营）内相互协作，开发出一系列不限于单一职能的技能。</p><p>在一些 DevOps 模式下，质保和安全团队也会与开发和运营团队更紧密地结合在一起，贯穿应用程序的整个生命周期。当安全是所有 DevOps 团队成员的工作重心时，这有时被称为“DevSecOps”。<br>这些团队会使用实践经验自动执行之前手动操作的缓慢流程。他们使用能够帮助其快速可靠地操作和发展应用程序的技术体系和工具。这些工具还可以帮助工程师独立完成通常需要其他团队协作才能完成的任务（例如部署代码或预置基础设施），从而进一步提高团队的工作速度。</p><h1 id="DevOps-的优势"><a href="#DevOps-的优势" class="headerlink" title="DevOps 的优势"></a>DevOps 的优势</h1><h2 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h2><p>高速运转，让您可以更快速地针对客户进行创新、更好地适应不断变化的市场，同时更有效地推动业务成果。DevOps 模式能够帮助您的开发人员和运营团队实现这些目标。例如，微服务和持续交付能够让团队充分掌控服务，然后更快速地发布更新。</p><h2 id="快速交付"><a href="#快速交付" class="headerlink" title="快速交付"></a>快速交付</h2><p>提高发布的频率和速度，以便您能够更快速地进行创新并完善产品。您发布新功能和修复错误的速度越快，就越能快速地响应客户需求并建立竞争优势。持续集成和持续交付是自动执行软件发布流程（从构建到部署）的两项实践经验。</p><h2 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h2><p>确保应用程序更新和基础设施变更的品质，以便您能够在保持最终用户优质体验的同时，更加快速可靠地进行交付。使用持续集成和持续交付等实践经验来测试每次变更是否安全以及能够正常运行。进行监控和记录实践经验能够帮助您实时了解当前的性能。</p><h2 id="规模"><a href="#规模" class="headerlink" title="规模"></a>规模</h2><p>大规模运行和管理您的基础设施及开发流程。自动化和一致性可在降低风险的同时，帮助您有效管理复杂或不断变化的系统。例如，基础设施即代码能够帮助您以一种可重复且更有效的方式来管理部署、测试和生产环境。</p><h2 id="增强合作"><a href="#增强合作" class="headerlink" title="增强合作"></a>增强合作</h2><p>建立一个适应 DevOps 文化模式的更高效的团队，强调主人翁精神和责任感。开发人员和运营团队密切合作，共同承担诸多责任，并将各自的工作流程相互融合。这有助于减少效率低下的工作，同时节约大家的时间（例如，缩短开发人员和运营团队之间的交接时间，编写将运行环境考虑在内的代码）。</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>在快速运转的同时保持控制力和合规性。利用自动实施的合规性策略、精细控制和配置管理技术，您可以在不牺牲安全性的前提下采用 DevOps 模式。例如，利用基础设施即代码和策略即代码，您可以大规模定义并追踪合规性。</p><h1 id="DevOps-实践经验"><a href="#DevOps-实践经验" class="headerlink" title="DevOps 实践经验"></a>DevOps 实践经验</h1><h2 id="以下列举了一些-DevOps-最佳实践："><a href="#以下列举了一些-DevOps-最佳实践：" class="headerlink" title="以下列举了一些 DevOps 最佳实践："></a>以下列举了一些 DevOps 最佳实践：</h2><ul><li>持续集成</li><li>持续交付</li><li>微服务</li><li>基础设施即代码</li><li>监控和日志记录</li><li>沟通与合作</li></ul><p>关键字:云平台，微服务，容器化，CI/CD，SRE，敏捷开发….</p><p>关于DevOps实践的一个非常好的视频<br><a href="http://www.infoq.com/cn/presentations/experience-of-google-devops-landing-practice" target="_blank" rel="noopener">http://www.infoq.com/cn/presentations/experience-of-google-devops-landing-practice</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;先论DevOps&quot;&gt;&lt;a href=&quot;#先论DevOps&quot; class=&quot;headerlink&quot; title=&quot;先论DevOps&quot;&gt;&lt;/a&gt;先论DevOps&lt;/h1&gt;&lt;p&gt;DevOps 是一天实践方法，在保证高质量的前提下缩短系统变更从提交到部署。&lt;/p&gt;
&lt;h1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深夜的口琴声</title>
    <link href="https://yo42.github.io/2018/07/22/%E6%B7%B1%E5%A4%9C%E7%9A%84%E5%8F%A3%E7%90%B4%E5%A3%B0/"/>
    <id>https://yo42.github.io/2018/07/22/深夜的口琴声/</id>
    <published>2018-07-22T08:08:24.355Z</published>
    <updated>2018-07-22T08:09:44.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深夜的口琴声"><a href="#深夜的口琴声" class="headerlink" title="深夜的口琴声"></a>深夜的口琴声</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/kelang2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/kelang1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深夜的口琴声&quot;&gt;&lt;a href=&quot;#深夜的口琴声&quot; class=&quot;headerlink&quot; title=&quot;深夜的口琴声&quot;&gt;&lt;/a&gt;深夜的口琴声&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于云主机系统的初始化</title>
    <link href="https://yo42.github.io/2018/07/02/%E5%85%B3%E4%BA%8E%E4%BA%91%E4%B8%BB%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://yo42.github.io/2018/07/02/关于云主机系统的初始化/</id>
    <published>2018-07-02T07:21:19.688Z</published>
    <updated>2018-07-02T07:50:27.484Z</updated>
    
    <content type="html"><![CDATA[<p>在许多IaaS平台中新购买的机器资源并不是开箱即用，一般需根业务进行定制，又或者你作为一个强迫症患者想让自己的机器变得更加完美，所以在购买完机器后进行初始化流程是很有必要滴。</p><p>机器初始化完成可以打包为云平台的镜像，方便后续的集成。</p><h1 id="云供应商：Ucloud"><a href="#云供应商：Ucloud" class="headerlink" title="云供应商：Ucloud"></a>云供应商：Ucloud</h1><h1 id="系统版本号：Ubuntu-16-04-LTS。"><a href="#系统版本号：Ubuntu-16-04-LTS。" class="headerlink" title="系统版本号：Ubuntu 16.04 LTS。"></a>系统版本号：Ubuntu 16.04 LTS。</h1><h1 id="关于设置机器的数据盘视情况而操作"><a href="#关于设置机器的数据盘视情况而操作" class="headerlink" title="关于设置机器的数据盘视情况而操作"></a>关于设置机器的数据盘视情况而操作</h1><h1 id="禁用系统自动更新："><a href="#禁用系统自动更新：" class="headerlink" title="禁用系统自动更新："></a>禁用系统自动更新：</h1><pre>sed -i '/Unattended-Upgrade/s/1/0/' /etc/apt/apt.conf.d/20auto-upgrades</pre><h1 id="设置别名："><a href="#设置别名：" class="headerlink" title="设置别名："></a>设置别名：</h1><pre>cat<<\eof> /etc/profile.d/Env.shalias grep='grep --color'alias fgrep='fgrep --color'alias pgrep='pgrep -l'alias l.='ls -d .* --color=auto'alias ll='ls -l --color=auto'alias ls='ls --color=auto'alias lt='ls -l --time-style=long-iso'HISTFILESIZE=50000HISTSIZE=10000HISTTIMEFORMAT="<%f %t="">: " export HISTTIMEFORMAT HISTSIZE HISTFILESIZEexport MYSQL_HISTFILE=/dev/nullEOF</%f></\eof></pre><h1 id="让su-登录到root时也可以使用别名设置："><a href="#让su-登录到root时也可以使用别名设置：" class="headerlink" title="让su 登录到root时也可以使用别名设置："></a>让su 登录到root时也可以使用别名设置：</h1><pre>cat<<\eof>> /etc/bash.bashrcif [ -d /etc/profile.d ]; then  for i in /etc/profile.d/*.sh; do    if [ -r $i ]; then      . $i    fi  done  unset ifiEOF</\eof></pre><h1 id="修改PS1等参数（和centos保持一致）："><a href="#修改PS1等参数（和centos保持一致）：" class="headerlink" title="修改PS1等参数（和centos保持一致）："></a>修改PS1等参数（和centos保持一致）：</h1><pre>vim /etc/skel/.bashrc # 注释第19、20行。（HISTSIZE=1000和HISTFILESIZE=2000）# 注释第62行，并在下方加入：PS1='${debian_chroot:+($debian_chroot)}[\u@\h \W]\$ '# 注释第89行。（alias ll='ls -alF'）vim /etc/bash.bashrc # 注释第19行，并在下方加入：PS1='${debian_chroot:+($debian_chroot)}[\u@\h \W]\$ 'vim /root/.bashrc# 注释第16、17行。# 注释第55行，并在下方加入：PS1='${debian_chroot:+($debian_chroot)}[\u@\h \W]\$ '# 注释第82行。</pre><h1 id="配置内核参数："><a href="#配置内核参数：" class="headerlink" title="配置内核参数："></a>配置内核参数：</h1><pre>sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="/& ipv6.disable=1 /' /etc/default/grubgrub-mkconfig -o /boot/grub/grub.cfg</pre><h1 id="删除废弃的设置："><a href="#删除废弃的设置：" class="headerlink" title="删除废弃的设置："></a>删除废弃的设置：</h1><pre>sed -i '/GREP_OPTIONS/d' /etc/profile</pre><h2 id="添加网络参数："><a href="#添加网络参数：" class="headerlink" title="添加网络参数："></a>添加网络参数：</h2><pre>cat<<eof> /etc/sysctl.d/Net.confnet.ipv4.ip_forward = 1net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables= 1net.ipv4.tcp_syncookies  = 1net.ipv4.tcp_syn_retries = 1net.ipv4.tcp_synack_retries  = 1net.ipv4.tcp_max_syn_backlog = 32768net.core.netdev_max_backlog  = 32768net.core.somaxconn = 32769EOF</eof></pre><h2 id="添加用户："><a href="#添加用户：" class="headerlink" title="添加用户："></a>添加用户：</h2><pre>/usr/sbin/useradd -m -s /bin/bash usertest</pre><h2 id="配置sudo："><a href="#配置sudo：" class="headerlink" title="配置sudo："></a>配置sudo：</h2><pre># 允许普通用户使用sudo docker 的部分命令retvar=0[ $retvar -eq 0 ] && cat<<\eof> /etc/sudoers.d/dockercilu ALL=(ALL) NOPASSWD:/usr/bin/docker,/usr/bin/docker-composeEOFretvar=$?[ $retvar -eq 0 ] && chmod 440 /etc/sudoers.d/docker</\eof></pre><h2 id="基础软件："><a href="#基础软件：" class="headerlink" title="基础软件："></a>基础软件：</h2><pre>apt-get update && apt-get install -y aptitude</pre><h2 id="时间同步："><a href="#时间同步：" class="headerlink" title="时间同步："></a>时间同步：</h2><h3 id="切换ntp到chrony："><a href="#切换ntp到chrony：" class="headerlink" title="切换ntp到chrony："></a>切换ntp到chrony：</h3><pre>aptitude remove  -y ntp && aptitude install -y chrony</pre><h3 id="配置chrony（根据-etc-ntp-conf中的内网IP来修改下方的2个内网IP地址）："><a href="#配置chrony（根据-etc-ntp-conf中的内网IP来修改下方的2个内网IP地址）：" class="headerlink" title="配置chrony（根据/etc/ntp.conf中的内网IP来修改下方的2个内网IP地址）："></a>配置chrony（根据/etc/ntp.conf中的内网IP来修改下方的2个内网IP地址）：</h3><pre>cat<<eof> /etc/chrony/chrony.confserver 10.13.255.1    iburst minpoll 3 maxpoll 4 preferserver 10.13.255.2    iburst minpoll 3 maxpoll 4 preferserver 182.92.12.11  iburst minpoll 3 maxpoll 4# ntp.ubuntu.comserver 91.189.91.157 iburst minpoll 3 maxpoll 4server 91.189.89.199 iburst minpoll 3 maxpoll 4stratumweight 0driftfile /var/lib/chrony/driftrtcsyncmakestep 10 3bindcmdaddress 127.0.0.1bindcmdaddress ::1keyfile /etc/chrony/chrony.keyscommandkey 1generatecommandkey#log    statisticslogdir /var/log/chronylogchange 0.1noclientlogEOF</eof></pre><h3 id="设置开机启动："><a href="#设置开机启动：" class="headerlink" title="设置开机启动："></a>设置开机启动：</h3><pre>/lib/systemd/systemd-sysv-install enable chrony</pre><h2 id="安装zabbix：待操作。"><a href="#安装zabbix：待操作。" class="headerlink" title="安装zabbix：待操作。"></a>安装zabbix：待操作。</h2><h2 id="添加docker支持："><a href="#添加docker支持：" class="headerlink" title="添加docker支持："></a>添加docker支持：</h2><pre>aptitude install -y docker.io docker-compose</pre><h2 id="先禁用docker随机启动："><a href="#先禁用docker随机启动：" class="headerlink" title="先禁用docker随机启动："></a>先禁用docker随机启动：</h2><pre>systemctl disable dockersystemctl stop docker</pre><h2 id="清理安装包："><a href="#清理安装包：" class="headerlink" title="清理安装包："></a>清理安装包：</h2><pre>aptitude clean</pre><h2 id="选择vim-tiny作为默认编辑器："><a href="#选择vim-tiny作为默认编辑器：" class="headerlink" title="选择vim.tiny作为默认编辑器："></a>选择vim.tiny作为默认编辑器：</h2><pre>sudo update-alternatives --config editor</pre><h2 id="配置SSHD："><a href="#配置SSHD：" class="headerlink" title="配置SSHD："></a>配置SSHD：</h2><pre>retvar=0if ! grep -q X_FLAG_X /etc/ssh/ssh_config ;then    [ $retvar -eq 0 ] \        && sed -e 's/^Port/#&/'                     \           -e 's/^UsePAM/#&/'                   \           -e 's/^Protocol/#&/'                 \           -e 's/^X11Forwarding/#&/'            \           -e 's/^PermitRootLogin/#&/'          \           -e 's/^AuthorizedKeysFile/#&/'       \           -e 's/^PubkeyAuthentication/#&/'     \           -e 's/^PermitEmptyPasswords/#&/'     \           -e 's/^GSSAPIAuthentication/#&/'     \           -e 's/^PasswordAuthentication/#&/'   \           -e 's/^GSSAPICleanupCredentials/#&/' \           -e 's/^ChallengeResponseAuthentication/#&/' \           /etc/ssh/sshd_config -i \        && cat <<\eof>> /etc/ssh/sshd_configPort     932Protocol 2PermitRootLogin        noPermitEmptyPasswords   noPasswordAuthentication noPubkeyAuthentication   yesUseLogin               yesAuthorizedKeysFile     .ssh/authorized_keysChallengeResponseAuthentication noUsePAM yesUseDNS noX11Forwarding noGSSAPIAuthentication noGSSAPICleanupCredentials noEOFretvar=$?    [ $retvar -eq 0 ] \        && sed -i 's/GSSAPIAuthentication/#&/' /etc/ssh/ssh_config \        && cat <<\eof>> /etc/ssh/ssh_config        Port 932        ForwardAgent yes        # X_FLAG_X #EOFretvar=$?fi</\eof></\eof></pre><h2 id="防火墙（具体规则还需根据实际情况进行修改）："><a href="#防火墙（具体规则还需根据实际情况进行修改）：" class="headerlink" title="防火墙（具体规则还需根据实际情况进行修改）："></a>防火墙（具体规则还需根据实际情况进行修改）：</h2><h3 id="禁用ufw："><a href="#禁用ufw：" class="headerlink" title="禁用ufw："></a>禁用ufw：</h3><pre>systemctl stop ufwsystemctl disable ufwsystemctl mask ufw</pre><h3 id="安装（默认是交互式，保存IPv4的规则就可以了）："><a href="#安装（默认是交互式，保存IPv4的规则就可以了）：" class="headerlink" title="安装（默认是交互式，保存IPv4的规则就可以了）："></a>安装（默认是交互式，保存IPv4的规则就可以了）：</h3><pre>aptitude install iptables-persistent</pre><h3 id="iptables配置文件："><a href="#iptables配置文件：" class="headerlink" title="iptables配置文件："></a>iptables配置文件：</h3><pre>cat<<\eof> /etc/iptables/rules.v4*filter:INPUT   ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT  ACCEPT [0:0]-A INPUT -p icmp --icmp-type timestamp-request -j DROP-A INPUT -p icmp --icmp-type timestamp-reply   -j DROP-A INPUT -p icmp -j ACCEPT-A INPUT -i lo   -j ACCEPT-A INPUT -i docker0 -j ACCEPT-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -s 10.23.0.0/16       -m comment --comment "intranet" -p tcp -m tcp -j ACCEPT-A INPUT -p tcp -m tcp -m multiport --dports 80,443 -m comment --comment "all-user" -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT-A FORWARD -i docker0 ! -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT-A FORWARD -i docker0   -o docker0 -j ACCEPT# intranet-A FORWARD -d 10.25.0.0/16       -i docker0 ! -o docker0 -j ACCEPT# apt-get mirrors.163.com-A FORWARD -d 123.58.173.185/32 -i docker0 ! -o docker0 -j ACCEPT-A FORWARD -d 123.58.173.186/32 -i docker0 ! -o docker0 -j ACCEPT# dns server-A FORWARD -d 10.23.255.1/32     -i docker0 ! -o docker0 -j ACCEPT-A FORWARD -d 10.23.255.2/32     -i docker0 ! -o docker0 -j ACCEPT-A FORWARD -d 114.114.114.114/32 -i docker0 ! -o docker0 -j ACCEPT# drop all-A FORWARD -i docker0 ! -o docker0 -j DROP-A FORWARD -j DROP-A OUTPUT -p icmp -j ACCEPT-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A OUTPUT -d 10.23.0.0/16       -m comment --comment "intranet" -p tcp -m tcp -j ACCEPT-A OUTPUT -d 10.23.255.1/32     -m comment --comment "dns" -p udp -m udp --dport 53  -j ACCEPT-A OUTPUT -d 10.23.255.1/32     -m comment --comment "dns" -p udp -m udp --dport 53  -j ACCEPT-A OUTPUT -d 114.114.114.114/32 -m comment --comment "dns" -p udp -m udp --dport 53  -j ACCEPT-A OUTPUT -d 10.23.255.101/32   -m comment --comment "ntp" -p udp -m udp --dport 123 -j ACCEPT-A OUTPUT -d 10.23.255.102/32   -m comment --comment "ntp" -p udp -m udp --dport 123 -j ACCEPT-A OUTPUT -d 182.92.12.11/32    -m comment --comment "ntp" -p udp -m udp --dport 123 -j ACCEPT-A OUTPUT -o lo      -j ACCEPT-A OUTPUT -o docker0 -j ACCEPT-A OUTPUT -j REJECT --reject-with icmp-host-prohibitedCOMMITEOF</\eof></pre><h2 id="禁用无用的服务："><a href="#禁用无用的服务：" class="headerlink" title="禁用无用的服务："></a>禁用无用的服务：</h2><p><pre><br>systemctl stop    iscsid<br>systemctl disable iscsid<br>systemctl mask    iscsid<br></pre></p><h2 id="重启系统：确保配置正常。"><a href="#重启系统：确保配置正常。" class="headerlink" title="重启系统：确保配置正常。"></a>重启系统：确保配置正常。</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在许多IaaS平台中新购买的机器资源并不是开箱即用，一般需根业务进行定制，又或者你作为一个强迫症患者想让自己的机器变得更加完美，所以在购买完机器后进行初始化流程是很有必要滴。&lt;/p&gt;
&lt;p&gt;机器初始化完成可以打包为云平台的镜像，方便后续的集成。&lt;/p&gt;
&lt;h1 id=&quot;云供
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>许三观卖血记</title>
    <link href="https://yo42.github.io/2018/06/25/%E8%AE%B8%E4%B8%89%E8%A7%82%E5%8D%96%E8%A1%80%E8%AE%B0/"/>
    <id>https://yo42.github.io/2018/06/25/许三观卖血记/</id>
    <published>2018-06-25T14:32:47.833Z</published>
    <updated>2018-08-03T05:08:42.448Z</updated>
    
    <content type="html"><![CDATA[<p>《许三观卖血记》是余华1995年创作的一部长篇小说。<br>小说讲述了一个名叫许三观的屁民通过卖血而活着的故事。</p><p>许三观是一名在城里丝厂的送蚕工，他从四叔的口中得知“没卖过血的人身子骨都不结实，娶不到女人”的规矩。</p><p>跟着根龙与啊方，许三观开始了他的卖血之路。<br>他得知卖血前需要喝大量的水</p><p> 阿方在下面说：“我们早晨什么都没吃，就喝了几碗水，现在又喝了几碗，到了城里还得再喝几碗，一直要喝到肚子又胀又疼，牙根一阵阵发酸……这水喝多了，人身上的血也会跟着多起来，水会浸到血里去的……”</p><pre><code>“这水浸到了血里，人身上的血是不是就淡了？”“淡是淡了，可身上的血就多了。”</code></pre><p>卖血后便到胜利的饭店</p><p>   然后，他们来到了那家名叫胜利的饭店，饭店是在一座石桥的桥堍，它的屋顶还没有桥高，屋顶上长满了杂草，在屋檐前伸出来像是脸上的眉毛。饭店看上去没有门，门和窗连成一片，中间只是隔了两根木条，许三观他们就是从旁边应该是窗户的地方走了进去，他们坐在了靠窗的桌子前，窗外是那条穿过城镇的小河，河面上漂过去了几片青菜叶子。</p><pre><code>阿方对着跑堂的喊道：“一盘炒猪肝，二两黄酒，黄酒给我温一温。”根龙也喊道：“一盘炒猪肝，二两黄酒，我的黄酒也温一温。”许三观看着他们喊叫，觉得他们喊叫时手拍着桌子很神气，他也学他们的样子，手拍着桌子喊道：“一盘炒猪肝，二两黄酒，黄酒……温一温。”</code></pre><p><br>黄血活血，猪肝补血这对许三观来说兴许是一剂良药。</p><p>每卖一次血可以赚35元，许三观感到颇为高兴便说：</p><p> “四叔，我想找个女人去结婚了，四叔，这两天我一直在想这卖血挣来的三十五块钱怎么花？我想给爷爷几块钱，可是爷爷太老了，爷爷都老得不会花钱了。我还想给你几块钱，我爹的几个兄弟里，你对我最好，四叔，可我又舍不得给你，这是我卖血挣来的钱，不是我卖力气挣来的钱，我舍不得给。四叔，我刚才丫起来的时候突然想到娶女人了。四叔，我卖血挣来的钱总算是花对地方了……四叔，我吃了一肚子的瓜、怎么像是喝了一斤酒似的，四叔，我的脸，我的脖子我的脚底，我的手掌，都在一阵阵地发烧。</p><p>后面许三观便娶了城内出名的”油条西施“许玉兰为妻子。</p><p>文中有趣的摘抄(读到这里着实让人感到无比的滑稽:))：</p><p>  第二天下午，许三观把许玉兰带到了那家胜利饭店，坐在靠窗的桌子旁，也就是他和阿方、根龙吃炒猪肝喝黄酒的桌前，他像阿方和根龙那样神气地拍着桌子，对跑堂的叫道：</p><p><strong>“来一客小笼包子。”<br>   他请许玉兰吃了一客小笼包子，吃完小笼包子后，许玉兰说她还能吃一碗馄饨，许三观又拍起了桌子：    “来一碗馄饨。”<br>   许玉兰这天下午笑眯眯地还吃了话梅，吃了话梅以后说嘴咸，又吃了糖果，吃了糖果以后说口渴，<br>   许三观就给她买了半个西瓜，她和许三观站在了那座木桥上，她笑眯眯地把半个西瓜全吃了下去，然后她笑眯眯地打起了嗝。当她的身体一抖一抖地打嗝时，许三观数着手指开始算一算这个下午花了多少钱。<br>   “小笼包子两角四分，馄饨九分钱，话梅一角，糖果买了两次共计两角三分，西瓜半个有三斤四两花了一角七分，总共是八角三分钱……你什么时候嫁给我？”<br>    “啊呀，”许玉兰惊叫起来，“你凭什么要我嫁给你”    许三观说：“你花掉了我八角三分钱。”<br>    “是你自己请我吃的，”许玉兰打着嗝说，“我还以为是白吃的呢，你又没说吃了你的东西就要嫁给你……”<br>    “嫁给我有什么不好？”许三观说，“你嫁给我以后，我会疼你护着你，我会经常让你一个下午就吃掉八角三分钱。”<br>      “啊呀，”许玉兰叫了起来，“要是我嫁给了你，我就不会这么吃了，我嫁给你以后就是吃自己的了，我舍不得……早知道是这样，我就不吃了。”<br>      “你也不用后悔，”许三观安慰她，“你嫁给我就行了。”<br>      “我不能嫁给你，我有男朋友了，我爹也不会答应的，我爹喜欢何小勇……”<br>      于是，许三观就提着一瓶黄酒一条大前门香烟，来到许玉兰家，他在许玉兰父亲的对面坐了下来，将黄酒和香烟推了过去，然后滔滔不绝地说了起来：    “你知道我爹吧？我爹就是那个有名的许木匠，他老人家活着的时候专给城里大户人家做活，他做出来的桌于谁也比不上，伸手往桌面上一摸，就跟摸在绸缎上一样光滑。你知道我妈吧？我妈就是金花，你知道金花吗？就是那个城西的美人，从前别人都叫她城西美人，我爹死了以后她嫁给了一个国民党连长，后来跟着那个连长跑了。我爹只有我这么一个儿子，我妈和那个连长是不是生了我就不知道了。我叫许三观，我两个伯伯的儿子比我大，我在许家排行老三，所以我叫许三观，我是丝厂的工人，我比何小勇大两岁，比他早三年参加工作，我的钱肯定比他多，他想娶许玉兰还得筹几年钱，我结婚的钱都准备好了，我是万事皆备只欠东风了。”<br>      许三观又说：“你只有许玉兰一个女儿，许玉兰要是嫁给了何小勇，你家就断后了，生出来的孩子不管是男是女，都得姓何。要是嫁给了我，我本来就姓许，生下来的孩子也不管是男是女，都姓许，你们许家后面的香火也就接上了，说起来我娶了许玉兰，其实我就和倒插门的女婿一样。许玉兰的父亲听到最后那几句话，嘿嘿笑了起来，他看着许三观，手指在桌上笃笃地敲着，他说：”这一瓶酒，这一条香烟，我收下了，你说得对，我女儿要是嫁给了何小勇，我许家就断后了。我女儿要是嫁给了你，我们两个许家的香火都接上了。”</strong></p><p>不久，许三观便有了三个儿子，取名分别为：许一乐、许二乐、许三乐</p><pre><code>许玉兰在五年时间里生下了三个儿子，许三观给他三个儿子取名为许一乐，许二乐，许三乐。有一天，在许三乐一岁三个月的时候，许玉兰揪住许三观的耳朵问他：“我生孩子时，你是不是在外面哈哈大笑？”“我没有哈哈大笑，”许三观说，“我只是嘿嘿地笑，没有笑出声音。”“啊呀，”许玉兰叫道，“所以你让三个儿子叫一乐，二乐，三乐，我在产房里疼了一次，二次，三次；你在外面乐了一次，二次，三次，是不是？”</code></pre><p>后续的故事，作者余华用诙谐幽默的方式来描写一个小人物许三观的家庭生活，阐释了这个社会的荒谬。</p><p>卖血是为了娶亲，是为了治重病的儿子，是为了郑重款待宾客，是为了生存，但最终还是为了爱和可笑的尊严。</p><p>再谈历史背景：<br>从余华的《活着》、《许三观卖血记》故事的历史背景都是中国近代史。</p><p>1、1958年的人民公社、大跃进和大炼钢铁。<br>2、接下来一两年的天灾人祸导致的全国性饥荒。<br>3、文化大革命，知青下山。<br>…..</p><p><strong>“你知道吗？为什么工厂停工了、商店关门了、学校不上课、你也用不着去炸抽条了？为什么有人被吊在了树上、有人被关进了牛棚、有人被活活打死？你知道吗？为什么毛主席一说话，就有人把他的话编成了歌，就有人把他的话刷到了墙上、刷到了地上、刷到了汽车上和轮船上、床单上和枕巾上、杯子上和锅上，连厕所的墙上和痰盂上都有。毛主席的名字为什么会这么长予你听着：伟大的领袖伟大的导师伟大的统帅伟大的舵手毛主席万岁万岁万万岁。一共有三十个字，这些都要一口气念下来，中间不能换气。你知道这是为什么？因为文化大革命来了。”</strong></p><p>这样的一番阐释从许三观口中说出来，既符合人物的身份和层次，又启发读者自己的思考。许三观的逻辑和认识水平并不一定就是正确的，但那是真正身处其中的人物会说出的话，这样的话让读者信服的同时也给读者自己想象和思考的空间：文化大革命不只是发生在中国的那一场灾难，而是整个人类都会面临的一种变态与暴力的可能，因而许三观们面对的不仅仅是他个人的命运，而是有可能发生在每个人身上的命运。</p><p>韩国电影《<a href="https://movie.douban.com/subject/11540651/" target="_blank" rel="noopener">许三观</a>》正是根据余华的小说《许三观卖血记》而改编</p><p>再附上网友同样以诙谐幽默手法改编的《<a href="https://www.v2ex.com/t/454569#reply36" target="_blank" rel="noopener">许三观卖码记</a>》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《许三观卖血记》是余华1995年创作的一部长篇小说。&lt;br&gt;小说讲述了一个名叫许三观的屁民通过卖血而活着的故事。&lt;/p&gt;
&lt;p&gt;许三观是一名在城里丝厂的送蚕工，他从四叔的口中得知“没卖过血的人身子骨都不结实，娶不到女人”的规矩。&lt;/p&gt;
&lt;p&gt;跟着根龙与啊方，许三观开始了他
      
    
    </summary>
    
      <category term="Books" scheme="https://yo42.github.io/categories/Books/"/>
    
    
      <category term="Books" scheme="https://yo42.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>JumpServer 运维安全审计系统</title>
    <link href="https://yo42.github.io/2018/06/23/JumpServer-%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1%E7%B3%BB%E7%BB%9F/"/>
    <id>https://yo42.github.io/2018/06/23/JumpServer-运维安全审计系统/</id>
    <published>2018-06-23T10:31:43.211Z</published>
    <updated>2018-08-06T09:22:07.368Z</updated>
    
    <content type="html"><![CDATA[<p>目前，使用的是SSHConfig+ansible的模式进行管控各开发&amp;运维人员的公钥，以及云主机的登录。</p><p>现阶段属于纯跳版机模式，并没有审计功能，存在安全隐患，对于人员离职权限的回收不够彻底，公钥的分发不够方便，开发&amp;运维人员都混用一个账号进行登录，没有审计功能，粗放式权限管理，外放了root密码。</p><p>综合上述缺点，需要一个审计系统。</p><p>目前业界比较良心的开源审计系统<br><a href="http://www.jumpserver.org/" target="_blank" rel="noopener">http://www.jumpserver.org/</a></p><p>其实现在许多云供应商都在推自己的审计系统产品，有些也是基于jumpserver进行二次开发的。</p><p>堡垒机不仅集中管理和分配全部账号，更重要的是能对运维/开发人员的运维操作进行严格审计和权限控制，确保运维的安全合规和运维/开发人员的最小化权限管理。</p><p>从实际应用来看，堡垒机主要管控企业的服务器资源。</p><p>1、JumpServer的安装:略(参考官方文档),后续可能会进行Docker化的定制(coco-ssh server,jumpserver,luna web terminal插件)。</p><h1 id="梳理权限与规则"><a href="#梳理权限与规则" class="headerlink" title="梳理权限与规则:"></a>梳理权限与规则:</h1><h2 id="JumpServer用户管理"><a href="#JumpServer用户管理" class="headerlink" title="JumpServer用户管理:"></a>JumpServer用户管理:</h2><ol><li>梳理各项目组的开发与运维人员的列表，以项目名创建组，通过手工的方式进行开发人员与运维人员的编制。</li><li>用户是授权和登陆的主体，将来为每个员工建立一个账户，用来登录跳板机，将资产授权给该用户，查看用户登陆记录命令历史等。创建用户，例如:以开发者张三的名称创建用户，后续张三将以dev的身份进行资产的登录如 web, sa, dba,dev,oc(ssh web@some-host)</li><li>管理用户是服务器的root，或拥有 NOPASSWD: ALL sudo权限的用户，Jumpserver使用该用户来 推送系统用户、获取资产硬件信息等，大概会使用root进行管理，采用密码管理的方式。</li><li>系统用户是服务器上建立的一些真实存在的可以ssh登陆的用户,如 dev,sa, dba等，系统用户可使用jumpserver推送到服务器上，也可以利用自己公司的工具进行推送，授权时将用户、资产、系统用户关联起来，则表明用户有权限登陆该资产的这个系统用户 如：用户 小明 以 dev 系统用户登录 172.16.1.1资产,简单理解就是 将某个资产上的某个系统用户映射给这个用户登录。</li><li>角色为用户的人员禁止授权su权限,不提供root密码就没有su权限，需要时再申请，sudo su。</li><li>创建系统用户如Dev和oc时需保存密钥。</li></ol><h1 id="JumpServer资产管理"><a href="#JumpServer资产管理" class="headerlink" title="JumpServer资产管理:"></a>JumpServer资产管理:</h1><ol><li>区分不同云供应商，每个节点对应每个云供应商、项目，节点下再区分正式服、辅助支撑服。</li></ol><h1 id="测试环境的部署"><a href="#测试环境的部署" class="headerlink" title="测试环境的部署:"></a>测试环境的部署:</h1><ol><li>选择一个云供应商和地区进行部署一台JumpServer服务器，以及一些测试服。</li><li>购买新资产进行自动添加还需参考JumpServer提供的API实现自动化。</li><li>测试使用REST API 进行资产的自动添加资产以及权限管理</li><li>jumpserver集成sdk</li></ol><h1 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h1><pre>curl -XPOST -d  "username=admin;password=xxxxx" http://192.168.9.250/api/users/v1/token/</pre><h1 id="查询用户可见资产"><a href="#查询用户可见资产" class="headerlink" title="查询用户可见资产"></a>查询用户可见资产</h1><pre>curl -X GET --header 'Content-Type: application/json' --header 'Accept: application/json' -H 'Authorization: Bearer b5abc7c5b5cf4be780370d607181c5fa' 'http://192.168.9.250/api/assets/v1/assets/'</pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h1><pre>1、用户登录curl -XPOST -d 'username=admin;password=admin' http://192.168.188.40/api/users/v1/token/{"Token":"14a9f25397444abb8666c9fa00c294c9","Keyword":"Bearer"}2、获取所有的用户curl -H 'Authorization: Bearer 14a9f25397444abb8666c9fa00c294c9' -XGET http://192.168.188.84:8080/api/users/v1/users/3、创建用户组curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -H 'Authorization: Bearer 14a9f25397444abb8666c9fa00c294c9' -d '{"id":"1162e7a4-90f6-4e5e-b7cf-14581adb7621","is_discard": false,"discard_time": "","name":"epointgroup","comment":"","created_by": "administrator","date_created":"2018-06-06 06:03:03 +0000","discard_time":"2018-06-11 06:03:03 +0000"}' 'http://192.168.188.84/api/users/v1/groups/'4、创建用户并设置用户组curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -H 'Authorization: Bearer 14a9f25397444abb8666c9fa00c294c9' 'http://192.168.188.84/api/users/v1/users/' -d '{"id": "13f1432d-9a8c-4d83-aad9-c3177e3a387d","groups": ["1162e7a4-90f6-4e5e-b7cf-14581adb7620"],"last_login": "2018-05-19 06:03:03 +0000","is_active": true,"date_joined": "2018-06-06 06:03:03 +0000","username": "ijarvis","name": "ijarvis","email": "ijarvis@sina.com","role": "Admin","avatar": null,"wechat": "","phone": "","otp_level": 0,"comment": "","is_first_login": true,"date_expired": "2088-05-19 06:03:03 +0000","created_by": "2018-05-19 06:03:03 +0000"}'5、 获取所有资产列表curl -X GET --header 'Content-Type: application/json' --header 'Accept: application/json' -H 'Authorization: Bearer 14a9f25397444abb8666c9fa00c294c9' 'http://192.168.188.84/api/assets/v1/assets/'6、创建用户资产curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -H 'Authorization: Bearer 14a9f25397444abb8666c9fa00c294c9' -d '{"id": "9f7a3cd5-b3be-4a4f-a7f6-0cbcb8529e71","ip": "192.168.186.66","hostname": "Hadoop_186_66","port": 22,"platform": "Linux","is_active": true,"public_ip": null,"created_by": null,"comment": "","admin_user": "06fe163e-aacd-48ce-a7a7-a15800587b99", "nodes": ["7c0b0eda-8555-42e4-9205-992957c46d56"]}' 'http://192.168.188.84/api/assets/v1/assets/'</pre><h1 id="逻辑图"><a href="#逻辑图" class="headerlink" title="逻辑图:"></a>逻辑图:</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jms.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jms2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">https://www.zhihu.com/question/21036511</a></li><li><a href="">http://www.jumpserver.org/</a></li><li><a href="">https://github.com/jumpserver/jumpserver</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前，使用的是SSHConfig+ansible的模式进行管控各开发&amp;amp;运维人员的公钥，以及云主机的登录。&lt;/p&gt;
&lt;p&gt;现阶段属于纯跳版机模式，并没有审计功能，存在安全隐患，对于人员离职权限的回收不够彻底，公钥的分发不够方便，开发&amp;amp;运维人员都混用一个账号进行
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>[转载]程序员技术练级攻略</title>
    <link href="https://yo42.github.io/2018/06/21/%E8%BD%AC%E8%BD%BD-%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8A%80%E6%9C%AF%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5/"/>
    <id>https://yo42.github.io/2018/06/21/转载-程序员技术练级攻略/</id>
    <published>2018-06-21T04:58:41.000Z</published>
    <updated>2018-06-23T04:53:38.778Z</updated>
    
    <content type="html"><![CDATA[<h6 id="转载自左耳朵耗子的博文-感觉不错就记录下吧"><a href="#转载自左耳朵耗子的博文-感觉不错就记录下吧" class="headerlink" title="转载自左耳朵耗子的博文,感觉不错就记录下吧"></a>转载自左耳朵耗子的博文,感觉不错就记录下吧</h6><p>前言<br>你是否觉得自己从学校毕业的时候只做过小玩具一样的程序？走入职场后哪怕没有什么经验也可以把以下这些课外练习走一遍（朋友的抱怨：学校课程总是从理论出发，作业项目都看不出有什么实际作用，不如从工作中的需求出发）</p><p>建议：</p><p>不要乱买书，不要乱追新技术新名词，基础的东西经过很长时间积累而且还会在未来至少10年通用。<br>回顾一下历史，看看历史上时间线上技术的发展，你才能明白明天会是什么样。<br>一定要动手，例子不管多么简单，建议至少自己手敲一遍看看是否理解了里头的细枝末节。<br>一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。<br>注：你也许会很奇怪为什么下面的东西很偏Unix/Linux，这是因为我觉得Windows下的编程可能会在未来很没有前途，原因如下：</p><p>现在的用户界面几乎被两个东西主宰了，1）Web，2）移动设备iOS或Android。Windows的图形界面不吃香了。<br>越来越多的企业在用成本低性能高的Linux和各种开源技术来构架其系统，Windows的成本太高了。<br>微软的东西变得太快了，很不持久，他们完全是在玩弄程序员。详情参见《Windows编程革命史》<br>所以，我个人认为以后的趋势是前端是Web+移动，后端是Linux+开源。开发这边基本上没Windows什么事。</p><p>启蒙入门<br>1、 学习一门脚本语言，例如Python/Ruby</p><p>可以让你摆脱对底层语言的恐惧感，脚本语言可以让你很快开发出能用得上的小程序。实践项目:</p><p>处理文本文件，或者csv (关键词 python csv, python open, python sys) 读一个本地文件，逐行处理（例如 word count，或者处理log）<br>遍历本地文件系统 (sys, os, path)，例如写一个程序统计一个目录下所有文件大小并按各种条件排序并保存结果<br>跟数据库打交道 (python sqlite)，写一个小脚本统计数据库里条目数量<br>学会用各种print之类简单粗暴的方式进行调试<br>学会用Google (phrase, domain, use reader to follow tech blogs)<br>为什么要学脚本语言，因为他们实在是太方便了，很多时候我们需要写点小工具或是脚本来帮我们解决问题，你就会发现正规的编程语言太难用了。</p><p>2、 用熟一种程序员的编辑器(不是IDE) 和一些基本工具</p><p>Vim / Emacs / Notepad++，学会如何配置代码补全，外观，外部命令等。<br>Source Insight (或 ctag)<br>使用这些东西不是为了Cool，而是这些编辑器在查看、修改代码/配置文章/日志会更快更有效率。</p><p>3、 熟悉Unix/Linux Shell和常见的命令行</p><p>如果你用windows，至少学会用虚拟机里的linux， vmware player是免费的，装个Ubuntu吧<br>一定要少用少用图形界面。<br>学会使用man来查看帮助<br>文件系统结构和基本操作 ls/chmod/chown/rm/find/ln/cat/mount/mkdir/tar/gzip …<br>学会使用一些文本操作命令 sed/awk/grep/tail/less/more …<br>学会使用一些管理命令 ps/top/lsof/netstat/kill/tcpdump/iptables/dd…<br>了解/etc目录下的各种配置文章，学会查看/var/log下的系统日志，以及/proc下的系统运行信息<br>了解正则表达式，使用正则表达式来查找文件。<br>对于程序员来说Unix/Linux比Windows简单多了。（参看我四年前CSDN的博文《其实Unix很简单》）学会使用Unix/Linux你会发现图形界面在某些时候实在是太难用了，相当地相当地降低工作效率。</p><p>4、 学习Web基础（HTML/CSS/JS) + 服务器端技术 (LAMP)</p><p>未来必然是Web的世界，学习WEB基础的最佳网站是W3School。</p><p>学习HTML基本语法<br>学习CSS如何选中HTML元素并应用一些基本样式（关键词：box model）<br>学会用  Firefox + Firebug 或 chrome 查看你觉得很炫的网页结构，并动态修改。<br>学习使用Javascript操纵HTML元件。理解DOM和动态网页（<a href="http://oreilly.com/catalog/9780596527402" target="_blank" rel="noopener">http://oreilly.com/catalog/9780596527402</a>) 网上有免费的章节，足够用了。或参看 DOM 。<br>学会用  Firefox + Firebug 或 chrome 调试Javascript代码（设置断点，查看变量，性能，控制台等）<br>在一台机器上配置Apache 或 Nginx<br>学习PHP，让后台PHP和前台HTML进行数据交互，对服务器相应浏览器请求形成初步认识。实现一个表单提交和反显的功能。<br>把PHP连接本地或者远程数据库 MySQL（MySQL 和 SQL现学现用够了）<br>跟完一个名校的网络编程课程（例如：<a href="http://www.stanford.edu/~ouster/cgi-bin/cs142-fall10/index.php" target="_blank" rel="noopener">http://www.stanford.edu/~ouster/cgi-bin/cs142-fall10/index.php</a> ) 不要觉得需要多于一学期时间，大学生是全职一学期选3-5门课，你业余时间一定可以跟上<br>学习一个javascript库（例如jQuery 或 ExtJS）+  Ajax (异步读入一个服务器端图片或者数据库内容）+JSON数据格式。<br>HTTP: The Definitive Guide 读完前4章你就明白你每天上网用浏览器的时候发生的事情了(proxy, gateway, browsers)<br>做个小网站（例如：一个小的留言板，支持用户登录，Cookie/Session，增、删、改、查，上传图片附件，分页显示）<br>买个域名，租个空间，做个自己的网站。<br>进阶加深<br>1、 C语言和操作系统调用</p><p>重新学C语言，理解指针和内存模型，用C语言实现一下各种经典的算法和数据结构。推荐《计算机程序设计艺术》、《算法导论》和《编程珠玑》。<br>学习（麻省理工免费课程）计算机科学和编程导论<br>学习（麻省理工免费课程）C语言内存管理<br>学习Unix/Linux系统调用（Unix高级环境编程），，了解系统层面的东西。<br>用这些系统知识操作一下文件系统，用户（实现一个可以拷贝目录树的小程序）<br>用fork/wait/waitpid写一个多进程的程序，用pthread写一个多线程带同步或互斥的程序。多进程多进程购票的程序。<br>用signal/kill/raise/alarm/pause/sigprocmask实现一个多进程间的信号量通信的程序。<br>学会使用gcc和gdb来编程和调试程序（参看我的《用gdb调试程序》）<br>学会使用makefile来编译程序。（参看我的《跟我一起写makefile》）<br>IPC和Socket的东西可以放到高级中来实践。<br>学习Windows SDK编程（Windows 程序设计 ，MFC程序设计）<br>写一个窗口，了解WinMain/WinProcedure，以及Windows的消息机制。<br>写一些程序来操作Windows SDK中的资源文件或是各种图形控件，以及作图的编程。<br>学习如何使用MSDN查看相关的SDK函数，各种WM_消息以及一些例程。<br>这本书中有很多例程，在实践中请不要照抄，试着自己写一个自己的例程。<br>不用太多于精通这些东西，因为GUI正在被Web取代，主要是了解一下Windows 图形界面的编程。@virushuo 说：“ 我觉得GUI确实不那么热门了，但充分理解GUI工作原理是很重要的。包括移动设备开发，如果没有基础知识仍然很吃力。或者说移动设备开发必须理解GUI工作，或者在win那边学，或者在mac/iOS上学”。<br>2、学习Java</p><p>Java 的学习主要是看经典的Core Java 《Java 核心技术编程》和《Java编程思想》（有两卷，我仅链了第一卷，足够了，因为Java的图形界面了解就可以了）<br>学习JDK，学会查阅Java API Doc <a href="http://download.oracle.com/javase/6/docs/api/" target="_blank" rel="noopener">http://download.oracle.com/javase/6/docs/api/</a><br>了解一下Java这种虚拟机语言和C和Python语言在编译和执行上的差别。从C、Java、Python思考一下“跨平台”这种技术。<br>学会使用IDE Eclipse，使用Eclipse 编译，调试和开发Java程序。<br>建一个Tomcat的网站，尝试一下JSP/Servlet/JDBC/MySQL的Web开发。把前面所说的那个PHP的小项目试着用JSP和Servlet实现一下。<br>3、Web的安全与架构<br>学习HTML5，网上有很多很多教程，以前酷壳也介绍过很多，我在这里就不罗列了。<br>学习Web开发的安全问题（参考新浪微博被攻击的这个事，以及Ruby的这篇文章）<br>学习HTTP Server的rewrite机制，Nginx的反向代理机制，fast-cgi（如：PHP-FPM）<br>学习Web的静态页面缓存技术。<br>学习Web的异步工作流处理，数据Cache，数据分区，负载均衡，水平扩展的构架。<br>实践任务：<br>使用HTML5的canvas 制作一些Web动画。<br>尝试在前面开发过的那个Web应用中进行SQL注入，JS注入，以及XSS攻击。<br>把前面开发过的那个Web应用改成构造在Nginx + PHP-FPM + 静态页面缓存的网站<br>4、学习关系型数据库</p><p>你可以安装MSSQLServer或MySQL来学习数据库。<br>学习教科书里数据库设计的那几个范式，1NF，2NF，3NF，……<br>学习数据库的存过，触发器，视图，建索引，游标等。<br>学习SQL语句，明白表连接的各种概念（参看《SQL  Join的图示》）<br>学习如何优化数据库查询（参看《MySQL的优化》）<br>实践任务：设计一个论坛的数据库，至少满足3NF，使用SQL语句查询本周，本月的最新文章，评论最多的文章，最活跃用户。<br>5、一些开发工具</p><p>学会使用SVN或Git来管理程序版本。<br>学会使用JUnit来对Java进行单元测试。<br>学习C语言和Java语言的coding standard 或 coding guideline。（我N年前写过一篇关C语言非常简单的文章——《编程修养》，这样的东西你可以上网查一下，一大堆）。<br>推荐阅读《代码大全》《重构》《代码整洁之道》<br>高级深入<br>1、C++ / Java 和面向对象</p><p>我个人以为学好C++，Java也就是举手之劳。但是C++的学习曲线相当的陡。不过，我觉得C++是最需要学好的语言了。参看两篇趣文“C++学习信心图” 和“21天学好C++”</p><p>学习（麻省理工免费课程）C++面向对象编程<br>读我的 “如何学好C++”中所推荐的那些书至少两遍以上（如果你对C++的理解能够深入到像我所写的《C++虚函数表解析》或是《C++对象内存存局》，或是《C/C++返回内部静态成员的陷阱》那就非常不错了）<br>然后反思为什么C++要干成这样，Java则不是？你一定要学会对比C++和Java的不同。比如，Java中的初始化，垃圾回收，接口，异常，虚函数，等等。<br>实践任务：<br>用C++实现一个BigInt，支持128位的整形的加减乘除的操作。<br>用C++封装一个数据结构的容量，比如hash table。<br>用C++封装并实现一个智能指针（一定要使用模板）。<br>《设计模式》必需一读，两遍以上，思考一下，这23个模式的应用场景。主要是两点：1）钟爱组合而不是继承，2）钟爱接口而不是实现。（也推荐《深入浅出设计模式》）<br>实践任务：<br>使用工厂模式实现一个内存池。<br>使用策略模式制做一个类其可以把文本文件进行左对齐，右对齐和中对齐。<br>使用命令模式实现一个命令行计算器，并支持undo和redo。<br>使用修饰模式实现一个酒店的房间价格订价策略——旺季，服务，VIP、旅行团、等影响价格的因素。<br>学习STL的用法和其设计概念  – 容器，算法，迭代器，函数子。如果可能，请读一下其源码。<br>实践任务：尝试使用面向对象、STL，设计模式、和WindowsSDK图形编程的各种技能<br>做一个贪吃蛇或是俄罗斯方块的游戏。支持不同的级别和难度。<br>做一个文件浏览器，可以浏览目录下的文件，并可以对不同的文件有不同的操作，文本文件可以打开编辑，执行文件则执行之，mp3或avi文件可以播放，图片文件可以展示图片。<br>学习C++的一些类库的设计，如： MFC（看看候捷老师的《深入浅出MFC》） ，Boost, ACE,  CPPUnit，STL （STL可能会太难了，但是如果你能了解其中的设计模式和设计那就太好了，如果你能深入到我写的《STL string类的写时拷贝技术》那就非常不错了，ACE需要很强在的系统知识，参见后面的“加强对系统的了解”）<br>Java是真正的面向对象的语言，Java的设计模式多得不能再多，也是用来学习面向对象的设计模式的最佳语言了（参看Java中的设计模式）。<br>推荐阅读《Effective Java》 and 《Java解惑》<br>学习Java的框架，Java的框架也是多，如Spring, Hibernate，Struts 等等，主要是学习Java的设计，如IoC等。<br>Java的技术也是烂多，重点学习J2EE架构以及JMS， RMI, 等消息传递和远程调用的技术。<br>学习使用Java做Web Service （官方教程在这里）<br>实践任务： 尝试在Spring或Hibernate框架下构建一个有网络的Web Service的远程调用程序，并可以在两个Service中通过JMS传递消息。<br>C++和Java都不是能在短时间内能学好的，C++玩是的深，Java玩的是广，我建议两者选一个。我个人的学习经历是：</p><p>深究C++（我深究C/C++了十来年了）<br>学习Java的各种设计模式。<br>2、加强系统了解</p><p>重要阅读下面的几本书：</p><p>《Unix编程艺术》了解Unix系统领域中的设计和开发哲学、思想文化体系、原则与经验。你一定会有一种醍醐灌顶的感觉。<br>《Unix网络编程卷1，套接字》这是一本看完你就明白网络编程的书。重要注意TCP、UDP，以及多路复用的系统调用select/poll/epoll的差别。<br>《TCP/IP详解 卷1:协议》- 这是一本看完后你就可以当网络黑客的书。了解以太网的的运作原理，了解TCP/IP的协议，运作原理以及如何TCP的调优。<br>实践任务：<br>理解什么是阻塞（同步IO），非阻塞（异步IO），多路复用（select, poll, epoll）的IO技术。<br>写一个网络聊天程序，有聊天服务器和多个聊天客户端（服务端用UDP对部分或所有的的聊天客户端进Multicast或Broadcast）。<br>写一个简易的HTTP服务器。<br>《Unix网络编程卷2，进程间通信》信号量，管道，共享内存，消息等各种IPC…… 这些技术好像有点老掉牙了，不过还是值得了解。<br>实践任务：<br>主要实践各种IPC进程序通信的方法。<br>尝试写一个管道程序，父子进程通过管道交换数据。<br>尝试写一个共享内存的程序，两个进程通过共享内存交换一个C的结构体数组。<br>学习《Windows核心编程》一书。把CreateProcess，Windows线程、线程调度、线程同步（Event,  信号量，互斥量）、异步I/O，内存管理，DLL，这几大块搞精通。<br>实践任务：使用CreateProcess启动一个记事本或IE，并监控该程序的运行。把前面写过的那个简易的HTTP服务用线程池实现一下。写一个DLL的钩子程序监控指定窗口的关闭事件，或是记录某个窗口的按键。<br>有了多线程、多进程通信，TCP/IP，套接字，C++和设计模式的基本，你可以研究一下ACE了。使用ACE重写上述的聊天程序和HTTP服务器（带线程池）<br>实践任务：通过以上的所有知识，尝试<br>写一个服务端给客户端传大文件，要求把100M的带宽用到80%以上。（注意，磁盘I/O和网络I/O可能会很有问题，想一想怎么解决，另外，请注意网络传输最大单元MTU）<br>了解BT下载的工作原理，用多进程的方式模拟BT下载的原理。<br>3、系统架构</p><p>负载均衡。HASH式的，纯动态式的。（可以到Google学术里搜一些关于负载均衡的文章读读）<br>多层分布式系统 – 客户端服务结点层、计算结点层、数据cache层，数据层。J2EE是经典的多层结构。<br>CDN系统 – 就近访问，内容边缘化。<br>P2P式系统，研究一下BT和电驴的算法。比如：DHT算法。<br>服务器备份，双机备份系统（Live-Standby和Live-Live系统），两台机器如何通过心跳监测对方？集群主结点备份。<br>虚拟化技术，使用这个技术，可以把操作系统当应用程序一下切换或重新配置和部署。<br>学习Thrift，二进制的高性能的通讯中间件，支持数据(对象)序列化和多种类型的RPC服务。<br>学习Hadoop。Hadoop框架中最核心的设计就是：MapReduce和HDFS。MapReduce的思想是由Google的一篇论文所提及而被广为流传的，简单的一句话解释MapReduce就是“任务的分解与结果的汇总”。HDFS是Hadoop分布式文件系统（Hadoop Distributed File System）的缩写，为分布式计算存储提供了底层支持。<br>了解NoSQL数据库（有人说可能是一个过渡炒作的技术），不过因为超大规模以及高并发的纯动态型网站日渐成为主流，而SNS类网站在数据存取过程中有着实时性等刚性需求，这使得目前NoSQL数据库慢慢成了人们所关注的焦点，并大有成为取代关系型数据库而成为未来主流数据存储模式的趋势。当前NoSQL数据库很多，大部分都是开源的，其中比较知名的有：MemcacheDB、Redis、Tokyo Cabinet(升级版为Kyoto Cabinet)、Flare、MongoDB、CouchDB、Cassandra、Voldemort等。<br>写了那么多，回顾一下，觉得自己相当的有成就感。希望大家不要吓着，我自己这十来年也在不断地学习，今天我也在学习中，人生本来就是一个不断学习和练级的过程。不过，一定有漏的，也有不对的，还希望大家补充和更正。（我会根据大家的反馈随时更新此文）欢迎大家通过我的微博（@左耳朵耗子）和twitter（@haoel）和我交流。</p><p>—– 更新  2011/07/19 —–</p><p>1）有朋友奇怪为什么我在这篇文章开头说了web+移动，却没有在后面提到iOS/Android的前端开发。因为我心里有一种感觉，移动设备上的UI最终也会被Javascript取代。大家可以用iPhone或Android看看google+，你就会明白了。</p><p>2）有朋友说我这里的东西太多了，不能为了学习而学习，我非常同意。我在文章的前面也说了要思考。另外，千万不要以为我说的这些东西是一些新的技术，这份攻略里95%以上的全是基础。而且都是久经考验的基础技术。即是可以让你一通百通的技术，也是可以让你找到一份不错工作的技术。</p><p>3）有朋友说学这些东西学完都40了，还不如想想怎么去挣钱。我想告诉大家，一是我今年还没有40岁，二是学无止境啊，三是我不觉得挣钱有多难，难的是怎么让你值那么多钱？无论是打工还是创业，是什么东西让你自己的价值，让你公司的价值更值钱？别的地方我不敢说，对于互联网或IT公司来说，技术实力绝对是其中之一。</p><p>4）有朋友说技术都是工具，不应该如此痴迷这句话没有错，有时候我们需要更多的是抬起头来看看技术以外的事情，或者是说我们在作技术的时候不去思考为什么会有这个技术，为什么不是别的，问题不在于技术，问题在于我们死读书，读死书，成了技术的书呆子。</p><p>5） 对于NoSQL，最近比较火，但我对其有点保守，所以，我只是说了解就可以。对于Hadoop，我觉得其在分布式系统上有巨大的潜力，所以需要学习。 对于关系型数据库，的确是很重要的东西，这点是我的疏忽，在原文里补充。</p><p>（全文完）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">https://coolshell.cn/articles/4990.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;转载自左耳朵耗子的博文-感觉不错就记录下吧&quot;&gt;&lt;a href=&quot;#转载自左耳朵耗子的博文-感觉不错就记录下吧&quot; class=&quot;headerlink&quot; title=&quot;转载自左耳朵耗子的博文,感觉不错就记录下吧&quot;&gt;&lt;/a&gt;转载自左耳朵耗子的博文,感觉不错就记录下吧&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[转载]每个程序员都该知道的事</title>
    <link href="https://yo42.github.io/2018/06/21/%E8%BD%AC%E8%BD%BD-%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/"/>
    <id>https://yo42.github.io/2018/06/21/转载-每个程序员都该知道的事/</id>
    <published>2018-06-21T04:50:30.000Z</published>
    <updated>2018-06-21T04:59:28.974Z</updated>
    
    <content type="html"><![CDATA[<p>在每个月月中，我会推荐一些有价值的内容，供你参考。这个月，我将为你推荐五篇阅读文章，这五篇文章我觉得都是比较不错的经验总结，是我们每一个技术人员都需要知道的东西。它们分别是：</p><p>Stack Overflow 上开出来的一个经典书书单；<br>美国某大学教授给计算机专业学生的一些建议，其中有很多的资源；<br>LinkedIn 的高效代码复查实践，很不错的方法，值得你一读；<br>一份关于程序语言和 bug 数相关的有趣的报告，可以让你对各种语言有所了解</p><p>每个程序员都应该要读的书<br>在 Stack Overflow 上有一个问题 What is the single most influential book every programmer should read，网址为： <a href="https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read" target="_blank" rel="noopener">https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read</a></p><p>虽然这个问题被关闭了，但是这是一个非常热门的问题。排在第一个的人给了一大串书的列表，看上去着实吓人，不过都是一些相当经典相当有影响力的书，在这里我重罗列一些我觉得你必需要看的。</p><p>《代码大全》虽然这本书有点过时了，而且厚到可以垫显示器，但是这是一本绝对经典的书。<br>《程序员修练之道》这本书也是相当的经典，我觉得就是你的指路明灯。<br>《计算机的构造和解释》经典中的经典，必需读的书。<br>《算法导论》美国的本科生教材，这本书应该也是中国计算机学生的教材。<br>《设计模式》这本书是面向对象设计的经典书。<br>《重构》代码坏味道和相应的代码的最佳实践。<br>《人月神话》这本书可能也有点过时了。但还是经典书。<br>《代码整洁之道》细节之处的效率，完美和简单。<br>《Effective C++》/《More Effective C++》C++ 中两本经典得不能再经典的书。也许你觉得 C++ 复杂，但这两本书中带来对代码稳定性的探索方式让人非常受益，因为这种思维方式同样可以用在其它地方。以至于各种模仿者，比如《Effective Java》也是一本经典书。<br>《Unix 编程艺术》、《Unix 高级环境编程》也是相关的经典。<br>还有好多，我就不在这里一一列了。你可以看看其它的答案，我发现自己虽然读过好多书，但也有好些书没有读过，这个问答对我也很有用。</p><p>每个搞计算机专业的学生应有的知识<br>What every computer science major should know，每个搞计算机专业的学生应有的知识，网址为：<a href="http://matt.might.net/articles/what-cs-majors-should-know/" target="_blank" rel="noopener">http://matt.might.net/articles/what-cs-majors-should-know/</a></p><p>本文作者马修·迈特（Matthew Might）是美国犹他大学计算机学院的副教授，2007 年于佐治亚理工学院取得博士学位。计算机专业的课程繁多，而且随着时代的变化，科目的课程组成也在不断变化。如果不经过思考，直接套用现有的计算机专业课程列表，则有可能忽略一些将来可能变得重要的知识点。为此，马修力求从四个方面来总结，得出这篇文章的内容。</p><p>要获得一份好工作，学生需要知道什么？<br>为了一辈子都有工作干，学生需要知道什么？<br>学生需要知道什么，才能考进研究生院？<br>学生需要知道什么，才能对社会有益？<br>这篇文章不仅仅对刚毕业的学生有用，对有工作经验的人同样有用，这里我把这篇文章的内容摘要如下。</p><p>首先，对于我们每个人来说，作品集（Portfolio）会比简历（Resume）更有参考意义。所以，在自己的简历中应该放上自己的一些项目经历，或是一些开源软件的贡献，或是你完成的软件的网址等。最好有一个自己的个人网址，上面有一些你做的事，自己的技能，经历，以及你的一些文章和思考会比简历更好。</p><p>其次，计算机专业工作者也要学会与人交流的技巧，包括如何写演示文稿，以及面对质疑时如何与人辩论的能力。</p><p>最后，他就各个方面展开计算机专业人士所需要的硬技能：工程类数学、Unix 哲学和实践、系统管理、程序设计语言、离散数学、数据结构与算法、计算机体系结构、操作系统、网络、安全、密码学、软件测试、用户体验、可视化、并行计算、软件工程、形式化方法、图形学、机器人、人工智能、机器学习、数据库，等等。详读本文可以了解计算机专业知识的全貌。</p><p>这篇文章的第三部分简直就是一个知识资源向导库，给出了各个技能的方向和关键知识点，你可以跟随着这篇文章里的相关链接学到很多东西。</p><p>LinkedIn 高效的代码复查技巧<br>LinkedIn’s Tips for Highly Effective Code Review，LinkedIn 的高效代码复查技巧，网址为：<a href="https://thenewstack.io/linkedin-code-review/" target="_blank" rel="noopener">https://thenewstack.io/linkedin-code-review/</a></p><p>对于 Code Review，我有一篇文章 《从 Code Review 谈如何做技术》，讲述了为什么 Code Review 是一件很重要事情。今天推荐的这篇文章是 LinkedIn 公司的相关实践。</p><p>这篇文章介绍了 LinkedIn 公司内部实践的 Code Review 形式。具体来说，LinkedIn 的代码复查有以下几个特点。</p><p>从 2011 年开始，强制要求在团队成员之间做代码复查。Code Review 带来的反馈意见让团队成员能够迅速提升自己的技能水平，这解决了 LinkedIn 各个团队近年来因迅速扩张带来的技能不足的问题。<br>通过建立公司范围的 Code Review 工具，这就可以做跨团队的 Code Review。既有利于消除 bug，提升质量，也有利于大家对代码的学习和技能的传播。<br>Code Review 的经验作为员工晋升的参考因素之一。<br>Code Review 的一个难点是，Reviewer 可能不了解某个修改的背景和目的。所以 LinkedIn 要求代码签入版本管理系统前，就对其做清晰的说明，以便复查者了解其目的，促进 Review 的进行。<br>我认为，这个方法实在在太赞了。因为，我看到很多时候，Reviewer 都会说不了解对方代码的背景或是代码量比较大而无法做 Code Review，然而，却没有找到相应的方法解决这个问题。</p><p>LinkedIn 对提交代码写说明文档这个方法是一个非常不错的方法，因为代码提交人写文档的过程其实也是重头梳理的过程。我的个人经验是，写文档的时候通常会发现自己把事儿干复杂了，应该把代码再简化一下，于是就会回头去改代码。是的，写文档就是在写代码。</p><p>有些 Code Review 工具所允许给出的反馈只是代码怎样修改以变得更好，但长此以往会让人觉得复查提出的意见都表示原先的代码不够好。为了提高员工积极性，LinkedIn 的代码复查工具允许提出“这段代码很棒”之类的话语，以便让好代码的作者得到鼓励。我认为，这个方法也很赞，正面鼓励的价值也不可小看。<br>为 Code Review 的结果写出有目的性的注释。比如“消除重复代码”，“增加了测试覆盖率”，等等。长此以往也让团队的价值观得以明确。<br>Code Review 中，不但要 Review 提交者的代码，还要 Reivew 提交者做过的测试。除了一些单元测试，还有一些可能是手动的测试。提交者最好列出所有测试过的案例。这样可以让 Reviewer 可以做出更多的测试建议，从而可以提高质量。<br>对 Code Review 有明确的期望，不过分关注细枝末节，也不要炫技，而是对要 Review 的代码有一个明确的目标。<br>编程语言和代码质量的研究报告<br>A Large-Scale Study of Programming Languages and Code Quality in GitHub，编程语言和代码质量的研究报告，网址为： <a href="https://cacm.acm.org/magazines/2017/10/221326-a-large-scale-study-of-programming-languages-and-code-quality-in-github/" target="_blank" rel="noopener">https://cacm.acm.org/magazines/2017/10/221326-a-large-scale-study-of-programming-languages-and-code-quality-in-github/</a></p><p>这是一项有趣的研究。有四个人从 Github 上分析了 728 个项目，6300 万行代码，近 3 万个提交人，150 万个 commits，以及 17 种编程语言（如下图所示），然后，他们想找到编程语言对软件质量的影响。</p><p>然后，他们还对编程语言做了一个分类，想找到不同类型的编程语言的 bug 问题。如下图所示：</p><p>以及，他们还对这众多的开源软件做了个聚类，如下图：</p><p>对 bug 的类型也做了一个聚类，如下图：</p><p>其中分析的方法我不多说了。我们来看一下相关的结果。</p><p>首先，他们得出来的第一个结果是，从查看 bug fix 的 commits 的个数情况来看，C、C++、Objective-C、PHP 和 Python 中有很多很多的 commits 都是和 bug fix 相关的，而 Clojure、Haskell、Ruby、Scala 在 bug fix 的 commits 的数明显要少很多。</p><p>下图是各个语言出 bug 的情况。如果你看到是正数，说明高于平均水平，如果你看到是负数，则是低于平均水平。</p><p>第二个结论是，函数式编程语言的 bug 明显比大多数其它语言的要好很多。有隐式类型转换的语言明显产生的 bug 数要比强类型的语言要少很多。函数式的静态类型的语言要比函数式的动态类型语言的程序出 bug 的可能性要小很多。</p><p>第三，研究者想搞清是否 bug 数会和软件的领域相关。比如，业务型的，中间件型、框架、lib，或是数据库。研究表明，并没有什么相关性。下面这个图是各个语言在不同领域的 bug 率。</p><p>第四，研究人员想搞清楚 bug 的类型是否会和语言有关系。的确如此，bug 的类型和语言是强相关性的。下图是各个语言在不同的 bug 类型的情况。如果你看到的是正数，说明高于平均水平，如果你看到的是负数，则是低于平均水平。</p><p>也许，这份报告可以在你评估语言时有一定的借鉴作用。</p><p>电子书：《C++ 软件性能优化》</p><p>Optimizing Software in C++ - Agner Fog - PDF，C++ 软件性能优化，<a href="http://agner.org/optimize/optimizing_cpp.pdf" target="_blank" rel="noopener">http://agner.org/optimize/optimizing_cpp.pdf</a></p><p>这本书是所有 C++ 程序员都应该要读的一本书。这本书从事无巨细地从语言层面，编译器层面，内存访问层面，多线程层面，CPU 层面……讲述了如果对软件性能的调优。实在是一本经典的电子书。</p><p>Agner Fog 还写了其它几本和性能调优相关的书（你可以到这个网址下载：<a href="http://www.agner.org/optimize/" target="_blank" rel="noopener">http://www.agner.org/optimize/</a> ）</p><p>Optimizing subroutines in assembly language: An optimization guide for x86 platforms<br>The microarchitecture of Intel, AMD and VIA CPUs: An optimization guide for assembly programmers and compiler makers<br>Instruction tables: Lists of instruction latencies, throughputs and micro-operation breakdowns for Intel, AMD and VIA CPUs<br>Calling conventions for different C++ compilers and operating systems<br>我今天推荐的内容比较干，需要慢慢吸收体会，最好能借鉴到实践中用用，相信会有更多的感悟和收获。你还对哪些方面的内容感兴趣，欢迎留言给我。我后面收集推荐内容的时候，会有意识地关注整理。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">http://www.infoq.com/cn/articles/programer-knowledge?utm_source=infoq&amp;utm_medium=popular_widget&amp;utm_campaign=popular_content_list&amp;utm_content=homepage</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在每个月月中，我会推荐一些有价值的内容，供你参考。这个月，我将为你推荐五篇阅读文章，这五篇文章我觉得都是比较不错的经验总结，是我们每一个技术人员都需要知道的东西。它们分别是：&lt;/p&gt;
&lt;p&gt;Stack Overflow 上开出来的一个经典书书单；&lt;br&gt;美国某大学教授给计算
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JVM性能调优监控工具</title>
    <link href="https://yo42.github.io/2018/06/20/JVM%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/"/>
    <id>https://yo42.github.io/2018/06/20/JVM性能调优监控工具/</id>
    <published>2018-06-20T09:03:09.800Z</published>
    <updated>2018-06-20T23:52:29.855Z</updated>
    
    <content type="html"><![CDATA[<h5 id="以下是一些JVM性能调优监控工具"><a href="#以下是一些JVM性能调优监控工具" class="headerlink" title="以下是一些JVM性能调优监控工具"></a>以下是一些JVM性能调优监控工具</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps、jstack、jmap、jhat、jstat、hprof....</span><br></pre></td></tr></table></figure><h6 id="对于java程序-有时可能会碰到以下问题"><a href="#对于java程序-有时可能会碰到以下问题" class="headerlink" title="对于java程序,有时可能会碰到以下问题"></a>对于java程序,有时可能会碰到以下问题</h6><ul><li>OutOfMemoryError，内存不足</li><li>内存泄露</li><li>线程死锁</li><li>锁争用（Lock Contention）</li><li>Java进程消耗CPU过高</li><li>….</li></ul><p>通过一些监控工具去对java程序进行调优以及监控,在发生问题时使用工具去进行定位问题为后续的排障、修复问题提到了很好的辅助作用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;以下是一些JVM性能调优监控工具&quot;&gt;&lt;a href=&quot;#以下是一些JVM性能调优监控工具&quot; class=&quot;headerlink&quot; title=&quot;以下是一些JVM性能调优监控工具&quot;&gt;&lt;/a&gt;以下是一些JVM性能调优监控工具&lt;/h5&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
  </entry>
  
</feed>

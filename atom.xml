<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yo42</title>
  
  <subtitle>Dont&#39;t Panic,Do not go gentle into that good night~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yo42.github.io/"/>
  <updated>2018-07-22T13:22:19.342Z</updated>
  <id>https://yo42.github.io/</id>
  
  <author>
    <name>Yo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从容器到容器云</title>
    <link href="https://yo42.github.io/2018/07/22/%E4%BB%8E%E5%AE%B9%E5%99%A8%E5%88%B0%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    <id>https://yo42.github.io/2018/07/22/从容器到容器云/</id>
    <published>2018-07-22T13:09:46.079Z</published>
    <updated>2018-07-22T13:22:19.342Z</updated>
    
    <content type="html"><![CDATA[<p>2013年初，一个名字从云计算领域横空出世，并在整个IT行业激起千层浪。这就是Docker——一个孕育着新思想的“容器”。Docker选择容器作为核心和基础，依靠容器技术支撑的Docker迅速成为国内外各大云计算厂商以及开发者手中的至宝。在一片热火朝天之后，新的革命已经悄然来临。</p><h1 id="云计算平台"><a href="#云计算平台" class="headerlink" title="云计算平台"></a>云计算平台</h1><p>回首历史，云计算时代蕴育出了众多的云计算平台，虽然在服务类型或平台功能上有所差异，但它们的本质上如出一辙，都与NIST1对于云计算平台的定义有着密切的关系。</p><p>云计算是一种按使用量付费的模式，该模式提供可用的、便捷的、按需的网络访问， 纳入可配置的计算资源共享池（资源包括网络、服务器、存储、应用软件、服务），统一管理的资源能够被快速提供，大大减少了资源管理工作开销，你甚至可以再也不用理会那些令人头痛的传统服务供应商了。</p><p>经典云计算架构包括了IaaS（Infrastructure as a Service，基础设施即服务）、PaaS（Platform as a Service，平台即服务）、SaaS（Software as a Service，软件即服务）三层服务，如图1-1所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="云平台_simple.png" alt="图1-1 云平台经典架构" title="">                </div>                <div class="image-caption">图1-1 云平台经典架构</div>            </figure><ul><li>IaaS层为基础设施运维人员服务，提供计算、存储、网络及其他基础资源，云平台使用者可以在上面部署和运行包括操作系统和应用程序在内的任意软件，无需再为基础设施的管理而分心。</li><li>PaaS层为应用开发人员服务，提供支撑应用运行所需的软件运行时环境、相关工具与服务，如数据库服务、日志服务、监控服务等，让应用开发者可以专注于核心业务的开发。</li><li>SaaS层为一般为用户服务，提供了一套完整可用的软件系统，让一般用户无需关注技术细节，只需通过浏览器、应用客户端等方式就能使用部署在云上的应用服务。</li></ul><p>同时，随着计算机技术推陈出新，应用的规模愈发庞大，逻辑愈发复杂，迭代更新愈发频繁，应用开发所需的统一规范和原有开发模式杂乱无章成了追求进步的主要障碍。在尖锐的矛盾中，云时代应用生命周期管理机制（Application Lifecycle Management，ALM）和十二要素应用规范（The Twelve-Factor App）2应运而生。</p><p>所有理论设计和预想一定是美好的，只是对于一个新的理论而言，如何经受住实践的考验，并将美好的愿景转化为生产力才是重中之重。IaaS的发展主要以虚拟机为最小粒度的资源调度单位，出现了资源利用率低、调度分发缓慢、软件栈环境不统一等一堆问题。PaaS在IaaS基础上发展而来，众多PaaS已经意识到可以利用容器技术解决资源利用率问题，但是PaaS通常在应用架构选择、支持的软件环境服务方面有较大的限制，这带来了应用与平台无法解耦、应用运行时环境局限性强、运维人员控制力下降的问题。</p><p>可见，不论IaaS还是PaaS都有各自适用的场景，但依旧存在诸多缺陷，人们亟需一个真正可用的解决方案。</p><h1 id="容器，新的革命"><a href="#容器，新的革命" class="headerlink" title="容器，新的革命"></a>容器，新的革命</h1><p>每一场革命背后都有着深刻的历史背景和矛盾冲突，新陈代谢是历史的必然结果，新生取代陈旧得益于理念的飞跃和对时代发展需求的契合，很显然Docker抓住了这个契机。</p><p>Docker是什么？</p><p>基于官方的定义，Docker是以Docker容器为资源分割和调度的基本单位，封装整个软件运行时环境，为开发者和系统管理员设计的，用于构建、发布和运行分布式应用的平台。它是一个跨平台、可移植并且简单易用的容器解决方案。Docker的源代码托管在GitHub上，基于Go语言开发并遵从Apache 2.0协议。Docker可在容器内部快速自动化地部署应用，并通过内核技术（namespaces、cgroups等）为容器提供资源隔离与安全保障。</p><p>我们应该看看Docker的发展历程。</p><p>每一个传奇都需要一个这样的开头，很久很久以前：Docker项目由Solomon Hykes所带领的团队发起，在Docker公司的前身dotCloud内部启动孕育，代码托管于GitHub。</p><p>2013年11月：REHL 6.5正式版发布，集成了对Docker的支持，拉开了业界各大厂商竞相支持Docker的序幕。</p><p>2014年4月到6月：云技术市场上的三大巨头Amazon、Google及MicroSoft Azure相继宣布支持Docker，并着手开发基于容器的全新产品。</p><p>2014年6月：DockerCon 2014大会召开，会上来自Google、IBM、Amazon、Red Hat、Facebook及Twitter等全球领先企业的演讲嘉宾组成了豪华的阵容。此时， Docker自开源版本后又经历了15个月左右的飞速发展，Docker 1.0版本正式发布。</p><p>2014年8月：VMware宣布与Docker建立合作关系，标志了虚拟化市场形成了新的格局。</p><p>2014年10月：微软宣布将整合Docker进入下一代的Windows Server中。</p><p>2014年10月15日：Azure和Docker共同举办了Docker全球开发者大会，并宣布双方建立战略合作伙伴关系。</p><p>2014年底：Google率先发布容器引擎Google Container Engine（GCE），整合了Docker、Google自有容器技术和在DockerCon 2014大会上发布的Kubernetes，致力于为用户提供完善的基于Docker应用打造的云计算平台；Amazon发布EC2 Container Service（ECS），它是一项高度可扩展、高性能、免费的容器管理服务，并能够在托管的Amazon EC2实例集群上轻松地发布、管理和扩展Docker容器，使得Amazon Web Services（AWS）用户能够使用AWS上的容器轻松地运行和管理分布式应用。</p><p>2015年4月：Docker公司宣布完成了9500万美元的D轮融资。此前，他们已完成三轮融资，包括1500万美元的B轮融资及4000万美元的C轮融资。</p><p>2015年6月：Linux基金会携手AWS、思科、Docker、EMC、富士通、高盛、Google、惠普、华为、IBM、Intel等公司在DockerCon上共同宣布成立容器标准化组织OCP（Open Container Project），旨在实现容器标准化，为Docker生态圈内成员的协作互通打下良好的基础。该组织后更名为OCI（Open Container Initiative）。</p><p>2016年2月：Docker公司发布商业版容器及服务平台DDC（Docker Datacenter），迈出了Docker商业化的重要一步。</p><p>截至2016年6月：GitHub中Docker的贡献者超过千人，被关注和喜爱（star）多达三万两千余次（相比之下，此时Linux源码多年来积累的被关注次数仅为两万两千余次），并有九千多个开发分支（fork），Docker成为了GitHub上排名前20的明星项目。</p><p>Docker官方存储应用镜像的容器仓库也获得了大量开发者支持，其镜像仓库里已有超过12万个不同应用功能的公共镜像。最受欢迎的Ubuntu、MySQL、Nginx、WordPress镜像，下载量已超过千万次。这些数字还在不断地增长！</p><p>在国内一线城市，几乎每一两周就有一场关于Docker的讨论大会，Docker永远不会让你孤独。</p><p>在从此以后的未来，以Docker为代表的容器技术已经给云计算乃至整个IT界带来了深远的影响，这是一次真正的计算机技术革命，来吧，拥抱变化！</p><p>一个软件项目成功与否的标志是看其是否能够带动一个生态系统的发展，以Docker为代表的容器技术显然做到了这一点。容器技术的快速普及促进了围绕容器技术的相关项目日臻丰富和完善，容器本身的功能和易用性也随之增加。反过来，容器技术的迅猛发展也与其强大的生态系统息息相关。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Docker.png" alt="图1-3 容器技术生态系统（不完全统计" title="">                </div>                <div class="image-caption">图1-3 容器技术生态系统（不完全统计</div>            </figure><p>从图1-3可以看出，容器技术的生态系统自下而上分别覆盖了IaaS层和PaaS层所涉及的各类问题，包括资源调度、编排、部署、监控、配置管理、存储网络管理、安全、容器化应用支撑平台等。除了基于容器技术解决构建分布式平台无法回避的经典问题，容器技术主要带来了以下几点好处。</p><ul><li>持续部署与测试。容器消除了线上线下的环境差异，保证了应用生命周期的环境一致性和标准化。开发人员使用镜像实现标准开发环境的构建，开发完成后通过封装着完整环境和应用的镜像进行迁移，由此，测试和运维人员可以直接部署软件镜像来进行测试和发布，大大简化了持续集成、测试和发布的过程。</li><li>跨云平台支持。容器带来的最大好处之一就是其适配性，越来越多的云平台都支持容器，用户再也无需担心受到云平台的捆绑，同时也让应用多平台混合部署成为可能。目前支持容器的IaaS云平台包括但不限于亚马逊云平台（AWS）、Google云平台（GCP）、微软云平台（Azure）、OpenStack等，还包括如Chef、Puppet、Ansible等配置管理工具。</li><li>环境标准化和版本控制。基于容器提供的环境一致性和标准化，你可以使用Git等工具对容器镜像进行版本控制，相比基于代码的版本控制来说，你还能够对整个应用运行环境实现版本控制，一旦出现故障可以快速回滚。相比以前的虚拟机镜像，容器压缩和备份速度更快，镜像启动也像启动一个普通进程一样快速。</li><li>高资源利用率与隔离。容器没有管理程序的额外开销，与底层共享操作系统，性能更加优良，系统负载更低，在同等条件下可以运行更多的应用实例，可以更充分地利用系统资源。同时，容器拥有不错的资源隔离与限制能力，可以精确地对应用分配CPU、内存等资源，保证了应用间不会相互影响。</li><li>容器便携性与镜像。Linux容器虽然早在Linux 2.6版本内核已经存在，但是缺少容器的便携性，难以推广。容器在原有Linux容器的基础上进行大胆革新，为容器设定了一整套标准化的配置方法，将应用及其依赖的运行环境打包成镜像，真正实现了“构建一次，到处运行”的理念，大大提高了容器的便携性。</li><li>易于理解且易用。Docker的英文原意是处理集装箱的码头工人，标志是鲸鱼运送一大堆集装箱，集装箱就是容器，生动好记，易于理解。一个开发者可以在15分钟之内入门Docker并进行安装和部署，这是容器使用史上的一次飞跃。因为它的易用性，有更多的人开始关注容器技术，加速了容器标准化的步伐。</li><li>应用镜像仓库。Docker官方构建了一个镜像仓库，组织和管理形式类似于GitHub，其上已累积了成千上万的镜像。因为Docker的跨平台适配性，相当于为用户提供了一个非常有用的应用商店，所有人都可以自由地下载微服务组件，这为开发者提供了巨大便利。</li></ul><h1 id="进化：从容器到容器云"><a href="#进化：从容器到容器云" class="headerlink" title="进化：从容器到容器云"></a>进化：从容器到容器云</h1><p>容器为用户打开了一扇通往新世界的大门，真正进入这个容器的世界后，却发现新的生态系统如此庞大。在生产使用中，不论是个人还是企业，都会提出更复杂的需求。这时，我们需要众多跨主机的容器协同工作，需要支持各种类型的工作负载，企业级应用开发更是需要基于容器技术，实现支持多人协作的持续集成、持续交付平台。即使Docker只需一条命令便可启动一个容器，一旦试图将其推广到软件开发和生产环境中，麻烦便层出不穷，容器相关的网络、存储、集群、高可用等就是不得不面对的问题。从容器到容器云的进化应运而生。</p><p>什么是容器云？</p><p>容器云以容器为资源分割和调度的基本单位，封装整个软件运行时环境，为开发者和系统管理员提供用于构建、发布和运行分布式应用的平台。当容器云专注于资源共享与隔离、容器编排与部署时，它是一种IaaS；当容器云渗透到应用支撑与运行时环境时，它是一种PaaS。</p><p>容器云并不仅限于Docker，基于rkt容器的CoreOS项目也是容器云。Docker的出现让人们意识到了容器的价值，使得一直以来长期存在但并未被重视的轻量级虚拟化技术得到快速的发展和应用。鉴于Docker的里程碑意义，本书在讨论容器云时，都以分析Docker为支撑技术的容器云为主。</p><p>Docker公司本身的技术发展，亦是从一个容器管理工具一步步向容器云发展的历史过程。Docker最初发布时只是一个单机下的容器管理工具，随后Docker公司发布了Compose、Machine、Swarm等编排部署工具，并收购了Socketplane解决集群化后的网络问题。本书提及Docker时，一般指Docker容器核心，并不包含它向容器云迈进的一系列扩展工具，这些工具则将在本书第二部分进行分析。</p><p>除了Docker公司之外，业界许多云计算厂商也对基于Docker的容器云做了巨大的投入，以Docker容器为核心的第三方Docker容器云正在迎来春天。第6章将要介绍的Fleet、第7章将要介绍的Flynn和Deis以及第8章的Kubernetes，都是基于Docker技术构建的广为人知的容器云。</p><p>从容器到容器云是一种伟大的进化，并依旧在日积月累中不断前行，现在让我们一起进入Docker的世界，感受容器与容器云的魅力。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="Docker——容器与容器云（第2版）">http://www.ituring.com.cn/book/tupubarticle/8929</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2013年初，一个名字从云计算领域横空出世，并在整个IT行业激起千层浪。这就是Docker——一个孕育着新思想的“容器”。Docker选择容器作为核心和基础，依靠容器技术支撑的Docker迅速成为国内外各大云计算厂商以及开发者手中的至宝。在一片热火朝天之后，新的革命已经悄然
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DevOps And AIOps</title>
    <link href="https://yo42.github.io/2018/07/22/DevOps-And-AIOps/"/>
    <id>https://yo42.github.io/2018/07/22/DevOps-And-AIOps/</id>
    <published>2018-07-22T08:38:48.627Z</published>
    <updated>2018-07-22T10:56:09.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先论DevOps"><a href="#先论DevOps" class="headerlink" title="先论DevOps"></a>先论DevOps</h1><p>DevOps 是一天实践方法，在保证高质量的前提下缩短系统变更从提交到部署。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;先论DevOps&quot;&gt;&lt;a href=&quot;#先论DevOps&quot; class=&quot;headerlink&quot; title=&quot;先论DevOps&quot;&gt;&lt;/a&gt;先论DevOps&lt;/h1&gt;&lt;p&gt;DevOps 是一天实践方法，在保证高质量的前提下缩短系统变更从提交到部署。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深夜的口琴声</title>
    <link href="https://yo42.github.io/2018/07/22/%E6%B7%B1%E5%A4%9C%E7%9A%84%E5%8F%A3%E7%90%B4%E5%A3%B0/"/>
    <id>https://yo42.github.io/2018/07/22/深夜的口琴声/</id>
    <published>2018-07-22T08:08:24.355Z</published>
    <updated>2018-07-22T08:09:44.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深夜的口琴声"><a href="#深夜的口琴声" class="headerlink" title="深夜的口琴声"></a>深夜的口琴声</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/kelang2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/kelang1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深夜的口琴声&quot;&gt;&lt;a href=&quot;#深夜的口琴声&quot; class=&quot;headerlink&quot; title=&quot;深夜的口琴声&quot;&gt;&lt;/a&gt;深夜的口琴声&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于云主机系统的初始化</title>
    <link href="https://yo42.github.io/2018/07/02/%E5%85%B3%E4%BA%8E%E4%BA%91%E4%B8%BB%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://yo42.github.io/2018/07/02/关于云主机系统的初始化/</id>
    <published>2018-07-02T07:21:19.688Z</published>
    <updated>2018-07-02T07:50:27.484Z</updated>
    
    <content type="html"><![CDATA[<p>在许多IaaS平台中新购买的机器资源并不是开箱即用，一般需根业务进行定制，又或者你作为一个强迫症患者想让自己的机器变得更加完美，所以在购买完机器后进行初始化流程是很有必要滴。</p><p>机器初始化完成可以打包为云平台的镜像，方便后续的集成。</p><h1 id="云供应商：Ucloud"><a href="#云供应商：Ucloud" class="headerlink" title="云供应商：Ucloud"></a>云供应商：Ucloud</h1><h1 id="系统版本号：Ubuntu-16-04-LTS。"><a href="#系统版本号：Ubuntu-16-04-LTS。" class="headerlink" title="系统版本号：Ubuntu 16.04 LTS。"></a>系统版本号：Ubuntu 16.04 LTS。</h1><h1 id="关于设置机器的数据盘视情况而操作"><a href="#关于设置机器的数据盘视情况而操作" class="headerlink" title="关于设置机器的数据盘视情况而操作"></a>关于设置机器的数据盘视情况而操作</h1><h1 id="禁用系统自动更新："><a href="#禁用系统自动更新：" class="headerlink" title="禁用系统自动更新："></a>禁用系统自动更新：</h1><pre>sed -i '/Unattended-Upgrade/s/1/0/' /etc/apt/apt.conf.d/20auto-upgrades</pre><h1 id="设置别名："><a href="#设置别名：" class="headerlink" title="设置别名："></a>设置别名：</h1><pre>cat<<\eof> /etc/profile.d/Env.shalias grep='grep --color'alias fgrep='fgrep --color'alias pgrep='pgrep -l'alias l.='ls -d .* --color=auto'alias ll='ls -l --color=auto'alias ls='ls --color=auto'alias lt='ls -l --time-style=long-iso'HISTFILESIZE=50000HISTSIZE=10000HISTTIMEFORMAT="<%f %t="">: " export HISTTIMEFORMAT HISTSIZE HISTFILESIZEexport MYSQL_HISTFILE=/dev/nullEOF</%f></\eof></pre><h1 id="让su-登录到root时也可以使用别名设置："><a href="#让su-登录到root时也可以使用别名设置：" class="headerlink" title="让su 登录到root时也可以使用别名设置："></a>让su 登录到root时也可以使用别名设置：</h1><pre>cat<<\eof>> /etc/bash.bashrcif [ -d /etc/profile.d ]; then  for i in /etc/profile.d/*.sh; do    if [ -r $i ]; then      . $i    fi  done  unset ifiEOF</\eof></pre><h1 id="修改PS1等参数（和centos保持一致）："><a href="#修改PS1等参数（和centos保持一致）：" class="headerlink" title="修改PS1等参数（和centos保持一致）："></a>修改PS1等参数（和centos保持一致）：</h1><pre>vim /etc/skel/.bashrc # 注释第19、20行。（HISTSIZE=1000和HISTFILESIZE=2000）# 注释第62行，并在下方加入：PS1='${debian_chroot:+($debian_chroot)}[\u@\h \W]\$ '# 注释第89行。（alias ll='ls -alF'）vim /etc/bash.bashrc # 注释第19行，并在下方加入：PS1='${debian_chroot:+($debian_chroot)}[\u@\h \W]\$ 'vim /root/.bashrc# 注释第16、17行。# 注释第55行，并在下方加入：PS1='${debian_chroot:+($debian_chroot)}[\u@\h \W]\$ '# 注释第82行。</pre><h1 id="配置内核参数："><a href="#配置内核参数：" class="headerlink" title="配置内核参数："></a>配置内核参数：</h1><pre>sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="/& ipv6.disable=1 /' /etc/default/grubgrub-mkconfig -o /boot/grub/grub.cfg</pre><h1 id="删除废弃的设置："><a href="#删除废弃的设置：" class="headerlink" title="删除废弃的设置："></a>删除废弃的设置：</h1><pre>sed -i '/GREP_OPTIONS/d' /etc/profile</pre><h2 id="添加网络参数："><a href="#添加网络参数：" class="headerlink" title="添加网络参数："></a>添加网络参数：</h2><pre>cat<<eof> /etc/sysctl.d/Net.confnet.ipv4.ip_forward = 1net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables= 1net.ipv4.tcp_syncookies  = 1net.ipv4.tcp_syn_retries = 1net.ipv4.tcp_synack_retries  = 1net.ipv4.tcp_max_syn_backlog = 32768net.core.netdev_max_backlog  = 32768net.core.somaxconn = 32769EOF</eof></pre><h2 id="添加用户："><a href="#添加用户：" class="headerlink" title="添加用户："></a>添加用户：</h2><pre>/usr/sbin/useradd -m -s /bin/bash usertest</pre><h2 id="配置sudo："><a href="#配置sudo：" class="headerlink" title="配置sudo："></a>配置sudo：</h2><pre># 允许普通用户使用sudo docker 的部分命令retvar=0[ $retvar -eq 0 ] && cat<<\eof> /etc/sudoers.d/dockercilu ALL=(ALL) NOPASSWD:/usr/bin/docker,/usr/bin/docker-composeEOFretvar=$?[ $retvar -eq 0 ] && chmod 440 /etc/sudoers.d/docker</\eof></pre><h2 id="基础软件："><a href="#基础软件：" class="headerlink" title="基础软件："></a>基础软件：</h2><pre>apt-get update && apt-get install -y aptitude</pre><h2 id="时间同步："><a href="#时间同步：" class="headerlink" title="时间同步："></a>时间同步：</h2><h3 id="切换ntp到chrony："><a href="#切换ntp到chrony：" class="headerlink" title="切换ntp到chrony："></a>切换ntp到chrony：</h3><pre>aptitude remove  -y ntp && aptitude install -y chrony</pre><h3 id="配置chrony（根据-etc-ntp-conf中的内网IP来修改下方的2个内网IP地址）："><a href="#配置chrony（根据-etc-ntp-conf中的内网IP来修改下方的2个内网IP地址）：" class="headerlink" title="配置chrony（根据/etc/ntp.conf中的内网IP来修改下方的2个内网IP地址）："></a>配置chrony（根据/etc/ntp.conf中的内网IP来修改下方的2个内网IP地址）：</h3><pre>cat<<eof> /etc/chrony/chrony.confserver 10.13.255.1    iburst minpoll 3 maxpoll 4 preferserver 10.13.255.2    iburst minpoll 3 maxpoll 4 preferserver 182.92.12.11  iburst minpoll 3 maxpoll 4# ntp.ubuntu.comserver 91.189.91.157 iburst minpoll 3 maxpoll 4server 91.189.89.199 iburst minpoll 3 maxpoll 4stratumweight 0driftfile /var/lib/chrony/driftrtcsyncmakestep 10 3bindcmdaddress 127.0.0.1bindcmdaddress ::1keyfile /etc/chrony/chrony.keyscommandkey 1generatecommandkey#log    statisticslogdir /var/log/chronylogchange 0.1noclientlogEOF</eof></pre><h3 id="设置开机启动："><a href="#设置开机启动：" class="headerlink" title="设置开机启动："></a>设置开机启动：</h3><pre>/lib/systemd/systemd-sysv-install enable chrony</pre><h2 id="安装zabbix：待操作。"><a href="#安装zabbix：待操作。" class="headerlink" title="安装zabbix：待操作。"></a>安装zabbix：待操作。</h2><h2 id="添加docker支持："><a href="#添加docker支持：" class="headerlink" title="添加docker支持："></a>添加docker支持：</h2><pre>aptitude install -y docker.io docker-compose</pre><h2 id="先禁用docker随机启动："><a href="#先禁用docker随机启动：" class="headerlink" title="先禁用docker随机启动："></a>先禁用docker随机启动：</h2><pre>systemctl disable dockersystemctl stop docker</pre><h2 id="清理安装包："><a href="#清理安装包：" class="headerlink" title="清理安装包："></a>清理安装包：</h2><pre>aptitude clean</pre><h2 id="选择vim-tiny作为默认编辑器："><a href="#选择vim-tiny作为默认编辑器：" class="headerlink" title="选择vim.tiny作为默认编辑器："></a>选择vim.tiny作为默认编辑器：</h2><pre>sudo update-alternatives --config editor</pre><h2 id="配置SSHD："><a href="#配置SSHD：" class="headerlink" title="配置SSHD："></a>配置SSHD：</h2><pre>retvar=0if ! grep -q X_FLAG_X /etc/ssh/ssh_config ;then    [ $retvar -eq 0 ] \        && sed -e 's/^Port/#&/'                     \           -e 's/^UsePAM/#&/'                   \           -e 's/^Protocol/#&/'                 \           -e 's/^X11Forwarding/#&/'            \           -e 's/^PermitRootLogin/#&/'          \           -e 's/^AuthorizedKeysFile/#&/'       \           -e 's/^PubkeyAuthentication/#&/'     \           -e 's/^PermitEmptyPasswords/#&/'     \           -e 's/^GSSAPIAuthentication/#&/'     \           -e 's/^PasswordAuthentication/#&/'   \           -e 's/^GSSAPICleanupCredentials/#&/' \           -e 's/^ChallengeResponseAuthentication/#&/' \           /etc/ssh/sshd_config -i \        && cat <<\eof>> /etc/ssh/sshd_configPort     932Protocol 2PermitRootLogin        noPermitEmptyPasswords   noPasswordAuthentication noPubkeyAuthentication   yesUseLogin               yesAuthorizedKeysFile     .ssh/authorized_keysChallengeResponseAuthentication noUsePAM yesUseDNS noX11Forwarding noGSSAPIAuthentication noGSSAPICleanupCredentials noEOFretvar=$?    [ $retvar -eq 0 ] \        && sed -i 's/GSSAPIAuthentication/#&/' /etc/ssh/ssh_config \        && cat <<\eof>> /etc/ssh/ssh_config        Port 932        ForwardAgent yes        # X_FLAG_X #EOFretvar=$?fi</\eof></\eof></pre><h2 id="防火墙（具体规则还需根据实际情况进行修改）："><a href="#防火墙（具体规则还需根据实际情况进行修改）：" class="headerlink" title="防火墙（具体规则还需根据实际情况进行修改）："></a>防火墙（具体规则还需根据实际情况进行修改）：</h2><h3 id="禁用ufw："><a href="#禁用ufw：" class="headerlink" title="禁用ufw："></a>禁用ufw：</h3><pre>systemctl stop ufwsystemctl disable ufwsystemctl mask ufw</pre><h3 id="安装（默认是交互式，保存IPv4的规则就可以了）："><a href="#安装（默认是交互式，保存IPv4的规则就可以了）：" class="headerlink" title="安装（默认是交互式，保存IPv4的规则就可以了）："></a>安装（默认是交互式，保存IPv4的规则就可以了）：</h3><pre>aptitude install iptables-persistent</pre><h3 id="iptables配置文件："><a href="#iptables配置文件：" class="headerlink" title="iptables配置文件："></a>iptables配置文件：</h3><pre>cat<<\eof> /etc/iptables/rules.v4*filter:INPUT   ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT  ACCEPT [0:0]-A INPUT -p icmp --icmp-type timestamp-request -j DROP-A INPUT -p icmp --icmp-type timestamp-reply   -j DROP-A INPUT -p icmp -j ACCEPT-A INPUT -i lo   -j ACCEPT-A INPUT -i docker0 -j ACCEPT-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -s 10.23.0.0/16       -m comment --comment "intranet" -p tcp -m tcp -j ACCEPT-A INPUT -p tcp -m tcp -m multiport --dports 80,443 -m comment --comment "all-user" -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT-A FORWARD -i docker0 ! -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT-A FORWARD -i docker0   -o docker0 -j ACCEPT# intranet-A FORWARD -d 10.25.0.0/16       -i docker0 ! -o docker0 -j ACCEPT# apt-get mirrors.163.com-A FORWARD -d 123.58.173.185/32 -i docker0 ! -o docker0 -j ACCEPT-A FORWARD -d 123.58.173.186/32 -i docker0 ! -o docker0 -j ACCEPT# dns server-A FORWARD -d 10.23.255.1/32     -i docker0 ! -o docker0 -j ACCEPT-A FORWARD -d 10.23.255.2/32     -i docker0 ! -o docker0 -j ACCEPT-A FORWARD -d 114.114.114.114/32 -i docker0 ! -o docker0 -j ACCEPT# drop all-A FORWARD -i docker0 ! -o docker0 -j DROP-A FORWARD -j DROP-A OUTPUT -p icmp -j ACCEPT-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A OUTPUT -d 10.23.0.0/16       -m comment --comment "intranet" -p tcp -m tcp -j ACCEPT-A OUTPUT -d 10.23.255.1/32     -m comment --comment "dns" -p udp -m udp --dport 53  -j ACCEPT-A OUTPUT -d 10.23.255.1/32     -m comment --comment "dns" -p udp -m udp --dport 53  -j ACCEPT-A OUTPUT -d 114.114.114.114/32 -m comment --comment "dns" -p udp -m udp --dport 53  -j ACCEPT-A OUTPUT -d 10.23.255.101/32   -m comment --comment "ntp" -p udp -m udp --dport 123 -j ACCEPT-A OUTPUT -d 10.23.255.102/32   -m comment --comment "ntp" -p udp -m udp --dport 123 -j ACCEPT-A OUTPUT -d 182.92.12.11/32    -m comment --comment "ntp" -p udp -m udp --dport 123 -j ACCEPT-A OUTPUT -o lo      -j ACCEPT-A OUTPUT -o docker0 -j ACCEPT-A OUTPUT -j REJECT --reject-with icmp-host-prohibitedCOMMITEOF</\eof></pre><h2 id="禁用无用的服务："><a href="#禁用无用的服务：" class="headerlink" title="禁用无用的服务："></a>禁用无用的服务：</h2><p><pre><br>systemctl stop    iscsid<br>systemctl disable iscsid<br>systemctl mask    iscsid<br></pre></p><h2 id="重启系统：确保配置正常。"><a href="#重启系统：确保配置正常。" class="headerlink" title="重启系统：确保配置正常。"></a>重启系统：确保配置正常。</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在许多IaaS平台中新购买的机器资源并不是开箱即用，一般需根业务进行定制，又或者你作为一个强迫症患者想让自己的机器变得更加完美，所以在购买完机器后进行初始化流程是很有必要滴。&lt;/p&gt;
&lt;p&gt;机器初始化完成可以打包为云平台的镜像，方便后续的集成。&lt;/p&gt;
&lt;h1 id=&quot;云供
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>许三观卖血记</title>
    <link href="https://yo42.github.io/2018/06/25/%E8%AE%B8%E4%B8%89%E8%A7%82%E5%8D%96%E8%A1%80%E8%AE%B0/"/>
    <id>https://yo42.github.io/2018/06/25/许三观卖血记/</id>
    <published>2018-06-25T14:32:47.833Z</published>
    <updated>2018-06-26T01:49:26.230Z</updated>
    
    <content type="html"><![CDATA[<p>《许三观卖血记》是余华1995年创作的一部长篇小说。<br>小说讲述了一个名叫许三观的屁民通过卖血而活着的故事。</p><p>许三观是一名在城里丝厂的送蚕工，他从四叔的口中得知“没卖过血的人身子骨都不结实，娶不到女人”的规矩。</p><p>跟着根龙与啊方，许三观开始了他的卖血之路。<br>他得知卖血前需要喝大量的水</p><p> 阿方在下面说：“我们早晨什么都没吃，就喝了几碗水，现在又喝了几碗，到了城里还得再喝几碗，一直要喝到肚子又胀又疼，牙根一阵阵发酸……这水喝多了，人身上的血也会跟着多起来，水会浸到血里去的……”</p><pre><code>“这水浸到了血里，人身上的血是不是就淡了？”“淡是淡了，可身上的血就多了。”</code></pre><p>卖血后便到胜利的饭店</p><p>   然后，他们来到了那家名叫胜利的饭店，饭店是在一座石桥的桥堍，它的屋顶还没有桥高，屋顶上长满了杂草，在屋檐前伸出来像是脸上的眉毛。饭店看上去没有门，门和窗连成一片，中间只是隔了两根木条，许三观他们就是从旁边应该是窗户的地方走了进去，他们坐在了靠窗的桌子前，窗外是那条穿过城镇的小河，河面上漂过去了几片青菜叶子。</p><pre><code>阿方对着跑堂的喊道：“一盘炒猪肝，二两黄酒，黄酒给我温一温。”根龙也喊道：“一盘炒猪肝，二两黄酒，我的黄酒也温一温。”许三观看着他们喊叫，觉得他们喊叫时手拍着桌子很神气，他也学他们的样子，手拍着桌子喊道：“一盘炒猪肝，二两黄酒，黄酒……温一温。”</code></pre><p><br>黄血活血，猪肝补血这对许三观来说兴许是一剂良药。</p><p>每卖一次血可以赚35元，许三观感到颇为高兴便说：</p><p> “四叔，我想找个女人去结婚了，四叔，这两天我一直在想这卖血挣来的三十五块钱怎么花？我想给爷爷几块钱，可是爷爷太老了，爷爷都老得不会花钱了。我还想给你几块钱，我爹的几个兄弟里，你对我最好，四叔，可我又舍不得给你，这是我卖血挣来的钱，不是我卖力气挣来的钱，我舍不得给。四叔，我刚才丫起来的时候突然想到娶女人了。四叔，我卖血挣来的钱总算是花对地方了……四叔，我吃了一肚子的瓜、怎么像是喝了一斤酒似的，四叔，我的脸，我的脖子我的脚底，我的手掌，都在一阵阵地发烧。</p><p>后面许三观便娶了城内出名的”油条西施“许玉兰为妻子。</p><p>文中有趣的摘抄(读到这里着实让人感到无比的滑稽:))：</p><p>  第二天下午，许三观把许玉兰带到了那家胜利饭店，坐在靠窗的桌子旁，也就是他和阿方、根龙吃炒猪肝喝黄酒的桌前，他像阿方和根龙那样神气地拍着桌子，对跑堂的叫道：</p><p><strong>“来一客小笼包子。”<br>   他请许玉兰吃了一客小笼包子，吃完小笼包子后，许玉兰说她还能吃一碗馄饨，许三观又拍起了桌子：    “来一碗馄饨。”<br>   许玉兰这天下午笑眯眯地还吃了话梅，吃了话梅以后说嘴咸，又吃了糖果，吃了糖果以后说口渴，<br>   许三观就给她买了半个西瓜，她和许三观站在了那座木桥上，她笑眯眯地把半个西瓜全吃了下去，然后她笑眯眯地打起了嗝。当她的身体一抖一抖地打嗝时，许三观数着手指开始算一算这个下午花了多少钱。<br>   “小笼包子两角四分，馄饨九分钱，话梅一角，糖果买了两次共计两角三分，西瓜半个有三斤四两花了一角七分，总共是八角三分钱……你什么时候嫁给我？”<br>    “啊呀，”许玉兰惊叫起来，“你凭什么要我嫁给你”    许三观说：“你花掉了我八角三分钱。”<br>    “是你自己请我吃的，”许玉兰打着嗝说，“我还以为是白吃的呢，你又没说吃了你的东西就要嫁给你……”<br>    “嫁给我有什么不好？”许三观说，“你嫁给我以后，我会疼你护着你，我会经常让你一个下午就吃掉八角三分钱。”<br>      “啊呀，”许玉兰叫了起来，“要是我嫁给了你，我就不会这么吃了，我嫁给你以后就是吃自己的了，我舍不得……早知道是这样，我就不吃了。”<br>      “你也不用后悔，”许三观安慰她，“你嫁给我就行了。”<br>      “我不能嫁给你，我有男朋友了，我爹也不会答应的，我爹喜欢何小勇……”<br>      于是，许三观就提着一瓶黄酒一条大前门香烟，来到许玉兰家，他在许玉兰父亲的对面坐了下来，将黄酒和香烟推了过去，然后滔滔不绝地说了起来：    “你知道我爹吧？我爹就是那个有名的许木匠，他老人家活着的时候专给城里大户人家做活，他做出来的桌于谁也比不上，伸手往桌面上一摸，就跟摸在绸缎上一样光滑。你知道我妈吧？我妈就是金花，你知道金花吗？就是那个城西的美人，从前别人都叫她城西美人，我爹死了以后她嫁给了一个国民党连长，后来跟着那个连长跑了。我爹只有我这么一个儿子，我妈和那个连长是不是生了我就不知道了。我叫许三观，我两个伯伯的儿子比我大，我在许家排行老三，所以我叫许三观，我是丝厂的工人，我比何小勇大两岁，比他早三年参加工作，我的钱肯定比他多，他想娶许玉兰还得筹几年钱，我结婚的钱都准备好了，我是万事皆备只欠东风了。”<br>      许三观又说：“你只有许玉兰一个女儿，许玉兰要是嫁给了何小勇，你家就断后了，生出来的孩子不管是男是女，都得姓何。要是嫁给了我，我本来就姓许，生下来的孩子也不管是男是女，都姓许，你们许家后面的香火也就接上了，说起来我娶了许玉兰，其实我就和倒插门的女婿一样。许玉兰的父亲听到最后那几句话，嘿嘿笑了起来，他看着许三观，手指在桌上笃笃地敲着，他说：”这一瓶酒，这一条香烟，我收下了，你说得对，我女儿要是嫁给了何小勇，我许家就断后了。我女儿要是嫁给了你，我们两个许家的香火都接上了。”</strong></p><p>不久，许三观便有了三个儿子，取名分别为：许一乐、许二乐、许三乐</p><pre><code>许玉兰在五年时间里生下了三个儿子，许三观给他三个儿子取名为许一乐，许二乐，许三乐。有一天，在许三乐一岁三个月的时候，许玉兰揪住许三观的耳朵问他：“我生孩子时，你是不是在外面哈哈大笑？”“我没有哈哈大笑，”许三观说，“我只是嘿嘿地笑，没有笑出声音。”“啊呀，”许玉兰叫道，“所以你让三个儿子叫一乐，二乐，三乐，我在产房里疼了一次，二次，三次；你在外面乐了一次，二次，三次，是不是？”</code></pre><p>后续的故事，作者余华用诙谐幽默的方式来描写一个小人物许三观的家庭生活，阐释了这个社会的荒谬。</p><p>卖血是为了娶亲，是为了治重病的儿子，是为了郑重款待宾客，是为了生存，但最终还是为了爱和可笑的尊严。</p><p>再谈历史背景：<br>从余华的《活着》、《许三观卖血记》故事的历史背景都是中国近代史。</p><p>1、1958年的人民公社、大跃进和大炼钢铁。<br>2、接下来一两年的天灾人祸导致的全国性饥荒。<br>3、文化大革命，知青下山。<br>…..</p><p><strong>“你知道吗？为什么工厂停工了、商店关门了、学校不上课、你也用不着去炸抽条了？为什么有人被吊在了树上、有人被关进了牛棚、有人被活活打死？你知道吗？为什么毛主席一说话，就有人把他的话编成了歌，就有人把他的话刷到了墙上、刷到了地上、刷到了汽车上和轮船上、床单上和枕巾上、杯子上和锅上，连厕所的墙上和痰盂上都有。毛主席的名字为什么会这么长予你听着：伟大的领袖伟大的导师伟大的统帅伟大的舵手毛主席万岁万岁万万岁。一共有三十个字，这些都要一口气念下来，中间不能换气。你知道这是为什么？因为文化大革命来了。”</strong></p><p>这样的一番阐释从许三观口中说出来，既符合人物的身份和层次，又启发读者自己的思考。许三观的逻辑和认识水平并不一定就是正确的，但那是真正身处其中的人物会说出的话，这样的话让读者信服的同时也给读者自己想象和思考的空间：文化大革命不只是发生在中国的那一场灾难，而是整个人类都会面临的一种变态与暴力的可能，因而许三观们面对的不仅仅是他个人的命运，而是有可能发生在每个人身上的命运。</p><p>韩国电影《<a href="https://movie.douban.com/subject/11540651/" target="_blank" rel="noopener">许三观</a>》正是根据余华的小说《许三观卖血记》而改编</p><p>再附上网友同样以诙谐幽默手法改编的《<a href="https://www.v2ex.com/t/454569#reply36" target="_blank" rel="noopener">许三观卖码记</a>》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《许三观卖血记》是余华1995年创作的一部长篇小说。&lt;br&gt;小说讲述了一个名叫许三观的屁民通过卖血而活着的故事。&lt;/p&gt;
&lt;p&gt;许三观是一名在城里丝厂的送蚕工，他从四叔的口中得知“没卖过血的人身子骨都不结实，娶不到女人”的规矩。&lt;/p&gt;
&lt;p&gt;跟着根龙与啊方，许三观开始了他
      
    
    </summary>
    
      <category term="Books" scheme="https://yo42.github.io/categories/Books/"/>
    
    
      <category term="Books" scheme="https://yo42.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>JumpServer 运维安全审计系统</title>
    <link href="https://yo42.github.io/2018/06/23/JumpServer-%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1%E7%B3%BB%E7%BB%9F/"/>
    <id>https://yo42.github.io/2018/06/23/JumpServer-运维安全审计系统/</id>
    <published>2018-06-23T10:31:43.211Z</published>
    <updated>2018-07-22T08:16:54.622Z</updated>
    
    <content type="html"><![CDATA[<p>目前，使用的是SSHConfig+ansible的模式进行管控各开发&amp;运维人员的公钥，以及云主机的登录。</p><p>现阶段属于纯跳版机模式，并没有审计功能，存在安全隐患，对于人员离职权限的回收不够彻底，公钥的分发不够方便，开发&amp;运维人员都混用一个账号进行登录，没有审计功能，粗放式权限管理，外放了root密码。</p><p>综合上述缺点，需要一个审计系统。</p><p>目前业界比较良心的开源审计系统<br><a href="http://www.jumpserver.org/" target="_blank" rel="noopener">http://www.jumpserver.org/</a></p><p>其实现在许多云供应商都在推自己的审计系统产品，有些也是基于jumpserver进行二次开发的。</p><p>堡垒机不仅集中管理和分配全部账号，更重要的是能对运维/开发人员的运维操作进行严格审计和权限控制，确保运维的安全合规和运维/开发人员的最小化权限管理。</p><p>从实际应用来看，堡垒机主要管控企业的服务器资源。</p><p>1、JumpServer的安装:略(参考官方文档),后续可能会进行Docker化的定制(coco-ssh server,jumpserver,luna web terminal插件)。</p><h1 id="梳理权限与规则"><a href="#梳理权限与规则" class="headerlink" title="梳理权限与规则:"></a>梳理权限与规则:</h1><p>JumpServer用户管理:</p><ol><li>梳理各项目组的开发与运维人员的列表，以项目名创建组，通过手工的方式进行开发人员与运维人员的编制。</li><li>用户是授权和登陆的主体，将来为每个员工建立一个账户，用来登录跳板机，将资产授权给该用户，查看用户登陆记录命令历史等。创建用户，例如:以开发者张三的名称创建用户，后续张三将以dev的身份进行资产的登录如 web, sa, dba,dev,oc(<code>ssh web@some-host</code>)</li><li>管理用户是服务器的root，或拥有 NOPASSWD: ALL sudo权限的用户，Jumpserver使用该用户来 <code>推送系统用户</code>、<code>获取资产硬件信息</code>等，大概会使用root进行管理，采用密码管理的方式。</li><li>系统用户是服务器上建立的一些真实存在的可以ssh登陆的用户,如 dev,sa, dba等，系统用户可使用jumpserver推送到服务器上，也可以利用自己公司的工具进行推送，授权时将用户、资产、系统用户关联起来，则表明用户有权限登陆该资产的这个系统用户 如：用户 小明 以 dev 系统用户登录 172.16.1.1资产,简单理解就是 将某个资产上的某个系统用户映射给这个用户登录。</li><li>角色为用户的人员禁止授权su权限,不提供root密码就没有su权限，需要时再申请，sudo su。</li><li>创建系统用户如Dev和oc时需保存密钥。</li></ol><h1 id="JumpServer资产管理"><a href="#JumpServer资产管理" class="headerlink" title="JumpServer资产管理:"></a>JumpServer资产管理:</h1><ol><li>区分不同云供应商，每个节点对应每个云供应商、项目，节点下再区分正式服、辅助支撑服。</li></ol><h1 id="测试环境的部署"><a href="#测试环境的部署" class="headerlink" title="测试环境的部署:"></a>测试环境的部署:</h1><ol><li>选择一个云供应商和地区进行部署一台JumpServer服务器，以及一些测试服。</li><li>购买新资产进行自动添加还需参考JumpServer提供的API实现自动化。</li></ol><h1 id="测试使用REST-API-进行资产的自动添加资产以及权限管理"><a href="#测试使用REST-API-进行资产的自动添加资产以及权限管理" class="headerlink" title="测试使用REST API 进行资产的自动添加资产以及权限管理"></a>测试使用REST API 进行资产的自动添加资产以及权限管理</h1><h1 id="jumpserver-有集成的sdk可以研究下"><a href="#jumpserver-有集成的sdk可以研究下" class="headerlink" title="jumpserver 有集成的sdk可以研究下"></a>jumpserver 有集成的sdk可以研究下</h1><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><pre>curl -XPOST -d  "username=admin;password=xxxxx" http://192.168.9.250/api/users/v1/token/</pre><h2 id="查询用户可见资产"><a href="#查询用户可见资产" class="headerlink" title="查询用户可见资产"></a>查询用户可见资产</h2><pre>curl -X GET --header 'Content-Type: application/json' --header 'Accept: application/json' -H 'Authorization: Bearer b5abc7c5b5cf4be780370d607181c5fa' 'http://192.168.9.250/api/assets/v1/assets/'</pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h1><pre>1、用户登录curl -XPOST -d 'username=admin;password=admin' http://192.168.188.40/api/users/v1/token/{"Token":"14a9f25397444abb8666c9fa00c294c9","Keyword":"Bearer"}2、获取所有的用户curl -H 'Authorization: Bearer 14a9f25397444abb8666c9fa00c294c9' -XGET http://192.168.188.84:8080/api/users/v1/users/3、创建用户组curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -H 'Authorization: Bearer 14a9f25397444abb8666c9fa00c294c9' -d '{"id":"1162e7a4-90f6-4e5e-b7cf-14581adb7621","is_discard": false,"discard_time": "","name":"epointgroup","comment":"","created_by": "administrator","date_created":"2018-06-06 06:03:03 +0000","discard_time":"2018-06-11 06:03:03 +0000"}' 'http://192.168.188.84/api/users/v1/groups/'4、创建用户并设置用户组curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -H 'Authorization: Bearer 14a9f25397444abb8666c9fa00c294c9' 'http://192.168.188.84/api/users/v1/users/' -d '{"id": "13f1432d-9a8c-4d83-aad9-c3177e3a387d","groups": ["1162e7a4-90f6-4e5e-b7cf-14581adb7620"],"last_login": "2018-05-19 06:03:03 +0000","is_active": true,"date_joined": "2018-06-06 06:03:03 +0000","username": "ijarvis","name": "ijarvis","email": "ijarvis@sina.com","role": "Admin","avatar": null,"wechat": "","phone": "","otp_level": 0,"comment": "","is_first_login": true,"date_expired": "2088-05-19 06:03:03 +0000","created_by": "2018-05-19 06:03:03 +0000"}'5、 获取所有资产列表curl -X GET --header 'Content-Type: application/json' --header 'Accept: application/json' -H 'Authorization: Bearer 14a9f25397444abb8666c9fa00c294c9' 'http://192.168.188.84/api/assets/v1/assets/'6、创建用户资产curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -H 'Authorization: Bearer 14a9f25397444abb8666c9fa00c294c9' -d '{"id": "9f7a3cd5-b3be-4a4f-a7f6-0cbcb8529e71","ip": "192.168.186.66","hostname": "Hadoop_186_66","port": 22,"platform": "Linux","is_active": true,"public_ip": null,"created_by": null,"comment": "","admin_user": "06fe163e-aacd-48ce-a7a7-a15800587b99", "nodes": ["7c0b0eda-8555-42e4-9205-992957c46d56"]}' 'http://192.168.188.84/api/assets/v1/assets/'</pre><h1 id="逻辑图"><a href="#逻辑图" class="headerlink" title="逻辑图:"></a>逻辑图:</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jms.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jms2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">https://www.zhihu.com/question/21036511</a></li><li><a href="">http://www.jumpserver.org/</a></li><li><a href="">https://github.com/jumpserver/jumpserver</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前，使用的是SSHConfig+ansible的模式进行管控各开发&amp;amp;运维人员的公钥，以及云主机的登录。&lt;/p&gt;
&lt;p&gt;现阶段属于纯跳版机模式，并没有审计功能，存在安全隐患，对于人员离职权限的回收不够彻底，公钥的分发不够方便，开发&amp;amp;运维人员都混用一个账号进行
      
    
    </summary>
    
      <category term="Technology" scheme="https://yo42.github.io/categories/Technology/"/>
    
    
      <category term="Technology" scheme="https://yo42.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>[转载]程序员技术练级攻略</title>
    <link href="https://yo42.github.io/2018/06/21/%E8%BD%AC%E8%BD%BD-%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8A%80%E6%9C%AF%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5/"/>
    <id>https://yo42.github.io/2018/06/21/转载-程序员技术练级攻略/</id>
    <published>2018-06-21T04:58:41.000Z</published>
    <updated>2018-06-23T04:53:38.778Z</updated>
    
    <content type="html"><![CDATA[<h6 id="转载自左耳朵耗子的博文-感觉不错就记录下吧"><a href="#转载自左耳朵耗子的博文-感觉不错就记录下吧" class="headerlink" title="转载自左耳朵耗子的博文,感觉不错就记录下吧"></a>转载自左耳朵耗子的博文,感觉不错就记录下吧</h6><p>前言<br>你是否觉得自己从学校毕业的时候只做过小玩具一样的程序？走入职场后哪怕没有什么经验也可以把以下这些课外练习走一遍（朋友的抱怨：学校课程总是从理论出发，作业项目都看不出有什么实际作用，不如从工作中的需求出发）</p><p>建议：</p><p>不要乱买书，不要乱追新技术新名词，基础的东西经过很长时间积累而且还会在未来至少10年通用。<br>回顾一下历史，看看历史上时间线上技术的发展，你才能明白明天会是什么样。<br>一定要动手，例子不管多么简单，建议至少自己手敲一遍看看是否理解了里头的细枝末节。<br>一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。<br>注：你也许会很奇怪为什么下面的东西很偏Unix/Linux，这是因为我觉得Windows下的编程可能会在未来很没有前途，原因如下：</p><p>现在的用户界面几乎被两个东西主宰了，1）Web，2）移动设备iOS或Android。Windows的图形界面不吃香了。<br>越来越多的企业在用成本低性能高的Linux和各种开源技术来构架其系统，Windows的成本太高了。<br>微软的东西变得太快了，很不持久，他们完全是在玩弄程序员。详情参见《Windows编程革命史》<br>所以，我个人认为以后的趋势是前端是Web+移动，后端是Linux+开源。开发这边基本上没Windows什么事。</p><p>启蒙入门<br>1、 学习一门脚本语言，例如Python/Ruby</p><p>可以让你摆脱对底层语言的恐惧感，脚本语言可以让你很快开发出能用得上的小程序。实践项目:</p><p>处理文本文件，或者csv (关键词 python csv, python open, python sys) 读一个本地文件，逐行处理（例如 word count，或者处理log）<br>遍历本地文件系统 (sys, os, path)，例如写一个程序统计一个目录下所有文件大小并按各种条件排序并保存结果<br>跟数据库打交道 (python sqlite)，写一个小脚本统计数据库里条目数量<br>学会用各种print之类简单粗暴的方式进行调试<br>学会用Google (phrase, domain, use reader to follow tech blogs)<br>为什么要学脚本语言，因为他们实在是太方便了，很多时候我们需要写点小工具或是脚本来帮我们解决问题，你就会发现正规的编程语言太难用了。</p><p>2、 用熟一种程序员的编辑器(不是IDE) 和一些基本工具</p><p>Vim / Emacs / Notepad++，学会如何配置代码补全，外观，外部命令等。<br>Source Insight (或 ctag)<br>使用这些东西不是为了Cool，而是这些编辑器在查看、修改代码/配置文章/日志会更快更有效率。</p><p>3、 熟悉Unix/Linux Shell和常见的命令行</p><p>如果你用windows，至少学会用虚拟机里的linux， vmware player是免费的，装个Ubuntu吧<br>一定要少用少用图形界面。<br>学会使用man来查看帮助<br>文件系统结构和基本操作 ls/chmod/chown/rm/find/ln/cat/mount/mkdir/tar/gzip …<br>学会使用一些文本操作命令 sed/awk/grep/tail/less/more …<br>学会使用一些管理命令 ps/top/lsof/netstat/kill/tcpdump/iptables/dd…<br>了解/etc目录下的各种配置文章，学会查看/var/log下的系统日志，以及/proc下的系统运行信息<br>了解正则表达式，使用正则表达式来查找文件。<br>对于程序员来说Unix/Linux比Windows简单多了。（参看我四年前CSDN的博文《其实Unix很简单》）学会使用Unix/Linux你会发现图形界面在某些时候实在是太难用了，相当地相当地降低工作效率。</p><p>4、 学习Web基础（HTML/CSS/JS) + 服务器端技术 (LAMP)</p><p>未来必然是Web的世界，学习WEB基础的最佳网站是W3School。</p><p>学习HTML基本语法<br>学习CSS如何选中HTML元素并应用一些基本样式（关键词：box model）<br>学会用  Firefox + Firebug 或 chrome 查看你觉得很炫的网页结构，并动态修改。<br>学习使用Javascript操纵HTML元件。理解DOM和动态网页（<a href="http://oreilly.com/catalog/9780596527402" target="_blank" rel="noopener">http://oreilly.com/catalog/9780596527402</a>) 网上有免费的章节，足够用了。或参看 DOM 。<br>学会用  Firefox + Firebug 或 chrome 调试Javascript代码（设置断点，查看变量，性能，控制台等）<br>在一台机器上配置Apache 或 Nginx<br>学习PHP，让后台PHP和前台HTML进行数据交互，对服务器相应浏览器请求形成初步认识。实现一个表单提交和反显的功能。<br>把PHP连接本地或者远程数据库 MySQL（MySQL 和 SQL现学现用够了）<br>跟完一个名校的网络编程课程（例如：<a href="http://www.stanford.edu/~ouster/cgi-bin/cs142-fall10/index.php" target="_blank" rel="noopener">http://www.stanford.edu/~ouster/cgi-bin/cs142-fall10/index.php</a> ) 不要觉得需要多于一学期时间，大学生是全职一学期选3-5门课，你业余时间一定可以跟上<br>学习一个javascript库（例如jQuery 或 ExtJS）+  Ajax (异步读入一个服务器端图片或者数据库内容）+JSON数据格式。<br>HTTP: The Definitive Guide 读完前4章你就明白你每天上网用浏览器的时候发生的事情了(proxy, gateway, browsers)<br>做个小网站（例如：一个小的留言板，支持用户登录，Cookie/Session，增、删、改、查，上传图片附件，分页显示）<br>买个域名，租个空间，做个自己的网站。<br>进阶加深<br>1、 C语言和操作系统调用</p><p>重新学C语言，理解指针和内存模型，用C语言实现一下各种经典的算法和数据结构。推荐《计算机程序设计艺术》、《算法导论》和《编程珠玑》。<br>学习（麻省理工免费课程）计算机科学和编程导论<br>学习（麻省理工免费课程）C语言内存管理<br>学习Unix/Linux系统调用（Unix高级环境编程），，了解系统层面的东西。<br>用这些系统知识操作一下文件系统，用户（实现一个可以拷贝目录树的小程序）<br>用fork/wait/waitpid写一个多进程的程序，用pthread写一个多线程带同步或互斥的程序。多进程多进程购票的程序。<br>用signal/kill/raise/alarm/pause/sigprocmask实现一个多进程间的信号量通信的程序。<br>学会使用gcc和gdb来编程和调试程序（参看我的《用gdb调试程序》）<br>学会使用makefile来编译程序。（参看我的《跟我一起写makefile》）<br>IPC和Socket的东西可以放到高级中来实践。<br>学习Windows SDK编程（Windows 程序设计 ，MFC程序设计）<br>写一个窗口，了解WinMain/WinProcedure，以及Windows的消息机制。<br>写一些程序来操作Windows SDK中的资源文件或是各种图形控件，以及作图的编程。<br>学习如何使用MSDN查看相关的SDK函数，各种WM_消息以及一些例程。<br>这本书中有很多例程，在实践中请不要照抄，试着自己写一个自己的例程。<br>不用太多于精通这些东西，因为GUI正在被Web取代，主要是了解一下Windows 图形界面的编程。@virushuo 说：“ 我觉得GUI确实不那么热门了，但充分理解GUI工作原理是很重要的。包括移动设备开发，如果没有基础知识仍然很吃力。或者说移动设备开发必须理解GUI工作，或者在win那边学，或者在mac/iOS上学”。<br>2、学习Java</p><p>Java 的学习主要是看经典的Core Java 《Java 核心技术编程》和《Java编程思想》（有两卷，我仅链了第一卷，足够了，因为Java的图形界面了解就可以了）<br>学习JDK，学会查阅Java API Doc <a href="http://download.oracle.com/javase/6/docs/api/" target="_blank" rel="noopener">http://download.oracle.com/javase/6/docs/api/</a><br>了解一下Java这种虚拟机语言和C和Python语言在编译和执行上的差别。从C、Java、Python思考一下“跨平台”这种技术。<br>学会使用IDE Eclipse，使用Eclipse 编译，调试和开发Java程序。<br>建一个Tomcat的网站，尝试一下JSP/Servlet/JDBC/MySQL的Web开发。把前面所说的那个PHP的小项目试着用JSP和Servlet实现一下。<br>3、Web的安全与架构<br>学习HTML5，网上有很多很多教程，以前酷壳也介绍过很多，我在这里就不罗列了。<br>学习Web开发的安全问题（参考新浪微博被攻击的这个事，以及Ruby的这篇文章）<br>学习HTTP Server的rewrite机制，Nginx的反向代理机制，fast-cgi（如：PHP-FPM）<br>学习Web的静态页面缓存技术。<br>学习Web的异步工作流处理，数据Cache，数据分区，负载均衡，水平扩展的构架。<br>实践任务：<br>使用HTML5的canvas 制作一些Web动画。<br>尝试在前面开发过的那个Web应用中进行SQL注入，JS注入，以及XSS攻击。<br>把前面开发过的那个Web应用改成构造在Nginx + PHP-FPM + 静态页面缓存的网站<br>4、学习关系型数据库</p><p>你可以安装MSSQLServer或MySQL来学习数据库。<br>学习教科书里数据库设计的那几个范式，1NF，2NF，3NF，……<br>学习数据库的存过，触发器，视图，建索引，游标等。<br>学习SQL语句，明白表连接的各种概念（参看《SQL  Join的图示》）<br>学习如何优化数据库查询（参看《MySQL的优化》）<br>实践任务：设计一个论坛的数据库，至少满足3NF，使用SQL语句查询本周，本月的最新文章，评论最多的文章，最活跃用户。<br>5、一些开发工具</p><p>学会使用SVN或Git来管理程序版本。<br>学会使用JUnit来对Java进行单元测试。<br>学习C语言和Java语言的coding standard 或 coding guideline。（我N年前写过一篇关C语言非常简单的文章——《编程修养》，这样的东西你可以上网查一下，一大堆）。<br>推荐阅读《代码大全》《重构》《代码整洁之道》<br>高级深入<br>1、C++ / Java 和面向对象</p><p>我个人以为学好C++，Java也就是举手之劳。但是C++的学习曲线相当的陡。不过，我觉得C++是最需要学好的语言了。参看两篇趣文“C++学习信心图” 和“21天学好C++”</p><p>学习（麻省理工免费课程）C++面向对象编程<br>读我的 “如何学好C++”中所推荐的那些书至少两遍以上（如果你对C++的理解能够深入到像我所写的《C++虚函数表解析》或是《C++对象内存存局》，或是《C/C++返回内部静态成员的陷阱》那就非常不错了）<br>然后反思为什么C++要干成这样，Java则不是？你一定要学会对比C++和Java的不同。比如，Java中的初始化，垃圾回收，接口，异常，虚函数，等等。<br>实践任务：<br>用C++实现一个BigInt，支持128位的整形的加减乘除的操作。<br>用C++封装一个数据结构的容量，比如hash table。<br>用C++封装并实现一个智能指针（一定要使用模板）。<br>《设计模式》必需一读，两遍以上，思考一下，这23个模式的应用场景。主要是两点：1）钟爱组合而不是继承，2）钟爱接口而不是实现。（也推荐《深入浅出设计模式》）<br>实践任务：<br>使用工厂模式实现一个内存池。<br>使用策略模式制做一个类其可以把文本文件进行左对齐，右对齐和中对齐。<br>使用命令模式实现一个命令行计算器，并支持undo和redo。<br>使用修饰模式实现一个酒店的房间价格订价策略——旺季，服务，VIP、旅行团、等影响价格的因素。<br>学习STL的用法和其设计概念  – 容器，算法，迭代器，函数子。如果可能，请读一下其源码。<br>实践任务：尝试使用面向对象、STL，设计模式、和WindowsSDK图形编程的各种技能<br>做一个贪吃蛇或是俄罗斯方块的游戏。支持不同的级别和难度。<br>做一个文件浏览器，可以浏览目录下的文件，并可以对不同的文件有不同的操作，文本文件可以打开编辑，执行文件则执行之，mp3或avi文件可以播放，图片文件可以展示图片。<br>学习C++的一些类库的设计，如： MFC（看看候捷老师的《深入浅出MFC》） ，Boost, ACE,  CPPUnit，STL （STL可能会太难了，但是如果你能了解其中的设计模式和设计那就太好了，如果你能深入到我写的《STL string类的写时拷贝技术》那就非常不错了，ACE需要很强在的系统知识，参见后面的“加强对系统的了解”）<br>Java是真正的面向对象的语言，Java的设计模式多得不能再多，也是用来学习面向对象的设计模式的最佳语言了（参看Java中的设计模式）。<br>推荐阅读《Effective Java》 and 《Java解惑》<br>学习Java的框架，Java的框架也是多，如Spring, Hibernate，Struts 等等，主要是学习Java的设计，如IoC等。<br>Java的技术也是烂多，重点学习J2EE架构以及JMS， RMI, 等消息传递和远程调用的技术。<br>学习使用Java做Web Service （官方教程在这里）<br>实践任务： 尝试在Spring或Hibernate框架下构建一个有网络的Web Service的远程调用程序，并可以在两个Service中通过JMS传递消息。<br>C++和Java都不是能在短时间内能学好的，C++玩是的深，Java玩的是广，我建议两者选一个。我个人的学习经历是：</p><p>深究C++（我深究C/C++了十来年了）<br>学习Java的各种设计模式。<br>2、加强系统了解</p><p>重要阅读下面的几本书：</p><p>《Unix编程艺术》了解Unix系统领域中的设计和开发哲学、思想文化体系、原则与经验。你一定会有一种醍醐灌顶的感觉。<br>《Unix网络编程卷1，套接字》这是一本看完你就明白网络编程的书。重要注意TCP、UDP，以及多路复用的系统调用select/poll/epoll的差别。<br>《TCP/IP详解 卷1:协议》- 这是一本看完后你就可以当网络黑客的书。了解以太网的的运作原理，了解TCP/IP的协议，运作原理以及如何TCP的调优。<br>实践任务：<br>理解什么是阻塞（同步IO），非阻塞（异步IO），多路复用（select, poll, epoll）的IO技术。<br>写一个网络聊天程序，有聊天服务器和多个聊天客户端（服务端用UDP对部分或所有的的聊天客户端进Multicast或Broadcast）。<br>写一个简易的HTTP服务器。<br>《Unix网络编程卷2，进程间通信》信号量，管道，共享内存，消息等各种IPC…… 这些技术好像有点老掉牙了，不过还是值得了解。<br>实践任务：<br>主要实践各种IPC进程序通信的方法。<br>尝试写一个管道程序，父子进程通过管道交换数据。<br>尝试写一个共享内存的程序，两个进程通过共享内存交换一个C的结构体数组。<br>学习《Windows核心编程》一书。把CreateProcess，Windows线程、线程调度、线程同步（Event,  信号量，互斥量）、异步I/O，内存管理，DLL，这几大块搞精通。<br>实践任务：使用CreateProcess启动一个记事本或IE，并监控该程序的运行。把前面写过的那个简易的HTTP服务用线程池实现一下。写一个DLL的钩子程序监控指定窗口的关闭事件，或是记录某个窗口的按键。<br>有了多线程、多进程通信，TCP/IP，套接字，C++和设计模式的基本，你可以研究一下ACE了。使用ACE重写上述的聊天程序和HTTP服务器（带线程池）<br>实践任务：通过以上的所有知识，尝试<br>写一个服务端给客户端传大文件，要求把100M的带宽用到80%以上。（注意，磁盘I/O和网络I/O可能会很有问题，想一想怎么解决，另外，请注意网络传输最大单元MTU）<br>了解BT下载的工作原理，用多进程的方式模拟BT下载的原理。<br>3、系统架构</p><p>负载均衡。HASH式的，纯动态式的。（可以到Google学术里搜一些关于负载均衡的文章读读）<br>多层分布式系统 – 客户端服务结点层、计算结点层、数据cache层，数据层。J2EE是经典的多层结构。<br>CDN系统 – 就近访问，内容边缘化。<br>P2P式系统，研究一下BT和电驴的算法。比如：DHT算法。<br>服务器备份，双机备份系统（Live-Standby和Live-Live系统），两台机器如何通过心跳监测对方？集群主结点备份。<br>虚拟化技术，使用这个技术，可以把操作系统当应用程序一下切换或重新配置和部署。<br>学习Thrift，二进制的高性能的通讯中间件，支持数据(对象)序列化和多种类型的RPC服务。<br>学习Hadoop。Hadoop框架中最核心的设计就是：MapReduce和HDFS。MapReduce的思想是由Google的一篇论文所提及而被广为流传的，简单的一句话解释MapReduce就是“任务的分解与结果的汇总”。HDFS是Hadoop分布式文件系统（Hadoop Distributed File System）的缩写，为分布式计算存储提供了底层支持。<br>了解NoSQL数据库（有人说可能是一个过渡炒作的技术），不过因为超大规模以及高并发的纯动态型网站日渐成为主流，而SNS类网站在数据存取过程中有着实时性等刚性需求，这使得目前NoSQL数据库慢慢成了人们所关注的焦点，并大有成为取代关系型数据库而成为未来主流数据存储模式的趋势。当前NoSQL数据库很多，大部分都是开源的，其中比较知名的有：MemcacheDB、Redis、Tokyo Cabinet(升级版为Kyoto Cabinet)、Flare、MongoDB、CouchDB、Cassandra、Voldemort等。<br>写了那么多，回顾一下，觉得自己相当的有成就感。希望大家不要吓着，我自己这十来年也在不断地学习，今天我也在学习中，人生本来就是一个不断学习和练级的过程。不过，一定有漏的，也有不对的，还希望大家补充和更正。（我会根据大家的反馈随时更新此文）欢迎大家通过我的微博（@左耳朵耗子）和twitter（@haoel）和我交流。</p><p>—– 更新  2011/07/19 —–</p><p>1）有朋友奇怪为什么我在这篇文章开头说了web+移动，却没有在后面提到iOS/Android的前端开发。因为我心里有一种感觉，移动设备上的UI最终也会被Javascript取代。大家可以用iPhone或Android看看google+，你就会明白了。</p><p>2）有朋友说我这里的东西太多了，不能为了学习而学习，我非常同意。我在文章的前面也说了要思考。另外，千万不要以为我说的这些东西是一些新的技术，这份攻略里95%以上的全是基础。而且都是久经考验的基础技术。即是可以让你一通百通的技术，也是可以让你找到一份不错工作的技术。</p><p>3）有朋友说学这些东西学完都40了，还不如想想怎么去挣钱。我想告诉大家，一是我今年还没有40岁，二是学无止境啊，三是我不觉得挣钱有多难，难的是怎么让你值那么多钱？无论是打工还是创业，是什么东西让你自己的价值，让你公司的价值更值钱？别的地方我不敢说，对于互联网或IT公司来说，技术实力绝对是其中之一。</p><p>4）有朋友说技术都是工具，不应该如此痴迷这句话没有错，有时候我们需要更多的是抬起头来看看技术以外的事情，或者是说我们在作技术的时候不去思考为什么会有这个技术，为什么不是别的，问题不在于技术，问题在于我们死读书，读死书，成了技术的书呆子。</p><p>5） 对于NoSQL，最近比较火，但我对其有点保守，所以，我只是说了解就可以。对于Hadoop，我觉得其在分布式系统上有巨大的潜力，所以需要学习。 对于关系型数据库，的确是很重要的东西，这点是我的疏忽，在原文里补充。</p><p>（全文完）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">https://coolshell.cn/articles/4990.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;转载自左耳朵耗子的博文-感觉不错就记录下吧&quot;&gt;&lt;a href=&quot;#转载自左耳朵耗子的博文-感觉不错就记录下吧&quot; class=&quot;headerlink&quot; title=&quot;转载自左耳朵耗子的博文,感觉不错就记录下吧&quot;&gt;&lt;/a&gt;转载自左耳朵耗子的博文,感觉不错就记录下吧&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[转载]每个程序员都该知道的事</title>
    <link href="https://yo42.github.io/2018/06/21/%E8%BD%AC%E8%BD%BD-%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/"/>
    <id>https://yo42.github.io/2018/06/21/转载-每个程序员都该知道的事/</id>
    <published>2018-06-21T04:50:30.000Z</published>
    <updated>2018-06-21T04:59:28.974Z</updated>
    
    <content type="html"><![CDATA[<p>在每个月月中，我会推荐一些有价值的内容，供你参考。这个月，我将为你推荐五篇阅读文章，这五篇文章我觉得都是比较不错的经验总结，是我们每一个技术人员都需要知道的东西。它们分别是：</p><p>Stack Overflow 上开出来的一个经典书书单；<br>美国某大学教授给计算机专业学生的一些建议，其中有很多的资源；<br>LinkedIn 的高效代码复查实践，很不错的方法，值得你一读；<br>一份关于程序语言和 bug 数相关的有趣的报告，可以让你对各种语言有所了解</p><p>每个程序员都应该要读的书<br>在 Stack Overflow 上有一个问题 What is the single most influential book every programmer should read，网址为： <a href="https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read" target="_blank" rel="noopener">https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read</a></p><p>虽然这个问题被关闭了，但是这是一个非常热门的问题。排在第一个的人给了一大串书的列表，看上去着实吓人，不过都是一些相当经典相当有影响力的书，在这里我重罗列一些我觉得你必需要看的。</p><p>《代码大全》虽然这本书有点过时了，而且厚到可以垫显示器，但是这是一本绝对经典的书。<br>《程序员修练之道》这本书也是相当的经典，我觉得就是你的指路明灯。<br>《计算机的构造和解释》经典中的经典，必需读的书。<br>《算法导论》美国的本科生教材，这本书应该也是中国计算机学生的教材。<br>《设计模式》这本书是面向对象设计的经典书。<br>《重构》代码坏味道和相应的代码的最佳实践。<br>《人月神话》这本书可能也有点过时了。但还是经典书。<br>《代码整洁之道》细节之处的效率，完美和简单。<br>《Effective C++》/《More Effective C++》C++ 中两本经典得不能再经典的书。也许你觉得 C++ 复杂，但这两本书中带来对代码稳定性的探索方式让人非常受益，因为这种思维方式同样可以用在其它地方。以至于各种模仿者，比如《Effective Java》也是一本经典书。<br>《Unix 编程艺术》、《Unix 高级环境编程》也是相关的经典。<br>还有好多，我就不在这里一一列了。你可以看看其它的答案，我发现自己虽然读过好多书，但也有好些书没有读过，这个问答对我也很有用。</p><p>每个搞计算机专业的学生应有的知识<br>What every computer science major should know，每个搞计算机专业的学生应有的知识，网址为：<a href="http://matt.might.net/articles/what-cs-majors-should-know/" target="_blank" rel="noopener">http://matt.might.net/articles/what-cs-majors-should-know/</a></p><p>本文作者马修·迈特（Matthew Might）是美国犹他大学计算机学院的副教授，2007 年于佐治亚理工学院取得博士学位。计算机专业的课程繁多，而且随着时代的变化，科目的课程组成也在不断变化。如果不经过思考，直接套用现有的计算机专业课程列表，则有可能忽略一些将来可能变得重要的知识点。为此，马修力求从四个方面来总结，得出这篇文章的内容。</p><p>要获得一份好工作，学生需要知道什么？<br>为了一辈子都有工作干，学生需要知道什么？<br>学生需要知道什么，才能考进研究生院？<br>学生需要知道什么，才能对社会有益？<br>这篇文章不仅仅对刚毕业的学生有用，对有工作经验的人同样有用，这里我把这篇文章的内容摘要如下。</p><p>首先，对于我们每个人来说，作品集（Portfolio）会比简历（Resume）更有参考意义。所以，在自己的简历中应该放上自己的一些项目经历，或是一些开源软件的贡献，或是你完成的软件的网址等。最好有一个自己的个人网址，上面有一些你做的事，自己的技能，经历，以及你的一些文章和思考会比简历更好。</p><p>其次，计算机专业工作者也要学会与人交流的技巧，包括如何写演示文稿，以及面对质疑时如何与人辩论的能力。</p><p>最后，他就各个方面展开计算机专业人士所需要的硬技能：工程类数学、Unix 哲学和实践、系统管理、程序设计语言、离散数学、数据结构与算法、计算机体系结构、操作系统、网络、安全、密码学、软件测试、用户体验、可视化、并行计算、软件工程、形式化方法、图形学、机器人、人工智能、机器学习、数据库，等等。详读本文可以了解计算机专业知识的全貌。</p><p>这篇文章的第三部分简直就是一个知识资源向导库，给出了各个技能的方向和关键知识点，你可以跟随着这篇文章里的相关链接学到很多东西。</p><p>LinkedIn 高效的代码复查技巧<br>LinkedIn’s Tips for Highly Effective Code Review，LinkedIn 的高效代码复查技巧，网址为：<a href="https://thenewstack.io/linkedin-code-review/" target="_blank" rel="noopener">https://thenewstack.io/linkedin-code-review/</a></p><p>对于 Code Review，我有一篇文章 《从 Code Review 谈如何做技术》，讲述了为什么 Code Review 是一件很重要事情。今天推荐的这篇文章是 LinkedIn 公司的相关实践。</p><p>这篇文章介绍了 LinkedIn 公司内部实践的 Code Review 形式。具体来说，LinkedIn 的代码复查有以下几个特点。</p><p>从 2011 年开始，强制要求在团队成员之间做代码复查。Code Review 带来的反馈意见让团队成员能够迅速提升自己的技能水平，这解决了 LinkedIn 各个团队近年来因迅速扩张带来的技能不足的问题。<br>通过建立公司范围的 Code Review 工具，这就可以做跨团队的 Code Review。既有利于消除 bug，提升质量，也有利于大家对代码的学习和技能的传播。<br>Code Review 的经验作为员工晋升的参考因素之一。<br>Code Review 的一个难点是，Reviewer 可能不了解某个修改的背景和目的。所以 LinkedIn 要求代码签入版本管理系统前，就对其做清晰的说明，以便复查者了解其目的，促进 Review 的进行。<br>我认为，这个方法实在在太赞了。因为，我看到很多时候，Reviewer 都会说不了解对方代码的背景或是代码量比较大而无法做 Code Review，然而，却没有找到相应的方法解决这个问题。</p><p>LinkedIn 对提交代码写说明文档这个方法是一个非常不错的方法，因为代码提交人写文档的过程其实也是重头梳理的过程。我的个人经验是，写文档的时候通常会发现自己把事儿干复杂了，应该把代码再简化一下，于是就会回头去改代码。是的，写文档就是在写代码。</p><p>有些 Code Review 工具所允许给出的反馈只是代码怎样修改以变得更好，但长此以往会让人觉得复查提出的意见都表示原先的代码不够好。为了提高员工积极性，LinkedIn 的代码复查工具允许提出“这段代码很棒”之类的话语，以便让好代码的作者得到鼓励。我认为，这个方法也很赞，正面鼓励的价值也不可小看。<br>为 Code Review 的结果写出有目的性的注释。比如“消除重复代码”，“增加了测试覆盖率”，等等。长此以往也让团队的价值观得以明确。<br>Code Review 中，不但要 Review 提交者的代码，还要 Reivew 提交者做过的测试。除了一些单元测试，还有一些可能是手动的测试。提交者最好列出所有测试过的案例。这样可以让 Reviewer 可以做出更多的测试建议，从而可以提高质量。<br>对 Code Review 有明确的期望，不过分关注细枝末节，也不要炫技，而是对要 Review 的代码有一个明确的目标。<br>编程语言和代码质量的研究报告<br>A Large-Scale Study of Programming Languages and Code Quality in GitHub，编程语言和代码质量的研究报告，网址为： <a href="https://cacm.acm.org/magazines/2017/10/221326-a-large-scale-study-of-programming-languages-and-code-quality-in-github/" target="_blank" rel="noopener">https://cacm.acm.org/magazines/2017/10/221326-a-large-scale-study-of-programming-languages-and-code-quality-in-github/</a></p><p>这是一项有趣的研究。有四个人从 Github 上分析了 728 个项目，6300 万行代码，近 3 万个提交人，150 万个 commits，以及 17 种编程语言（如下图所示），然后，他们想找到编程语言对软件质量的影响。</p><p>然后，他们还对编程语言做了一个分类，想找到不同类型的编程语言的 bug 问题。如下图所示：</p><p>以及，他们还对这众多的开源软件做了个聚类，如下图：</p><p>对 bug 的类型也做了一个聚类，如下图：</p><p>其中分析的方法我不多说了。我们来看一下相关的结果。</p><p>首先，他们得出来的第一个结果是，从查看 bug fix 的 commits 的个数情况来看，C、C++、Objective-C、PHP 和 Python 中有很多很多的 commits 都是和 bug fix 相关的，而 Clojure、Haskell、Ruby、Scala 在 bug fix 的 commits 的数明显要少很多。</p><p>下图是各个语言出 bug 的情况。如果你看到是正数，说明高于平均水平，如果你看到是负数，则是低于平均水平。</p><p>第二个结论是，函数式编程语言的 bug 明显比大多数其它语言的要好很多。有隐式类型转换的语言明显产生的 bug 数要比强类型的语言要少很多。函数式的静态类型的语言要比函数式的动态类型语言的程序出 bug 的可能性要小很多。</p><p>第三，研究者想搞清是否 bug 数会和软件的领域相关。比如，业务型的，中间件型、框架、lib，或是数据库。研究表明，并没有什么相关性。下面这个图是各个语言在不同领域的 bug 率。</p><p>第四，研究人员想搞清楚 bug 的类型是否会和语言有关系。的确如此，bug 的类型和语言是强相关性的。下图是各个语言在不同的 bug 类型的情况。如果你看到的是正数，说明高于平均水平，如果你看到的是负数，则是低于平均水平。</p><p>也许，这份报告可以在你评估语言时有一定的借鉴作用。</p><p>电子书：《C++ 软件性能优化》</p><p>Optimizing Software in C++ - Agner Fog - PDF，C++ 软件性能优化，<a href="http://agner.org/optimize/optimizing_cpp.pdf" target="_blank" rel="noopener">http://agner.org/optimize/optimizing_cpp.pdf</a></p><p>这本书是所有 C++ 程序员都应该要读的一本书。这本书从事无巨细地从语言层面，编译器层面，内存访问层面，多线程层面，CPU 层面……讲述了如果对软件性能的调优。实在是一本经典的电子书。</p><p>Agner Fog 还写了其它几本和性能调优相关的书（你可以到这个网址下载：<a href="http://www.agner.org/optimize/" target="_blank" rel="noopener">http://www.agner.org/optimize/</a> ）</p><p>Optimizing subroutines in assembly language: An optimization guide for x86 platforms<br>The microarchitecture of Intel, AMD and VIA CPUs: An optimization guide for assembly programmers and compiler makers<br>Instruction tables: Lists of instruction latencies, throughputs and micro-operation breakdowns for Intel, AMD and VIA CPUs<br>Calling conventions for different C++ compilers and operating systems<br>我今天推荐的内容比较干，需要慢慢吸收体会，最好能借鉴到实践中用用，相信会有更多的感悟和收获。你还对哪些方面的内容感兴趣，欢迎留言给我。我后面收集推荐内容的时候，会有意识地关注整理。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">http://www.infoq.com/cn/articles/programer-knowledge?utm_source=infoq&amp;utm_medium=popular_widget&amp;utm_campaign=popular_content_list&amp;utm_content=homepage</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在每个月月中，我会推荐一些有价值的内容，供你参考。这个月，我将为你推荐五篇阅读文章，这五篇文章我觉得都是比较不错的经验总结，是我们每一个技术人员都需要知道的东西。它们分别是：&lt;/p&gt;
&lt;p&gt;Stack Overflow 上开出来的一个经典书书单；&lt;br&gt;美国某大学教授给计算
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JVM性能调优监控工具</title>
    <link href="https://yo42.github.io/2018/06/20/JVM%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/"/>
    <id>https://yo42.github.io/2018/06/20/JVM性能调优监控工具/</id>
    <published>2018-06-20T09:03:09.800Z</published>
    <updated>2018-06-20T23:52:29.855Z</updated>
    
    <content type="html"><![CDATA[<h5 id="以下是一些JVM性能调优监控工具"><a href="#以下是一些JVM性能调优监控工具" class="headerlink" title="以下是一些JVM性能调优监控工具"></a>以下是一些JVM性能调优监控工具</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps、jstack、jmap、jhat、jstat、hprof....</span><br></pre></td></tr></table></figure><h6 id="对于java程序-有时可能会碰到以下问题"><a href="#对于java程序-有时可能会碰到以下问题" class="headerlink" title="对于java程序,有时可能会碰到以下问题"></a>对于java程序,有时可能会碰到以下问题</h6><ul><li>OutOfMemoryError，内存不足</li><li>内存泄露</li><li>线程死锁</li><li>锁争用（Lock Contention）</li><li>Java进程消耗CPU过高</li><li>….</li></ul><p>通过一些监控工具去对java程序进行调优以及监控,在发生问题时使用工具去进行定位问题为后续的排障、修复问题提到了很好的辅助作用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;以下是一些JVM性能调优监控工具&quot;&gt;&lt;a href=&quot;#以下是一些JVM性能调优监控工具&quot; class=&quot;headerlink&quot; title=&quot;以下是一些JVM性能调优监控工具&quot;&gt;&lt;/a&gt;以下是一些JVM性能调优监控工具&lt;/h5&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人间失格</title>
    <link href="https://yo42.github.io/2018/06/11/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/"/>
    <id>https://yo42.github.io/2018/06/11/人间失格/</id>
    <published>2018-06-11T08:20:56.293Z</published>
    <updated>2018-06-14T05:08:18.106Z</updated>
    
    <content type="html"><![CDATA[<p>《人间失格》是日本作家太宰治的长篇小说。<br>人间失格意为丧失了做人的资格。</p><p>由序、第一手札、第二手札、第三手札、后记共五个部分构成，其中序和后记以作者口吻叙说，三个手札则以主人公叶藏的口吻叙述。</p><p>小说的前半部分以大庭叶藏这位主人公的口吻,讲述了他奇特而悲催的人生经历<br>叶藏自小仿佛便看穿了人世间的种种阴暗，遂以一种诡异的笑容面对他的人生，他时常在饰演一个小丑般的角色去对待人世间的事与物，病态且嬉戏的童年，至青年酗酒、沉溺女色、参加“非法”左翼团体，到中年与娼妓一起殉情(女死男生)，种种的经历让他饱受了人世间的情苦，这从一开始也埋下了伏笔，预示着叶藏最终走向毁灭之路。</p><p>《人间失格》可以说是太宰治本人的自传了，主角大庭叶藏就是他为原型的,在文中的”GoodBye” 章节写道”一位文坛大师辞世，告别仪式结束时，忽然下起了雨….”(太宰治留在人世间的一个彩蛋？)</p><p>21岁的太宰治和银座咖啡馆女侍投海自杀未遂…<br>39岁与崇拜他的女读者山崎富荣跳玉川上水自杀…</p><p>以下是《人间失格的》的一些摘抄:</p><p><strong>早晨，我睁眼醒来翻身下床，又变成了原来那个浅薄无知、善于伪装的滑稽角色。胆小鬼连幸福都会惧怕，碰到棉花都会受伤，有时也会被幸福所伤。趁着还没有受伤，我想就这样赶快分道扬镳。我又放出了惯用的逗笑烟幕弹。</strong></p><p><strong>而那些相互欺瞒却又过着单纯、明了生活的人，抑或相互欺瞒却又胸有成竹地面对生活的人，着实令人费解。人类终究未能让我明白其中真谛。若我能明了，或许就不必如此地畏惧人类，也不必竭力讨好众人，更不至于与人类的生活对立，夜夜遭受地狱般的苦难。</strong></p><p>附上一张太宰治很”丧”的照片<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="太宰治.jpg" alt="太宰治君" title="">                </div>                <div class="image-caption">太宰治君</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《人间失格》是日本作家太宰治的长篇小说。&lt;br&gt;人间失格意为丧失了做人的资格。&lt;/p&gt;
&lt;p&gt;由序、第一手札、第二手札、第三手札、后记共五个部分构成，其中序和后记以作者口吻叙说，三个手札则以主人公叶藏的口吻叙述。&lt;/p&gt;
&lt;p&gt;小说的前半部分以大庭叶藏这位主人公的口吻,讲述
      
    
    </summary>
    
      <category term="Books" scheme="https://yo42.github.io/categories/Books/"/>
    
    
      <category term="Books" scheme="https://yo42.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>爱你就像爱生命</title>
    <link href="https://yo42.github.io/2018/06/11/%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD/"/>
    <id>https://yo42.github.io/2018/06/11/爱你就像爱生命/</id>
    <published>2018-06-11T08:20:33.587Z</published>
    <updated>2018-06-25T14:27:31.305Z</updated>
    
    <content type="html"><![CDATA[<p>爱你就像爱生命,爱你要了我的命。(后半句我瞎编的，科科..)<br>《爱你就像爱生命》是一本书信集,是王小波和李银河情书信集。(文人说起情话来真的是无法抗拒呀….)</p><p>关于王小波:</p><p>王小波在白话文叙述方面有很深的造诣，写作小说的同时他也创作过一些杂文与随笔文章。并且很多人都是由于精彩而睿智的杂文作品接触和认识到王小波。王小波的东西方生活与求学经历，使他成为一个富有自由人文精神和独立知识分子品格的写作者。</p><p>在他的作品中，贯穿着其特有的黑色幽默，这些也表明了王小波对于生命和生活的态度。王小波的一系列小说都以自己所经历过的生活作为蓝本，如下放到云南的知识青年，在某个医院或高等专科学校从事技术工种的工程师等等，作品的年代背景也与王小波的生活与成长时期相重叠，在这些作品中，他刻画了这样一种现实：“我看到一个无智的世界，但是智慧在混沌中存在；我看到一个无性的世界，但是性爱在混沌中存在；我看到一个无趣的世界，但是有趣在混沌中存在”。</p><p>从杂文作品中看，哲学家伯特兰·罗素对他思想影响很深，他推崇和提倡科学与理性，并且认为人的生活应该追求未知，他反对进行思想禁锢，主张人们思维应该保持多样化，使生活变得有意思有趣，去热爱智慧。 他的作品在他身后盛行于世，影响了众多青年，特别是二十世纪九十年代的大学生，他们至今还会常常引用王小波作品中的文字，来表明自己的激昂和犀利。其曾编写过电影剧本《东宫西宫》，并由此获得了阿根廷国际电影节最佳编剧。</p><p>下方是些摘抄:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">我现在已经养成了一种习惯，就是每三二天要找你说几句不想对别人说的话。当然还有更多的话没有说出口来，但是只要我把它带到了你面前，我走开的时候自己就满意了，这些念头就不会做再折磨我了。</span><br><span class="line"></span><br><span class="line">我现在不坏了，我有了良心。我的良心就是你。</span><br><span class="line"></span><br><span class="line">我的灵魂里有很多地方玩世不恭 ，对人傲慢无礼，但是它有一个核心，这个核心害怕黑暗，柔弱得像绵羊一样。只有顶平等的有爱才能使他得到安慰。你对我是属于这个核心的。</span><br><span class="line"></span><br><span class="line">我是爱你的，看见就爱上了。我爱你爱到不自私的地步。</span><br><span class="line"></span><br><span class="line">我会不爱你吗？不爱你？不会。爱你就像爱生命。</span><br><span class="line"></span><br><span class="line">我真不知怎么才能和你亲近起来，你好像是一个可望而不可及的目标，我琢磨不透，追也追不上，就坐下哭了起来。</span><br><span class="line"></span><br><span class="line">你要是喜欢别人我会哭，但是还是喜欢你。</span><br><span class="line"></span><br><span class="line">我把我整个的灵魂都给你，连同它的怪癖，耍小脾气，忽明忽暗， 一千八百种坏毛病。它真讨厌，只有一点好，爱你。</span><br><span class="line"></span><br><span class="line">你知道我在世界上最珍视的东西吗？那就是我自己的性格，也就是我自己思想的自由。在这个问题上我都放下刀枪了–也就是说，听任你的改造和影响。你为什么还要计较我一两次我无心的过失和对你的伤害呢？</span><br><span class="line"></span><br><span class="line">我对好多人怀有最深的感情，尤其是对你。我很想为别人做好事，尤其是对你。</span><br><span class="line"></span><br><span class="line">你是非常可爱的人，真应该遇到最好的人，我也真希望我就是。</span><br><span class="line"></span><br><span class="line">假如你愿意，你就恋爱吧，爱我。</span><br><span class="line"></span><br><span class="line">不一定要你爱我，但是我爱你，这是我的命运。</span><br><span class="line"></span><br><span class="line">你要是回来我就高兴了，马上我就要放个震动北京城的大炮仗。</span><br><span class="line"></span><br><span class="line">男孩子们都喜欢女孩子，可是谁也没有我喜欢你这么厉害。</span><br><span class="line"></span><br><span class="line">我现在就很高兴，因为你又好又喜欢我，希望我高兴，有什么事情也喜欢说给我听。</span><br><span class="line"></span><br><span class="line">比方说你对于我，主要是因为你可爱。我从来没有在男人或者女人中发现这么可爱的人。</span><br><span class="line"></span><br><span class="line">但愿我和你，是一支唱不完的歌。</span><br><span class="line"></span><br><span class="line">谁也管不住我爱你，真的，谁管谁就真傻，我和你谁也管不住呢。你别怕，真的你谁也不要怕，最亲爱的好银河，要爱就爱个够吧，世界上没有比爱情更好的东西了。</span><br><span class="line"></span><br><span class="line">你真好，我真爱你。可惜我不是诗人，说不出再动人一点的话了。</span><br><span class="line"></span><br><span class="line">有时候你难过了，这时候我更爱你。只要你不拒绝我就拥抱你，我会告诉你这是因为什么。就是我不知是为了什么。</span><br><span class="line"></span><br><span class="line">不，我对你什么要求也没有，什么要求也没有，只要你来看我。我也不知道为什么。你愿意要什么，就给什么。你知道吗？要，对我来说，就是给啊。你要什么就是给我什么。</span><br><span class="line"></span><br><span class="line">不管我本人多么平庸，我总觉得对你的爱很美。</span><br><span class="line"></span><br><span class="line">静下来想你，觉得一切都没好得不可思议。以前我不知道爱情这么美好，爱到深处这么美好。真不想让任何人来管我们。谁也管不着，和谁都无关。告诉你，一想到你，我这张丑脸上就泛起微笑。</span><br><span class="line"></span><br><span class="line">我只希望你和我好，互不猜忌，也互不称誉，安如平日，你和我说话就像对自己说话一样，我和你说话也像对自己说话一样。你说，和我好么？</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;爱你就像爱生命,爱你要了我的命。(后半句我瞎编的，科科..)&lt;br&gt;《爱你就像爱生命》是一本书信集,是王小波和李银河情书信集。(文人说起情话来真的是无法抗拒呀….)&lt;/p&gt;
&lt;p&gt;关于王小波:&lt;/p&gt;
&lt;p&gt;王小波在白话文叙述方面有很深的造诣，写作小说的同时他也创作过一些杂
      
    
    </summary>
    
      <category term="Books" scheme="https://yo42.github.io/categories/Books/"/>
    
    
      <category term="Books" scheme="https://yo42.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>恶意</title>
    <link href="https://yo42.github.io/2018/06/09/%E6%81%B6%E6%84%8F/"/>
    <id>https://yo42.github.io/2018/06/09/恶意/</id>
    <published>2018-06-09T08:14:20.748Z</published>
    <updated>2018-07-14T07:07:06.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="东野圭吾《恶意》"><a href="#东野圭吾《恶意》" class="headerlink" title="东野圭吾《恶意》"></a>东野圭吾《恶意》</h3><p>花了大约三小时拜读了东野圭吾的《恶意》<br>相较之前的《白夜行》,此次更令我倒吸一口凉气,依然是十分具有东野圭吾特色的推理、悬疑的小说。<br>小说绝大部分以第一人称 “手记” 的特点更令人感觉真实,以及更具有代入感。</p><p>小说故事讲述了一个畅销作家在出国前一晚被杀害的故事,以及后续一系列让人们匪夷所思的情节。</p><p>以第一人称的方式写手记的凶手被逮捕了,但当警方盘问其杀人动机时却令人疑惑不解,而隐藏在故事背后令人不寒而栗的真相又会是什么呢？</p><p>在故事的最后 真相之章<br>来自加贺警官的阐述<br>经过层层深挖,发现凶案背后的真相竟如此令人难以接受。</p><p>东野圭吾前期巧妙的铺垫,一开始就蒙蔽了读者的双眼,到故事的最后真相慢慢浮出水面,情节反转的巧妙性就不言而喻了。</p><p>人性中的恶意：贪婪、嫉妒…真是十分可怕的负面能量，让人寒毛凛凛。</p><p>我发现东野圭吾书的一些特点,善与恶的对立面双方都是智商极高的人<br>无论是《嫌疑人X的献身》里的数学天才石神与神探伽利略汤川<br>亦或是《恶意》中的野野口与加贺。</p><p>东野圭吾的书不仅仅在于情节故事的铺垫地精彩,剧情反转地极为巧妙,而且在每个悬疑故事背后的真相把人性的丑恶面刻画地淋漓尽致,以及所映射出来的社会问题令人感到窒息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;东野圭吾《恶意》&quot;&gt;&lt;a href=&quot;#东野圭吾《恶意》&quot; class=&quot;headerlink&quot; title=&quot;东野圭吾《恶意》&quot;&gt;&lt;/a&gt;东野圭吾《恶意》&lt;/h3&gt;&lt;p&gt;花了大约三小时拜读了东野圭吾的《恶意》&lt;br&gt;相较之前的《白夜行》,此次更令我倒吸一口凉气,
      
    
    </summary>
    
      <category term="Books" scheme="https://yo42.github.io/categories/Books/"/>
    
    
      <category term="Books" scheme="https://yo42.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>Material.io</title>
    <link href="https://yo42.github.io/2018/05/28/Material-io/"/>
    <id>https://yo42.github.io/2018/05/28/Material-io/</id>
    <published>2018-05-28T06:17:56.827Z</published>
    <updated>2018-06-10T07:41:51.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于Material-io"><a href="#关于Material-io" class="headerlink" title="关于Material.io"></a>关于Material.io</h3><p>&nbsp; &nbsp; &nbsp; Material.io 是谷歌的一套设计交互系统,是一种视觉语言，将优秀设计的经典原则与科技创新相结合。</p><p>&nbsp; &nbsp; &nbsp;  起初我并不知道有这东西,纯粹的觉得它好看,Google的原生安卓系统也是与此有关系,所以博客的主题就选择了这款indigo。</p><p>&nbsp; &nbsp; &nbsp; 我们都需要有善于发现美的眼睛,你说是么?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于Material-io&quot;&gt;&lt;a href=&quot;#关于Material-io&quot; class=&quot;headerlink&quot; title=&quot;关于Material.io&quot;&gt;&lt;/a&gt;关于Material.io&lt;/h3&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Mater
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于Docker Build 目录与GIT库共存的一些技巧</title>
    <link href="https://yo42.github.io/2018/05/27/%E5%85%B3%E4%BA%8EDocker-Build-%E7%9B%AE%E5%BD%95%E4%B8%8EGIT%E5%BA%93%E5%85%B1%E5%AD%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    <id>https://yo42.github.io/2018/05/27/关于Docker-Build-目录与GIT库共存的一些技巧/</id>
    <published>2018-05-27T02:48:18.000Z</published>
    <updated>2018-06-09T05:24:51.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如下"><a href="#如下" class="headerlink" title="如下"></a>如下</h2><pre>echo .git/ > .dockerignore这样操作后，能加快docker build的速度</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如下&quot;&gt;&lt;a href=&quot;#如下&quot; class=&quot;headerlink&quot; title=&quot;如下&quot;&gt;&lt;/a&gt;如下&lt;/h2&gt;&lt;pre&gt;
echo .git/ &gt; .dockerignore
这样操作后，能加快docker build的速度
&lt;/pre&gt;


      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World! Why Blogs?</title>
    <link href="https://yo42.github.io/2018/05/13/hello-world/"/>
    <id>https://yo42.github.io/2018/05/13/hello-world/</id>
    <published>2018-05-13T06:24:27.852Z</published>
    <updated>2018-07-22T08:30:19.468Z</updated>
    
    <content type="html"><![CDATA[<pre><code>很久之前便有此念头，但迟迟却不见行动。由于自己时常会有些天马行空的想法，以此为记。博客大概会记录些关于学习上的东西&amp;技术上的文档，以及些杂谈吧。   </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;很久之前便有此念头，但迟迟却不见行动。
由于自己时常会有些天马行空的想法，以此为记。
博客大概会记录些关于学习上的东西&amp;amp;技术上的文档，以及些杂谈吧。   
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《白日梦想家》</title>
    <link href="https://yo42.github.io/2018/05/13/Movie/"/>
    <id>https://yo42.github.io/2018/05/13/Movie/</id>
    <published>2018-05-13T06:24:27.852Z</published>
    <updated>2018-05-27T02:47:22.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《白日梦想家》献给对生活乏味的人们"><a href="#《白日梦想家》献给对生活乏味的人们" class="headerlink" title="《白日梦想家》献给对生活乏味的人们"></a>《白日梦想家》献给对生活乏味的人们</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/Cosmos04.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="经典台词"><a href="#经典台词" class="headerlink" title="经典台词"></a>经典台词</h3><blockquote><p>To see the world, things dangerous to come to,<br>To see behind walls, draw closer,<br>To find each other, and To feel.<br>That is the purpose of life</p><p>开拓视野, 冲破艰险.<br>看见世界, 身临其境.<br>贴近彼此, 感受生活.</p></blockquote><blockquote><p>“Sometimes I don’t.<br>If I like a moment, for me, personally<br>I don’t like to have the distraction of the camera.<br>I just want to stay in it.”</p><footer><strong>Sean O'Connell</strong></footer></blockquote><p>More info: <a href="https://movie.douban.com/subject/2133323/" target="_blank" rel="noopener">This Movie</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;《白日梦想家》献给对生活乏味的人们&quot;&gt;&lt;a href=&quot;#《白日梦想家》献给对生活乏味的人们&quot; class=&quot;headerlink&quot; title=&quot;《白日梦想家》献给对生活乏味的人们&quot;&gt;&lt;/a&gt;《白日梦想家》献给对生活乏味的人们&lt;/h1&gt;&lt;figure class
      
    
    </summary>
    
    
  </entry>
  
</feed>

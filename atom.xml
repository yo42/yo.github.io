<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yo42</title>
  
  <subtitle>Dont&#39;t Panic,Do not go gentle into that good night~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yo42.github.io/"/>
  <updated>2018-06-21T04:53:56.481Z</updated>
  <id>https://yo42.github.io/</id>
  
  <author>
    <name>Yo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转载]每个程序员都该知道的事</title>
    <link href="https://yo42.github.io/2018/06/21/%E8%BD%AC%E8%BD%BD-%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/"/>
    <id>https://yo42.github.io/2018/06/21/转载-每个程序员都该知道的事/</id>
    <published>2018-06-21T04:50:30.000Z</published>
    <updated>2018-06-21T04:53:56.481Z</updated>
    
    <content type="html"><![CDATA[<p>在每个月月中，我会推荐一些有价值的内容，供你参考。这个月，我将为你推荐五篇阅读文章，这五篇文章我觉得都是比较不错的经验总结，是我们每一个技术人员都需要知道的东西。它们分别是：</p><p>Stack Overflow 上开出来的一个经典书书单；<br>美国某大学教授给计算机专业学生的一些建议，其中有很多的资源；<br>LinkedIn 的高效代码复查实践，很不错的方法，值得你一读；<br>一份关于程序语言和 bug 数相关的有趣的报告，可以让你对各种语言有所了解</p><p>每个程序员都应该要读的书<br>在 Stack Overflow 上有一个问题 What is the single most influential book every programmer should read，网址为： <a href="https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read" target="_blank" rel="noopener">https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read</a></p><p>虽然这个问题被关闭了，但是这是一个非常热门的问题。排在第一个的人给了一大串书的列表，看上去着实吓人，不过都是一些相当经典相当有影响力的书，在这里我重罗列一些我觉得你必需要看的。</p><p>《代码大全》虽然这本书有点过时了，而且厚到可以垫显示器，但是这是一本绝对经典的书。<br>《程序员修练之道》这本书也是相当的经典，我觉得就是你的指路明灯。<br>《计算机的构造和解释》经典中的经典，必需读的书。<br>《算法导论》美国的本科生教材，这本书应该也是中国计算机学生的教材。<br>《设计模式》这本书是面向对象设计的经典书。<br>《重构》代码坏味道和相应的代码的最佳实践。<br>《人月神话》这本书可能也有点过时了。但还是经典书。<br>《代码整洁之道》细节之处的效率，完美和简单。<br>《Effective C++》/《More Effective C++》C++ 中两本经典得不能再经典的书。也许你觉得 C++ 复杂，但这两本书中带来对代码稳定性的探索方式让人非常受益，因为这种思维方式同样可以用在其它地方。以至于各种模仿者，比如《Effective Java》也是一本经典书。<br>《Unix 编程艺术》、《Unix 高级环境编程》也是相关的经典。<br>还有好多，我就不在这里一一列了。你可以看看其它的答案，我发现自己虽然读过好多书，但也有好些书没有读过，这个问答对我也很有用。</p><p>每个搞计算机专业的学生应有的知识<br>What every computer science major should know，每个搞计算机专业的学生应有的知识，网址为：<a href="http://matt.might.net/articles/what-cs-majors-should-know/" target="_blank" rel="noopener">http://matt.might.net/articles/what-cs-majors-should-know/</a></p><p>本文作者马修·迈特（Matthew Might）是美国犹他大学计算机学院的副教授，2007 年于佐治亚理工学院取得博士学位。计算机专业的课程繁多，而且随着时代的变化，科目的课程组成也在不断变化。如果不经过思考，直接套用现有的计算机专业课程列表，则有可能忽略一些将来可能变得重要的知识点。为此，马修力求从四个方面来总结，得出这篇文章的内容。</p><p>要获得一份好工作，学生需要知道什么？<br>为了一辈子都有工作干，学生需要知道什么？<br>学生需要知道什么，才能考进研究生院？<br>学生需要知道什么，才能对社会有益？<br>这篇文章不仅仅对刚毕业的学生有用，对有工作经验的人同样有用，这里我把这篇文章的内容摘要如下。</p><p>首先，对于我们每个人来说，作品集（Portfolio）会比简历（Resume）更有参考意义。所以，在自己的简历中应该放上自己的一些项目经历，或是一些开源软件的贡献，或是你完成的软件的网址等。最好有一个自己的个人网址，上面有一些你做的事，自己的技能，经历，以及你的一些文章和思考会比简历更好。</p><p>其次，计算机专业工作者也要学会与人交流的技巧，包括如何写演示文稿，以及面对质疑时如何与人辩论的能力。</p><p>最后，他就各个方面展开计算机专业人士所需要的硬技能：工程类数学、Unix 哲学和实践、系统管理、程序设计语言、离散数学、数据结构与算法、计算机体系结构、操作系统、网络、安全、密码学、软件测试、用户体验、可视化、并行计算、软件工程、形式化方法、图形学、机器人、人工智能、机器学习、数据库，等等。详读本文可以了解计算机专业知识的全貌。</p><p>这篇文章的第三部分简直就是一个知识资源向导库，给出了各个技能的方向和关键知识点，你可以跟随着这篇文章里的相关链接学到很多东西。</p><p>LinkedIn 高效的代码复查技巧<br>LinkedIn’s Tips for Highly Effective Code Review，LinkedIn 的高效代码复查技巧，网址为：<a href="https://thenewstack.io/linkedin-code-review/" target="_blank" rel="noopener">https://thenewstack.io/linkedin-code-review/</a></p><p>对于 Code Review，我有一篇文章 《从 Code Review 谈如何做技术》，讲述了为什么 Code Review 是一件很重要事情。今天推荐的这篇文章是 LinkedIn 公司的相关实践。</p><p>这篇文章介绍了 LinkedIn 公司内部实践的 Code Review 形式。具体来说，LinkedIn 的代码复查有以下几个特点。</p><p>从 2011 年开始，强制要求在团队成员之间做代码复查。Code Review 带来的反馈意见让团队成员能够迅速提升自己的技能水平，这解决了 LinkedIn 各个团队近年来因迅速扩张带来的技能不足的问题。<br>通过建立公司范围的 Code Review 工具，这就可以做跨团队的 Code Review。既有利于消除 bug，提升质量，也有利于大家对代码的学习和技能的传播。<br>Code Review 的经验作为员工晋升的参考因素之一。<br>Code Review 的一个难点是，Reviewer 可能不了解某个修改的背景和目的。所以 LinkedIn 要求代码签入版本管理系统前，就对其做清晰的说明，以便复查者了解其目的，促进 Review 的进行。<br>我认为，这个方法实在在太赞了。因为，我看到很多时候，Reviewer 都会说不了解对方代码的背景或是代码量比较大而无法做 Code Review，然而，却没有找到相应的方法解决这个问题。</p><p>LinkedIn 对提交代码写说明文档这个方法是一个非常不错的方法，因为代码提交人写文档的过程其实也是重头梳理的过程。我的个人经验是，写文档的时候通常会发现自己把事儿干复杂了，应该把代码再简化一下，于是就会回头去改代码。是的，写文档就是在写代码。</p><p>有些 Code Review 工具所允许给出的反馈只是代码怎样修改以变得更好，但长此以往会让人觉得复查提出的意见都表示原先的代码不够好。为了提高员工积极性，LinkedIn 的代码复查工具允许提出“这段代码很棒”之类的话语，以便让好代码的作者得到鼓励。我认为，这个方法也很赞，正面鼓励的价值也不可小看。<br>为 Code Review 的结果写出有目的性的注释。比如“消除重复代码”，“增加了测试覆盖率”，等等。长此以往也让团队的价值观得以明确。<br>Code Review 中，不但要 Review 提交者的代码，还要 Reivew 提交者做过的测试。除了一些单元测试，还有一些可能是手动的测试。提交者最好列出所有测试过的案例。这样可以让 Reviewer 可以做出更多的测试建议，从而可以提高质量。<br>对 Code Review 有明确的期望，不过分关注细枝末节，也不要炫技，而是对要 Review 的代码有一个明确的目标。<br>编程语言和代码质量的研究报告<br>A Large-Scale Study of Programming Languages and Code Quality in GitHub，编程语言和代码质量的研究报告，网址为： <a href="https://cacm.acm.org/magazines/2017/10/221326-a-large-scale-study-of-programming-languages-and-code-quality-in-github/" target="_blank" rel="noopener">https://cacm.acm.org/magazines/2017/10/221326-a-large-scale-study-of-programming-languages-and-code-quality-in-github/</a></p><p>这是一项有趣的研究。有四个人从 Github 上分析了 728 个项目，6300 万行代码，近 3 万个提交人，150 万个 commits，以及 17 种编程语言（如下图所示），然后，他们想找到编程语言对软件质量的影响。</p><p>然后，他们还对编程语言做了一个分类，想找到不同类型的编程语言的 bug 问题。如下图所示：</p><p>以及，他们还对这众多的开源软件做了个聚类，如下图：</p><p>对 bug 的类型也做了一个聚类，如下图：</p><p>其中分析的方法我不多说了。我们来看一下相关的结果。</p><p>首先，他们得出来的第一个结果是，从查看 bug fix 的 commits 的个数情况来看，C、C++、Objective-C、PHP 和 Python 中有很多很多的 commits 都是和 bug fix 相关的，而 Clojure、Haskell、Ruby、Scala 在 bug fix 的 commits 的数明显要少很多。</p><p>下图是各个语言出 bug 的情况。如果你看到是正数，说明高于平均水平，如果你看到是负数，则是低于平均水平。</p><p>第二个结论是，函数式编程语言的 bug 明显比大多数其它语言的要好很多。有隐式类型转换的语言明显产生的 bug 数要比强类型的语言要少很多。函数式的静态类型的语言要比函数式的动态类型语言的程序出 bug 的可能性要小很多。</p><p>第三，研究者想搞清是否 bug 数会和软件的领域相关。比如，业务型的，中间件型、框架、lib，或是数据库。研究表明，并没有什么相关性。下面这个图是各个语言在不同领域的 bug 率。</p><p>第四，研究人员想搞清楚 bug 的类型是否会和语言有关系。的确如此，bug 的类型和语言是强相关性的。下图是各个语言在不同的 bug 类型的情况。如果你看到的是正数，说明高于平均水平，如果你看到的是负数，则是低于平均水平。</p><p>也许，这份报告可以在你评估语言时有一定的借鉴作用。</p><p>电子书：《C++ 软件性能优化》</p><p>Optimizing Software in C++ - Agner Fog - PDF，C++ 软件性能优化，<a href="http://agner.org/optimize/optimizing_cpp.pdf" target="_blank" rel="noopener">http://agner.org/optimize/optimizing_cpp.pdf</a></p><p>这本书是所有 C++ 程序员都应该要读的一本书。这本书从事无巨细地从语言层面，编译器层面，内存访问层面，多线程层面，CPU 层面……讲述了如果对软件性能的调优。实在是一本经典的电子书。</p><p>Agner Fog 还写了其它几本和性能调优相关的书（你可以到这个网址下载：<a href="http://www.agner.org/optimize/" target="_blank" rel="noopener">http://www.agner.org/optimize/</a> ）</p><p>Optimizing subroutines in assembly language: An optimization guide for x86 platforms<br>The microarchitecture of Intel, AMD and VIA CPUs: An optimization guide for assembly programmers and compiler makers<br>Instruction tables: Lists of instruction latencies, throughputs and micro-operation breakdowns for Intel, AMD and VIA CPUs<br>Calling conventions for different C++ compilers and operating systems<br>我今天推荐的内容比较干，需要慢慢吸收体会，最好能借鉴到实践中用用，相信会有更多的感悟和收获。你还对哪些方面的内容感兴趣，欢迎留言给我。我后面收集推荐内容的时候，会有意识地关注整理。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="">http://www.infoq.com/cn/articles/programer-knowledge?utm_source=infoq&amp;utm_medium=popular_widget&amp;utm_campaign=popular_content_list&amp;utm_content=homepage</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在每个月月中，我会推荐一些有价值的内容，供你参考。这个月，我将为你推荐五篇阅读文章，这五篇文章我觉得都是比较不错的经验总结，是我们每一个技术人员都需要知道的东西。它们分别是：&lt;/p&gt;
&lt;p&gt;Stack Overflow 上开出来的一个经典书书单；&lt;br&gt;美国某大学教授给计算
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JVM性能调优监控工具</title>
    <link href="https://yo42.github.io/2018/06/20/JVM%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/"/>
    <id>https://yo42.github.io/2018/06/20/JVM性能调优监控工具/</id>
    <published>2018-06-20T09:03:09.800Z</published>
    <updated>2018-06-20T23:52:29.855Z</updated>
    
    <content type="html"><![CDATA[<h5 id="以下是一些JVM性能调优监控工具"><a href="#以下是一些JVM性能调优监控工具" class="headerlink" title="以下是一些JVM性能调优监控工具"></a>以下是一些JVM性能调优监控工具</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps、jstack、jmap、jhat、jstat、hprof....</span><br></pre></td></tr></table></figure><h6 id="对于java程序-有时可能会碰到以下问题"><a href="#对于java程序-有时可能会碰到以下问题" class="headerlink" title="对于java程序,有时可能会碰到以下问题"></a>对于java程序,有时可能会碰到以下问题</h6><ul><li>OutOfMemoryError，内存不足</li><li>内存泄露</li><li>线程死锁</li><li>锁争用（Lock Contention）</li><li>Java进程消耗CPU过高</li><li>….</li></ul><p>通过一些监控工具去对java程序进行调优以及监控,在发生问题时使用工具去进行定位问题为后续的排障、修复问题提到了很好的辅助作用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;以下是一些JVM性能调优监控工具&quot;&gt;&lt;a href=&quot;#以下是一些JVM性能调优监控工具&quot; class=&quot;headerlink&quot; title=&quot;以下是一些JVM性能调优监控工具&quot;&gt;&lt;/a&gt;以下是一些JVM性能调优监控工具&lt;/h5&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人间失格</title>
    <link href="https://yo42.github.io/2018/06/11/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/"/>
    <id>https://yo42.github.io/2018/06/11/人间失格/</id>
    <published>2018-06-11T08:20:56.293Z</published>
    <updated>2018-06-14T05:08:18.106Z</updated>
    
    <content type="html"><![CDATA[<p>《人间失格》是日本作家太宰治的长篇小说。<br>人间失格意为丧失了做人的资格。</p><p>由序、第一手札、第二手札、第三手札、后记共五个部分构成，其中序和后记以作者口吻叙说，三个手札则以主人公叶藏的口吻叙述。</p><p>小说的前半部分以大庭叶藏这位主人公的口吻,讲述了他奇特而悲催的人生经历<br>叶藏自小仿佛便看穿了人世间的种种阴暗，遂以一种诡异的笑容面对他的人生，他时常在饰演一个小丑般的角色去对待人世间的事与物，病态且嬉戏的童年，至青年酗酒、沉溺女色、参加“非法”左翼团体，到中年与娼妓一起殉情(女死男生)，种种的经历让他饱受了人世间的情苦，这从一开始也埋下了伏笔，预示着叶藏最终走向毁灭之路。</p><p>《人间失格》可以说是太宰治本人的自传了，主角大庭叶藏就是他为原型的,在文中的”GoodBye” 章节写道”一位文坛大师辞世，告别仪式结束时，忽然下起了雨….”(太宰治留在人世间的一个彩蛋？)</p><p>21岁的太宰治和银座咖啡馆女侍投海自杀未遂…<br>39岁与崇拜他的女读者山崎富荣跳玉川上水自杀…</p><p>以下是《人间失格的》的一些摘抄:</p><p><strong>早晨，我睁眼醒来翻身下床，又变成了原来那个浅薄无知、善于伪装的滑稽角色。胆小鬼连幸福都会惧怕，碰到棉花都会受伤，有时也会被幸福所伤。趁着还没有受伤，我想就这样赶快分道扬镳。我又放出了惯用的逗笑烟幕弹。</strong></p><p><strong>而那些相互欺瞒却又过着单纯、明了生活的人，抑或相互欺瞒却又胸有成竹地面对生活的人，着实令人费解。人类终究未能让我明白其中真谛。若我能明了，或许就不必如此地畏惧人类，也不必竭力讨好众人，更不至于与人类的生活对立，夜夜遭受地狱般的苦难。</strong></p><p>附上一张太宰治很”丧”的照片<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="太宰治.jpg" alt="太宰治君" title="">                </div>                <div class="image-caption">太宰治君</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《人间失格》是日本作家太宰治的长篇小说。&lt;br&gt;人间失格意为丧失了做人的资格。&lt;/p&gt;
&lt;p&gt;由序、第一手札、第二手札、第三手札、后记共五个部分构成，其中序和后记以作者口吻叙说，三个手札则以主人公叶藏的口吻叙述。&lt;/p&gt;
&lt;p&gt;小说的前半部分以大庭叶藏这位主人公的口吻,讲述
      
    
    </summary>
    
      <category term="Books" scheme="https://yo42.github.io/categories/Books/"/>
    
    
      <category term="Books" scheme="https://yo42.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>爱你就像爱生命</title>
    <link href="https://yo42.github.io/2018/06/11/%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD/"/>
    <id>https://yo42.github.io/2018/06/11/爱你就像爱生命/</id>
    <published>2018-06-11T08:20:33.587Z</published>
    <updated>2018-06-14T05:24:51.043Z</updated>
    
    <content type="html"><![CDATA[<p>爱你就像爱生命,爱你要了我的命。<br>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;《爱你就像爱生命》是一本书信集,是王小波和李银河情书信集。</p><p>下方是些摘抄:</p><p>我现在已经养成了一种习惯，就是每三二天要找你说几句不想对别人说的话。当然还有更多的话没有说出口来，但是只要我把它带到了你面前，我走开的时候自己就满意了，这些念头就不会做再折磨我了。</p><p>我现在不坏了，我有了良心。我的良心就是你。</p><p>我的灵魂里有很多地方玩世不恭 ，对人傲慢无礼，但是它有一个核心，这个核心害怕黑暗，柔弱得像绵羊一样。只有顶平等的有爱才能使他得到安慰。你对我是属于这个核心的。</p><p>我是爱你的，看见就爱上了。我爱你爱到不自私的地步。</p><p>我会不爱你吗？不爱你？不会。爱你就像爱生命。</p><p>我真不知怎么才能和你亲近起来，你好像是一个可望而不可及的目标，我琢磨不透，追也追不上，就坐下哭了起来。</p><p>你要是喜欢别人我会哭，但是还是喜欢你。</p><p>我把我整个的灵魂都给你，连同它的怪癖，耍小脾气，忽明忽暗， 一千八百种坏毛病。它真讨厌，只有一点好，爱你。</p><p>你知道我在世界上最珍视的东西吗？那就是我自己的性格，也就是我自己思想的自由。在这个问题上我都放下刀枪了–也就是说，听任你的改造和影响。你为什么还要计较我一两次我无心的过失和对你的伤害呢？</p><p>我对好多人怀有最深的感情，尤其是对你。我很想为别人做好事，尤其是对你。</p><p>你是非常可爱的人，真应该遇到最好的人，我也真希望我就是。</p><p>假如你愿意，你就恋爱吧，爱我。</p><p>不一定要你爱我，但是我爱你，这是我的命运。</p><p>你要是回来我就高兴了，马上我就要放个震动北京城的大炮仗。</p><p>男孩子们都喜欢女孩子，可是谁也没有我喜欢你这么厉害。</p><p>我现在就很高兴，因为你又好又喜欢我，希望我高兴，有什么事情也喜欢说给我听。</p><p>比方说你对于我，主要是因为你可爱。我从来没有在男人或者女人中发现这么可爱的人。</p><p>但愿我和你，是一支唱不完的歌。</p><p>谁也管不住我爱你，真的，谁管谁就真傻，我和你谁也管不住呢。你别怕，真的你谁也不要怕，最亲爱的好银河，要爱就爱个够吧，世界上没有比爱情更好的东西了。</p><p>你真好，我真爱你。可惜我不是诗人，说不出再动人一点的话了。</p><p>有时候你难过了，这时候我更爱你。只要你不拒绝我就拥抱你，我会告诉你这是因为什么。就是我不知是为了什么。</p><p>不，我对你什么要求也没有，什么要求也没有，只要你来看我。我也不知道为什么。你愿意要什么，就给什么。你知道吗？要，对我来说，就是给啊。你要什么就是给我什么。</p><p>不管我本人多么平庸，我总觉得对你的爱很美。</p><p>静下来想你，觉得一切都没好得不可思议。以前我不知道爱情这么美好，爱到深处这么美好。真不想让任何人来管我们。谁也管不着，和谁都无关。告诉你，一想到你，我这张丑脸上就泛起微笑。</p><p>我只希望你和我好，互不猜忌，也互不称誉，安如平日，你和我说话就像对自己说话一样，我和你说话也像对自己说话一样。你说，和我好么？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;爱你就像爱生命,爱你要了我的命。&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;《爱你就像爱生命》是一本书信集,是王小波和李银河情书信集。&lt;/p&gt;
&lt;p&gt;下方是些摘抄:&lt;/p&gt;
&lt;p&gt;我现在已经养成了一种习惯，就是每三二天要找你说几句
      
    
    </summary>
    
      <category term="Books" scheme="https://yo42.github.io/categories/Books/"/>
    
    
      <category term="Books" scheme="https://yo42.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>恶意</title>
    <link href="https://yo42.github.io/2018/06/09/%E6%81%B6%E6%84%8F/"/>
    <id>https://yo42.github.io/2018/06/09/恶意/</id>
    <published>2018-06-09T08:14:20.748Z</published>
    <updated>2018-06-13T15:22:02.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="东野圭吾《恶意》"><a href="#东野圭吾《恶意》" class="headerlink" title="东野圭吾《恶意》"></a>东野圭吾《恶意》</h3><p>花了大约三小时拜读完了东野圭吾的《恶意》<br>相较之前的《白夜行》,此次更令我倒吸一口凉气,依然是十分具有东野圭吾特色的推理、悬疑的小说。<br>小说绝大部分以第一人称 “手记” 的特点更令人感觉真实,以及更具有代入感。</p><p>小说故事讲述了一个畅销作家在出国前一晚被杀害的故事,以及后续一系列让人们匪夷所思的情节。</p><p>以第一人称的方式写手记的凶手被逮捕了,但当警方盘问其杀人动机时却令人疑惑不解,而隐藏在故事背后令人不寒而栗的真相又会是什么呢？</p><p>在故事的最后 真相之章<br>来自加贺警官的阐述<br>经过层层深挖,发现凶案背后的真相竟如此令人难以接受。</p><p>东野圭吾前期巧妙的铺垫,一开始就蒙蔽了读者的双眼,到故事的最后真相慢慢浮出水面,情节反转的巧妙性就不言而喻了。</p><p>人性中的恶意：贪婪、嫉妒…真是十分可怕的负面能量，让人寒毛凛凛。</p><p>我发现东野圭吾书的一些特点,善与恶的对立面双方都是智商极高的人<br>无论是《嫌疑人X的献身》里的数学天才石神与神探伽利略汤川<br>亦或是《恶意》中的野野口与加贺。</p><p>东野圭吾的书不仅仅在于情节故事的铺垫地精彩,剧情反转地极为巧妙,而且在每个悬疑故事背后的真相把人性的丑恶面刻画地淋漓尽致,以及所映射出来的社会问题令人感到窒息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;东野圭吾《恶意》&quot;&gt;&lt;a href=&quot;#东野圭吾《恶意》&quot; class=&quot;headerlink&quot; title=&quot;东野圭吾《恶意》&quot;&gt;&lt;/a&gt;东野圭吾《恶意》&lt;/h3&gt;&lt;p&gt;花了大约三小时拜读完了东野圭吾的《恶意》&lt;br&gt;相较之前的《白夜行》,此次更令我倒吸一口凉气
      
    
    </summary>
    
      <category term="Books" scheme="https://yo42.github.io/categories/Books/"/>
    
    
      <category term="Books" scheme="https://yo42.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>DevOps And AIOps</title>
    <link href="https://yo42.github.io/2018/05/28/DevOps-And-AIOps/"/>
    <id>https://yo42.github.io/2018/05/28/DevOps-And-AIOps/</id>
    <published>2018-05-28T06:19:21.000Z</published>
    <updated>2018-05-28T06:19:21.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Material.io</title>
    <link href="https://yo42.github.io/2018/05/28/Material-io/"/>
    <id>https://yo42.github.io/2018/05/28/Material-io/</id>
    <published>2018-05-28T06:17:56.827Z</published>
    <updated>2018-06-10T07:41:51.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于Material-io"><a href="#关于Material-io" class="headerlink" title="关于Material.io"></a>关于Material.io</h3><p>&nbsp; &nbsp; &nbsp; Material.io 是谷歌的一套设计交互系统,是一种视觉语言，将优秀设计的经典原则与科技创新相结合。</p><p>&nbsp; &nbsp; &nbsp;  起初我并不知道有这东西,纯粹的觉得它好看,Google的原生安卓系统也是与此有关系,所以博客的主题就选择了这款indigo。</p><p>&nbsp; &nbsp; &nbsp; 我们都需要有善于发现美的眼睛,你说是么?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于Material-io&quot;&gt;&lt;a href=&quot;#关于Material-io&quot; class=&quot;headerlink&quot; title=&quot;关于Material.io&quot;&gt;&lt;/a&gt;关于Material.io&lt;/h3&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Mater
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于Docker Build 目录与GIT库共存的一些技巧</title>
    <link href="https://yo42.github.io/2018/05/27/%E5%85%B3%E4%BA%8EDocker-Build-%E7%9B%AE%E5%BD%95%E4%B8%8EGIT%E5%BA%93%E5%85%B1%E5%AD%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    <id>https://yo42.github.io/2018/05/27/关于Docker-Build-目录与GIT库共存的一些技巧/</id>
    <published>2018-05-27T02:48:18.000Z</published>
    <updated>2018-06-09T05:24:51.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如下"><a href="#如下" class="headerlink" title="如下"></a>如下</h2><pre>echo .git/ > .dockerignore这样操作后，能加快docker build的速度</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如下&quot;&gt;&lt;a href=&quot;#如下&quot; class=&quot;headerlink&quot; title=&quot;如下&quot;&gt;&lt;/a&gt;如下&lt;/h2&gt;&lt;pre&gt;
echo .git/ &gt; .dockerignore
这样操作后，能加快docker build的速度
&lt;/pre&gt;


      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《白日梦想家》</title>
    <link href="https://yo42.github.io/2018/05/13/Movie/"/>
    <id>https://yo42.github.io/2018/05/13/Movie/</id>
    <published>2018-05-13T06:24:27.852Z</published>
    <updated>2018-05-27T02:47:22.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《白日梦想家》献给对生活乏味的人们"><a href="#《白日梦想家》献给对生活乏味的人们" class="headerlink" title="《白日梦想家》献给对生活乏味的人们"></a>《白日梦想家》献给对生活乏味的人们</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/Cosmos04.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="经典台词"><a href="#经典台词" class="headerlink" title="经典台词"></a>经典台词</h3><blockquote><p>To see the world, things dangerous to come to,<br>To see behind walls, draw closer,<br>To find each other, and To feel.<br>That is the purpose of life</p><p>开拓视野, 冲破艰险.<br>看见世界, 身临其境.<br>贴近彼此, 感受生活.</p></blockquote><blockquote><p>“Sometimes I don’t.<br>If I like a moment, for me, personally<br>I don’t like to have the distraction of the camera.<br>I just want to stay in it.”</p><footer><strong>Sean O'Connell</strong></footer></blockquote><p>More info: <a href="https://movie.douban.com/subject/2133323/" target="_blank" rel="noopener">This Movie</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;《白日梦想家》献给对生活乏味的人们&quot;&gt;&lt;a href=&quot;#《白日梦想家》献给对生活乏味的人们&quot; class=&quot;headerlink&quot; title=&quot;《白日梦想家》献给对生活乏味的人们&quot;&gt;&lt;/a&gt;《白日梦想家》献给对生活乏味的人们&lt;/h1&gt;&lt;figure class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World! Why Blogs?</title>
    <link href="https://yo42.github.io/2018/05/13/hello-world/"/>
    <id>https://yo42.github.io/2018/05/13/hello-world/</id>
    <published>2018-05-13T06:24:27.852Z</published>
    <updated>2018-06-11T05:22:03.889Z</updated>
    
    <content type="html"><![CDATA[<pre><code>为何博客？你问我？我也不知。很久之前便有此念头，但迟迟却不见行动。由于自己时常会有些天马行空的想法，为此也是找个地方记录下吧。博客大概会记录些关于学习上的东西&amp;技术上的文档，以及些杂谈吧。   </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;为何博客？你问我？我也不知。
很久之前便有此念头，但迟迟却不见行动。
由于自己时常会有些天马行空的想法，为此也是找个地方记录下吧。
博客大概会记录些关于学习上的东西&amp;amp;技术上的文档，以及些杂谈吧。   
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
